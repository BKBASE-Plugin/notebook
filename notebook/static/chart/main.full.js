(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof exports === 'object')
		exports["@tencent/bkcharts-panel-main"] = factory();
	else
		root["@tencent/bkcharts-panel-main"] = factory();
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 958:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {


(function (global, factory) {
 true ? module.exports = factory() :
0;
}(this, (function () { 'use strict';

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function noop() {}
var uid = function () {
  var id = 0;
  return function () {
    return id++;
  };
}();
function isNullOrUndef(value) {
  return value === null || typeof value === 'undefined';
}
function isEmpty(value) {
  var IncludeNullUndefined = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return value === '' || (IncludeNullUndefined ? isNullOrUndef(value) : false);
}
function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  var type = Object.prototype.toString.call(value);
  if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === '[object Object]';
}
var isNumberFinite = function isNumberFinite(value) {
  return (typeof value === 'number' || value instanceof Number) && isFinite(+value);
};
function valueOrDefault(value, defaultValue) {
  return typeof value === 'undefined' ? defaultValue : value;
}
function valueAtIndexOrDefault(value, index, defaultValue) {
  return valueOrDefault(isArray(value) ? value[index] : value, defaultValue);
}
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === 'function') {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  var i, len, keys;
  if (isArray(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i = len - 1; i >= 0; i--) {
        fn.call(thisArg, loopable[i], i);
      }
    } else {
      for (i = 0; i < len; i++) {
        fn.call(thisArg, loopable[i], i);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i = 0; i < len; i++) {
      fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
  }
}
function arrayEquals(a0, a1) {
  var i, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];
    if (v0 instanceof Array && v1 instanceof Array) {
      if (!arrayEquals(v0, v1)) {
        return false;
      }
    } else if (v0 !== v1) {
      return false;
    }
  }
  return true;
}
function _elementsEqual(a0, a1) {
  var i, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone(source) {
  if (isArray(source)) {
    return source.map(clone);
  }
  if (isObject(source)) {
    var target = {};
    var keys = Object.keys(source);
    var klen = keys.length;
    var k = 0;
    for (; k < klen; ++k) {
      target[keys[k]] = clone(source[keys[k]]);
    }
    return target;
  }
  return source;
}
function _merger(key, target, source, options) {
  var tval = target[key];
  var sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone(sval);
  }
}
function merge(target, source, options) {
  var sources = isArray(source) ? source : [source];
  var ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options = options || {};
  var merger = options.merger || _merger;
  for (var i = 0; i < ilen; ++i) {
    source = sources[i];
    if (!isObject(source)) {
      continue;
    }
    var keys = Object.keys(source);
    for (var k = 0, klen = keys.length; k < klen; ++k) {
      merger(keys[k], target, source, options);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}
function _mergerIf(key, target, source) {
  var tval = target[key];
  var sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone(sval);
  }
}
function inherits(extensions) {
  var me = this;
  var ChartElement = extensions && Object.prototype.hasOwnProperty.call(extensions, 'constructor') ? extensions.constructor : function () {
    return me.apply(this, arguments);
  };
  var Surrogate = function Surrogate() {
    this.constructor = ChartElement;
  };
  Surrogate.prototype = me.prototype;
  ChartElement.prototype = new Surrogate();
  ChartElement.extend = inherits;
  if (extensions) {
    _extends(ChartElement.prototype, extensions);
  }
  ChartElement.__super__ = me.prototype;
  return ChartElement;
}
function _deprecated(scope, value, previous, current) {
  if (value !== undefined) {
    console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
  }
}

var coreHelpers = /*#__PURE__*/Object.freeze({
__proto__: null,
noop: noop,
uid: uid,
isNullOrUndef: isNullOrUndef,
isEmpty: isEmpty,
isArray: isArray,
isObject: isObject,
isFinite: isNumberFinite,
valueOrDefault: valueOrDefault,
valueAtIndexOrDefault: valueAtIndexOrDefault,
callback: callback,
each: each,
arrayEquals: arrayEquals,
_elementsEqual: _elementsEqual,
clone: clone,
_merger: _merger,
merge: merge,
mergeIf: mergeIf,
_mergerIf: _mergerIf,
inherits: inherits,
_deprecated: _deprecated
});

var PI = Math.PI;
var RAD_PER_DEG = PI / 180;
var DOUBLE_PI = PI * 2;
var HALF_PI = PI / 2;
var QUARTER_PI = PI / 4;
var TWO_THIRDS_PI = PI * 2 / 3;
function _measureText(ctx, data, gc, longest, string) {
  var textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  var data = cache.data = cache.data || {};
  var gc = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  var longest = 0;
  var ilen = arrayOfThings.length;
  var i, j, jlen, thing, nestedThing;
  for (i = 0; i < ilen; i++) {
    thing = arrayOfThings[i];
    if (thing !== undefined && thing !== null && isArray(thing) !== true) {
      longest = _measureText(ctx, data, gc, longest, thing);
    } else if (isArray(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];
        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
          longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  var gcLen = gc.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i = 0; i < gcLen; i++) {
      delete data[gc[i]];
    }
    gc.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  var devicePixelRatio = chart.currentDevicePixelRatio;
  var halfWidth = width / 2;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clear(chart) {
  clearContext(chart.ctx, chart.width, chart.height);
}
function clearContext(ctx, width, height) {
  ctx.clearRect(0, 0, width, height);
}
function drawPoint(ctx, options, x, y) {
  var type, xOffset, yOffset, size, cornerRadius;
  var style = options.pointStyle;
  var rotation = options.rotation;
  var radius = options.radius;
  var rad = (rotation || 0) * RAD_PER_DEG;
  if (style && _typeof(style) === 'object') {
    type = style.toString();
    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
    default:
      ctx.arc(x, y, radius, 0, DOUBLE_PI);
      ctx.closePath();
      break;
    case 'triangle':
      ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
      ctx.closePath();
      break;
    case 'rectRounded':
      cornerRadius = radius * 0.516;
      size = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size;
      yOffset = Math.sin(rad + QUARTER_PI) * size;
      ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;
    case 'rect':
      if (!rotation) {
        size = Math.SQRT1_2 * radius;
        ctx.rect(x - size, y - size, 2 * size, 2 * size);
        break;
      }
      rad += QUARTER_PI;
    case 'rectRot':
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + yOffset, y - xOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      ctx.lineTo(x - yOffset, y + xOffset);
      ctx.closePath();
      break;
    case 'crossRot':
      rad += QUARTER_PI;
    case 'cross':
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      ctx.moveTo(x + yOffset, y - xOffset);
      ctx.lineTo(x - yOffset, y + xOffset);
      break;
    case 'star':
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      ctx.moveTo(x + yOffset, y - xOffset);
      ctx.lineTo(x - yOffset, y + xOffset);
      rad += QUARTER_PI;
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      ctx.moveTo(x + yOffset, y - xOffset);
      ctx.lineTo(x - yOffset, y + xOffset);
      break;
    case 'line':
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      break;
    case 'dash':
      ctx.moveTo(x, y);
      ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
      break;
  }
  ctx.fill();
  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area) {
  var epsilon = 0.5;
  return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;
}
function clearArea(ctx, area) {
  ctx.clearRect(area.left, area.top, area.right - area.left, area.bottom - area.top);
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode === 'middle') {
    var midpoint = (previous.x + target.x) / 2.0;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === 'after' !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);
}
function roundedRect(ctx, x, y, width, height, radius) {
  var TL, TR, BR, BL;
  var mH = function mH(r) {
    return Math.min(r, width / 2);
  };
  var mV = function mV(r) {
    return Math.min(r, height / 2);
  };
  if (radius instanceof Array) {
    TL = radius[0];
    TR = radius[1];
    BR = radius[2];
    BL = radius[3];
  } else {
    TL = TR = BR = BL = radius;
  }
  ctx.beginPath();
  ctx.moveTo(x + mH(TL), y);
  ctx.lineTo(x + width - mH(TR), y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + mV(TR));
  ctx.lineTo(x + width, y + height - mV(BR));
  ctx.quadraticCurveTo(x + width, y + height, x + width - mH(BR), y + height);
  ctx.lineTo(x + mH(BL), y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - mV(BL));
  ctx.lineTo(x, y + mV(TL));
  ctx.quadraticCurveTo(x, y, x + mH(TL), y);
  ctx.closePath();
}

var canvas = /*#__PURE__*/Object.freeze({
__proto__: null,
_measureText: _measureText,
_longestText: _longestText,
_alignPixel: _alignPixel,
clear: clear,
clearContext: clearContext,
drawPoint: drawPoint,
_isPointInArea: _isPointInArea,
clearArea: clearArea,
clipArea: clipArea,
unclipArea: unclipArea,
_steppedLineTo: _steppedLineTo,
_bezierCurveTo: _bezierCurveTo,
roundedRect: roundedRect
});

var PI$1 = Math.PI;
var TAU = 2 * PI$1;
var PITAU = TAU + PI$1;
function _factorize(value) {
  var result = [];
  var sqrt = Math.sqrt(value);
  var i;
  for (i = 1; i < sqrt; i++) {
    if (value % i === 0) {
      result.push(i);
      result.push(value / i);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort(function (a, b) {
    return a - b;
  }).pop();
  return result;
}
var log10 = Math.log10 || function (x) {
  var exponent = Math.log(x) * Math.LOG10E;
  var powerOf10 = Math.round(exponent);
  var isPowerOf10 = x === Math.pow(10, powerOf10);
  return isPowerOf10 ? powerOf10 : exponent;
};
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostEquals(x, y, epsilon) {
  return Math.abs(x - y) < epsilon;
}
function almostWhole(x, epsilon) {
  var rounded = Math.round(x);
  return rounded - epsilon <= x && rounded + epsilon >= x;
}
function _setMinAndMaxByKey(array, target, property) {
  var i, ilen, value;
  for (i = 0, ilen = array.length; i < ilen; i++) {
    value = array[i][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
var sign = Math.sign ? function (x) {
  return Math.sign(x);
} : function (x) {
  x = +x;
  if (x === 0 || isNaN(x)) {
    return x;
  }
  return x > 0 ? 1 : -1;
};
function toRadians(degrees) {
  return degrees * (PI$1 / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI$1);
}
function _decimalPlaces(x) {
  if (!isNumberFinite(x)) {
    return;
  }
  var e = 1;
  var p = 0;
  while (Math.round(x * e) / e !== x) {
    e *= 10;
    p++;
  }
  return p;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  var distanceFromXCenter = anglePoint.x - centrePoint.x;
  var distanceFromYCenter = anglePoint.y - centrePoint.y;
  var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < -0.5 * PI$1) {
    angle += TAU;
  }
  return {
    angle: angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a, b) {
  return (a - b + PITAU) % TAU - PI$1;
}
function _normalizeAngle(a) {
  return (a % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end) {
  var a = _normalizeAngle(angle);
  var s = _normalizeAngle(start);
  var e = _normalizeAngle(end);
  var angleToStart = _normalizeAngle(s - a);
  var angleToEnd = _normalizeAngle(e - a);
  var startToAngle = _normalizeAngle(a - s);
  var endToAngle = _normalizeAngle(a - e);
  return a === s || a === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}

var math = /*#__PURE__*/Object.freeze({
__proto__: null,
_factorize: _factorize,
log10: log10,
isNumber: isNumber,
almostEquals: almostEquals,
almostWhole: almostWhole,
_setMinAndMaxByKey: _setMinAndMaxByKey,
sign: sign,
toRadians: toRadians,
toDegrees: toDegrees,
_decimalPlaces: _decimalPlaces,
getAngleFromPoint: getAngleFromPoint,
distanceBetweenPoints: distanceBetweenPoints,
_angleDiff: _angleDiff,
_normalizeAngle: _normalizeAngle,
_angleBetween: _angleBetween,
_limitValue: _limitValue
});

var EPSILON = Number.EPSILON || 1e-14;
function splineCurve(firstPoint, middlePoint, afterPoint, t) {
  var previous = firstPoint.skip ? middlePoint : firstPoint;
  var current = middlePoint;
  var next = afterPoint.skip ? middlePoint : afterPoint;
  var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
  var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
  var s01 = d01 / (d01 + d12);
  var s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  var fa = t * s01;
  var fb = t * s12;
  return {
    previous: {
      x: current.x - fa * (next.x - previous.x),
      y: current.y - fa * (next.y - previous.y)
    },
    next: {
      x: current.x + fb * (next.x - previous.x),
      y: current.y + fb * (next.y - previous.y)
    }
  };
}
function splineCurveMonotone(points) {
  var pointsWithTangents = (points || []).map(function (point) {
    return {
      model: point,
      deltaK: 0,
      mK: 0
    };
  });
  var pointsLen = pointsWithTangents.length;
  var i, pointBefore, pointCurrent, pointAfter;
  for (i = 0; i < pointsLen; ++i) {
    pointCurrent = pointsWithTangents[i];
    if (pointCurrent.model.skip) {
      continue;
    }
    pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    if (pointAfter && !pointAfter.model.skip) {
      var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x;
      pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
    }
    if (!pointBefore || pointBefore.model.skip) {
      pointCurrent.mK = pointCurrent.deltaK;
    } else if (!pointAfter || pointAfter.model.skip) {
      pointCurrent.mK = pointBefore.deltaK;
    } else if (sign(pointBefore.deltaK) !== sign(pointCurrent.deltaK)) {
      pointCurrent.mK = 0;
    } else {
      pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
    }
  }
  var alphaK, betaK, tauK, squaredMagnitude;
  for (i = 0; i < pointsLen - 1; ++i) {
    pointCurrent = pointsWithTangents[i];
    pointAfter = pointsWithTangents[i + 1];
    if (pointCurrent.model.skip || pointAfter.model.skip) {
      continue;
    }
    if (almostEquals(pointCurrent.deltaK, 0, EPSILON)) {
      pointCurrent.mK = pointAfter.mK = 0;
      continue;
    }
    alphaK = pointCurrent.mK / pointCurrent.deltaK;
    betaK = pointAfter.mK / pointCurrent.deltaK;
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
    pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
  }
  var deltaX;
  for (i = 0; i < pointsLen; ++i) {
    pointCurrent = pointsWithTangents[i];
    if (pointCurrent.model.skip) {
      continue;
    }
    pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    if (pointBefore && !pointBefore.model.skip) {
      deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
      pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
      pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
    }
    if (pointAfter && !pointAfter.model.skip) {
      deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
      pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
      pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
    }
  }
}
function capControlPoint(pt, min, max) {
  return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
  var i, ilen, point;
  for (i = 0, ilen = points.length; i < ilen; ++i) {
    point = points[i];
    if (!_isPointInArea(point, area)) {
      continue;
    }
    if (i > 0 && _isPointInArea(points[i - 1], area)) {
      point.controlPointPreviousX = capControlPoint(point.controlPointPreviousX, area.left, area.right);
      point.controlPointPreviousY = capControlPoint(point.controlPointPreviousY, area.top, area.bottom);
    }
    if (i < points.length - 1 && _isPointInArea(points[i + 1], area)) {
      point.controlPointNextX = capControlPoint(point.controlPointNextX, area.left, area.right);
      point.controlPointNextY = capControlPoint(point.controlPointNextY, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options, area, loop) {
  var i, ilen, point, controlPoints;
  if (options.spanGaps) {
    points = points.filter(function (pt) {
      return !pt.skip;
    });
  }
  if (options.cubicInterpolationMode === 'monotone') {
    splineCurveMonotone(points);
  } else {
    var prev = loop ? points[points.length - 1] : points[0];
    for (i = 0, ilen = points.length; i < ilen; ++i) {
      point = points[i];
      controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
      point.controlPointPreviousX = controlPoints.previous.x;
      point.controlPointPreviousY = controlPoints.previous.y;
      point.controlPointNextX = controlPoints.next.x;
      point.controlPointNextY = controlPoints.next.y;
      prev = point;
    }
  }
  if (options.capBezierPoints) {
    capBezierPoints(points, area);
  }
}

var curve = /*#__PURE__*/Object.freeze({
__proto__: null,
splineCurve: splineCurve,
splineCurveMonotone: splineCurveMonotone,
_updateBezierControlPoints: _updateBezierControlPoints
});

function isConstrainedValue(value) {
  return value !== undefined && value !== null && value !== 'none';
}
function _getParentNode(domNode) {
  var parent = domNode.parentNode;
  if (parent && parent.toString() === '[object ShadowRoot]') {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
  var valueInPixels;
  if (typeof styleValue === 'string') {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf('%') !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
function getConstraintDimension(domNode, maxStyle, percentageProperty) {
  var view = document.defaultView;
  var parentNode = _getParentNode(domNode);
  var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
  var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
  var hasCNode = isConstrainedValue(constrainedNode);
  var hasCContainer = isConstrainedValue(constrainedContainer);
  var infinity = Number.POSITIVE_INFINITY;
  if (hasCNode || hasCContainer) {
    return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
  }
}
function getStyle(el, property) {
  return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
}
function getConstraintWidth(domNode) {
  return getConstraintDimension(domNode, 'max-width', 'clientWidth');
}
function getConstraintHeight(domNode) {
  return getConstraintDimension(domNode, 'max-height', 'clientHeight');
}
function _calculatePadding(container, padding, parentDimension) {
  padding = getStyle(container, padding);
  return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
}
function getRelativePosition(evt, chart) {
  var mouseX, mouseY;
  var e = evt.originalEvent || evt;
  var canvasElement = chart.canvas;
  var boundingRect = canvasElement.getBoundingClientRect();
  var touches = e.touches;
  if (touches && touches.length > 0) {
    mouseX = touches[0].clientX;
    mouseY = touches[0].clientY;
  } else {
    mouseX = e.clientX;
    mouseY = e.clientY;
  }
  var paddingLeft = parseFloat(getStyle(canvasElement, 'padding-left'));
  var paddingTop = parseFloat(getStyle(canvasElement, 'padding-top'));
  var paddingRight = parseFloat(getStyle(canvasElement, 'padding-right'));
  var paddingBottom = parseFloat(getStyle(canvasElement, 'padding-bottom'));
  var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
  var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
  mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvasElement.width / chart.currentDevicePixelRatio);
  mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvasElement.height / chart.currentDevicePixelRatio);
  return {
    x: mouseX,
    y: mouseY
  };
}
function getMaximumWidth(domNode) {
  var container = _getParentNode(domNode);
  if (!container) {
    if (typeof domNode.clientWidth === 'number') {
      return domNode.clientWidth;
    }
    return domNode.width;
  }
  var clientWidth = container.clientWidth;
  var paddingLeft = _calculatePadding(container, 'padding-left', clientWidth);
  var paddingRight = _calculatePadding(container, 'padding-right', clientWidth);
  var w = clientWidth - paddingLeft - paddingRight;
  var cw = getConstraintWidth(domNode);
  return isNaN(cw) ? w : Math.min(w, cw);
}
function getMaximumHeight(domNode) {
  var container = _getParentNode(domNode);
  if (!container) {
    if (typeof domNode.clientHeight === 'number') {
      return domNode.clientHeight;
    }
    return domNode.height;
  }
  var clientHeight = container.clientHeight;
  var paddingTop = _calculatePadding(container, 'padding-top', clientHeight);
  var paddingBottom = _calculatePadding(container, 'padding-bottom', clientHeight);
  var h = clientHeight - paddingTop - paddingBottom;
  var ch = getConstraintHeight(domNode);
  return isNaN(ch) ? h : Math.min(h, ch);
}
function retinaScale(chart, forceRatio) {
  var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== 'undefined' && window.devicePixelRatio || 1;
  var canvas = chart.canvas,
      width = chart.width,
      height = chart.height;
  canvas.height = height * pixelRatio;
  canvas.width = width * pixelRatio;
  chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
  if (canvas.style && !canvas.style.height && !canvas.style.width) {
    canvas.style.height = height + 'px';
    canvas.style.width = width + 'px';
  }
}

var dom = /*#__PURE__*/Object.freeze({
__proto__: null,
_getParentNode: _getParentNode,
getStyle: getStyle,
getRelativePosition: getRelativePosition,
getMaximumWidth: getMaximumWidth,
getMaximumHeight: getMaximumHeight,
retinaScale: retinaScale
});

var effects = {
  linear: function linear(t) {
    return t;
  },
  easeInQuad: function easeInQuad(t) {
    return t * t;
  },
  easeOutQuad: function easeOutQuad(t) {
    return -t * (t - 2);
  },
  easeInOutQuad: function easeInOutQuad(t) {
    if ((t /= 0.5) < 1) {
      return 0.5 * t * t;
    }
    return -0.5 * (--t * (t - 2) - 1);
  },
  easeInCubic: function easeInCubic(t) {
    return t * t * t;
  },
  easeOutCubic: function easeOutCubic(t) {
    return (t -= 1) * t * t + 1;
  },
  easeInOutCubic: function easeInOutCubic(t) {
    if ((t /= 0.5) < 1) {
      return 0.5 * t * t * t;
    }
    return 0.5 * ((t -= 2) * t * t + 2);
  },
  easeInQuart: function easeInQuart(t) {
    return t * t * t * t;
  },
  easeOutQuart: function easeOutQuart(t) {
    return -((t -= 1) * t * t * t - 1);
  },
  easeInOutQuart: function easeInOutQuart(t) {
    if ((t /= 0.5) < 1) {
      return 0.5 * t * t * t * t;
    }
    return -0.5 * ((t -= 2) * t * t * t - 2);
  },
  easeInQuint: function easeInQuint(t) {
    return t * t * t * t * t;
  },
  easeOutQuint: function easeOutQuint(t) {
    return (t -= 1) * t * t * t * t + 1;
  },
  easeInOutQuint: function easeInOutQuint(t) {
    if ((t /= 0.5) < 1) {
      return 0.5 * t * t * t * t * t;
    }
    return 0.5 * ((t -= 2) * t * t * t * t + 2);
  },
  easeInSine: function easeInSine(t) {
    return -Math.cos(t * (Math.PI / 2)) + 1;
  },
  easeOutSine: function easeOutSine(t) {
    return Math.sin(t * (Math.PI / 2));
  },
  easeInOutSine: function easeInOutSine(t) {
    return -0.5 * (Math.cos(Math.PI * t) - 1);
  },
  easeInExpo: function easeInExpo(t) {
    return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));
  },
  easeOutExpo: function easeOutExpo(t) {
    return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
  },
  easeInOutExpo: function easeInOutExpo(t) {
    if (t === 0) {
      return 0;
    }
    if (t === 1) {
      return 1;
    }
    if ((t /= 0.5) < 1) {
      return 0.5 * Math.pow(2, 10 * (t - 1));
    }
    return 0.5 * (-Math.pow(2, -10 * --t) + 2);
  },
  easeInCirc: function easeInCirc(t) {
    if (t >= 1) {
      return t;
    }
    return -(Math.sqrt(1 - t * t) - 1);
  },
  easeOutCirc: function easeOutCirc(t) {
    return Math.sqrt(1 - (t -= 1) * t);
  },
  easeInOutCirc: function easeInOutCirc(t) {
    if ((t /= 0.5) < 1) {
      return -0.5 * (Math.sqrt(1 - t * t) - 1);
    }
    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
  },
  easeInElastic: function easeInElastic(t) {
    var s = 1.70158;
    var p = 0;
    var a = 1;
    if (t === 0) {
      return 0;
    }
    if (t === 1) {
      return 1;
    }
    if (!p) {
      p = 0.3;
    }
    {
      s = p / (2 * Math.PI) * Math.asin(1 / a);
    }
    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
  },
  easeOutElastic: function easeOutElastic(t) {
    var s = 1.70158;
    var p = 0;
    var a = 1;
    if (t === 0) {
      return 0;
    }
    if (t === 1) {
      return 1;
    }
    if (!p) {
      p = 0.3;
    }
    {
      s = p / (2 * Math.PI) * Math.asin(1 / a);
    }
    return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
  },
  easeInOutElastic: function easeInOutElastic(t) {
    var s = 1.70158;
    var p = 0;
    var a = 1;
    if (t === 0) {
      return 0;
    }
    if ((t /= 0.5) === 2) {
      return 1;
    }
    if (!p) {
      p = 0.45;
    }
    {
      s = p / (2 * Math.PI) * Math.asin(1 / a);
    }
    if (t < 1) {
      return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    }
    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
  },
  easeInBack: function easeInBack(t) {
    var s = 1.70158;
    return t * t * ((s + 1) * t - s);
  },
  easeOutBack: function easeOutBack(t) {
    var s = 1.70158;
    return (t -= 1) * t * ((s + 1) * t + s) + 1;
  },
  easeInOutBack: function easeInOutBack(t) {
    var s = 1.70158;
    if ((t /= 0.5) < 1) {
      return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
    }
    return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
  },
  easeInBounce: function easeInBounce(t) {
    return 1 - effects.easeOutBounce(1 - t);
  },
  easeOutBounce: function easeOutBounce(t) {
    if (t < 1 / 2.75) {
      return 7.5625 * t * t;
    }
    if (t < 2 / 2.75) {
      return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
    }
    if (t < 2.5 / 2.75) {
      return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
    }
    return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
  },
  easeInOutBounce: function easeInOutBounce(t) {
    if (t < 0.5) {
      return effects.easeInBounce(t * 2) * 0.5;
    }
    return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
  }
};

var Defaults = function () {
  function Defaults() {
    _classCallCheck(this, Defaults);
    this.color = 'rgba(0,0,0,0.1)';
    this.elements = {};
    this.events = ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'];
    this.fontColor = '#666';
    this.fontFamily = "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif";
    this.fontSize = 12;
    this.fontStyle = 'normal';
    this.lineHeight = 1.2;
    this.hover = {
      onHover: null,
      mode: 'nearest',
      intersect: true
    };
    this.maintainAspectRatio = true;
    this.onClick = null;
    this.responsive = true;
    this.showLines = true;
    this.plugins = {};
    this.scale = undefined;
    this.legend = undefined;
    this.title = undefined;
    this.tooltips = undefined;
    this.doughnut = undefined;
    this.dataZoom = undefined;
    this.annotation = undefined;
    this.speedMode = undefined;
    this.xLabels = undefined;
    this.colorBar = undefined;
  }
  _createClass(Defaults, [{
    key: "set",
    value: function set(scope, values) {
      return merge(this[scope] || (this[scope] = {}), values);
    }
  }]);
  return Defaults;
}();
var defaults = new Defaults();

function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
}
function toLineHeight(value, size) {
  var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
  if (!matches || matches[1] === 'normal') {
    return size * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
    case 'px':
      return value;
    case '%':
      value /= 100;
      break;
  }
  return size * value;
}
function toPadding(value) {
  var t, r, b, l;
  if (isObject(value)) {
    t = +value.top || 0;
    r = +value.right || 0;
    b = +value.bottom || 0;
    l = +value.left || 0;
  } else {
    t = r = b = l = +value || 0;
  }
  return {
    top: t,
    right: r,
    bottom: b,
    left: l,
    height: t + b,
    width: l + r
  };
}
function _parseFont(options) {
  var size = valueOrDefault(options.fontSize, defaults.fontSize);
  if (typeof size === 'string') {
    size = parseInt(size, 10);
  }
  var font = {
    family: valueOrDefault(options.fontFamily, defaults.fontFamily),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, defaults.lineHeight), size),
    size: size,
    style: valueOrDefault(options.fontStyle, defaults.fontStyle),
    weight: null,
    string: ''
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context, index, info) {
  var cacheable = true;
  var i, ilen, value;
  for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    value = inputs[i];
    if (value === undefined) {
      continue;
    }
    if (context !== undefined && typeof value === 'function') {
      value = value(context);
      cacheable = false;
    }
    if (index !== undefined && isArray(value)) {
      value = value[index];
      cacheable = false;
    }
    if (value !== undefined) {
      if (info && !cacheable) {
        info.cacheable = false;
      }
      return value;
    }
  }
}

var options = /*#__PURE__*/Object.freeze({
__proto__: null,
toLineHeight: toLineHeight,
toPadding: toPadding,
_parseFont: _parseFont,
resolve: resolve
});

var getRightToLeftAdapter = function getRightToLeftAdapter(rectX, width) {
  return {
    x: function x(_x) {
      return rectX + rectX + width - _x;
    },
    setWidth: function setWidth(w) {
      width = w;
    },
    textAlign: function textAlign(align) {
      if (align === 'center') {
        return align;
      }
      return align === 'right' ? 'left' : 'right';
    },
    xPlus: function xPlus(x, value) {
      return x - value;
    },
    leftForLtr: function leftForLtr(x, itemWidth) {
      return x - itemWidth;
    }
  };
};
var getLeftToRightAdapter = function getLeftToRightAdapter() {
  return {
    x: function x(_x2) {
      return _x2;
    },
    setWidth: function setWidth(w) {
    },
    textAlign: function textAlign(align) {
      return align;
    },
    xPlus: function xPlus(x, value) {
      return x + value;
    },
    leftForLtr: function leftForLtr(x, _itemWidth) {
      return x;
    }
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  var style, original;
  if (direction === 'ltr' || direction === 'rtl') {
    style = ctx.canvas.style;
    original = [style.getPropertyValue('direction'), style.getPropertyPriority('direction')];
    style.setProperty('direction', direction, 'important');
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== undefined) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty('direction', original[0], original[1]);
  }
}

var rtl = /*#__PURE__*/Object.freeze({
__proto__: null,
getRtlAdapter: getRtlAdapter,
overrideTextDirection: overrideTextDirection,
restoreTextDirection: restoreTextDirection
});

function drawZoomArea(ctx, options) {
  var box = options.box,
      zoomdatas = options.zoomdatas,
      height = options.height,
      _options$inside = options.inside,
      inside = _options$inside === void 0 ? {} : _options$inside;
  var originX = box.left;
  var originY = box.top;
  var originEndX = box.right;
  var originEndY = height - 5;
  var arae = {
    left: originX - 5,
    right: originEndX + 5,
    top: originY,
    bottom: originEndY
  };
  clearArea(ctx, arae);
  ctx.save();
  clipArea(ctx, arae);
  ctx.strokeStyle = 'rgba(227, 227, 227, 0.5)';
  ctx.strokeRect(originX, originY, originEndX - originX, originEndY - originY);
  var maxValue = Math.max.apply(Math, _toConsumableArray(zoomdatas));
  var minValue = Math.min.apply(Math, _toConsumableArray(zoomdatas));
  var stepXLen = box.innerWidth / (zoomdatas.length || 1);
  var stepYLen = (originEndY - originY - 10) / (maxValue - minValue || 1);
  ctx.beginPath();
  ctx.strokeStyle = '#333';
  ctx.moveTo(originX, originY + 5);
  zoomdatas.forEach(function (d, index) {
    var _startX = Math.round((originX + stepXLen * (index + 1)) * 100) / 100;
    var _startY = Math.round((originY + (maxValue - d) * stepYLen + 5) * 100) / 100;
    ctx.lineTo(_startX, _startY);
  });
  ctx.stroke();
  ctx.save();
  if (!!inside) {
    var _inside = _resolveInsideAreaConfig(inside, arae);
    _drawInsideBorder(ctx, _inside);
    _drawInsideContent(ctx, _inside);
    _drawInsideBorder(ctx, _inside, 'right');
  }
  unclipArea(ctx);
}
function _resolveInsideAreaConfig(config, rectConfig) {
  return _extends({}, rectConfig, config);
}
function _drawInsideOptoinBox(ctx, inside) {
  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';
  var borderWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
  var boxHight = 14;
  var boxWidth = 8;
  var boxTop = inside.top + (inside.bottom - inside.top - boxHight) / 2;
  var boxLeft = inside[mode] - (boxWidth - borderWidth) / 2;
  ctx.fillRect(boxLeft, boxTop, boxWidth, boxHight);
  var fillWidth = boxWidth - 4;
  var fillHeigh = 2;
  var offset = (boxHight - fillHeigh * 2 - 2) / 2;
  _drawEmptyFillTop(ctx, {
    boxWidth: boxWidth,
    boxHight: boxHight,
    boxLeft: boxLeft,
    boxTop: boxTop
  }, {
    fillWidth: fillWidth,
    fillHeigh: fillHeigh,
    offset: offset
  });
  _drawEmptyFillBottom(ctx, {
    boxWidth: boxWidth,
    boxHight: boxHight,
    boxLeft: boxLeft,
    boxTop: boxTop
  }, {
    fillWidth: fillWidth,
    fillHeigh: fillHeigh,
    offset: offset
  });
}
function _drawEmptyFillTop(ctx, box, fill) {
  var boxLeft = box.boxLeft,
      boxTop = box.boxTop;
  var fillWidth = fill.fillWidth,
      fillHeigh = fill.fillHeigh,
      offset = fill.offset;
  var fillTop = {
    left: boxLeft + 2,
    top: boxTop + offset,
    height: fillHeigh,
    width: fillWidth
  };
  _drawEmptyFill(ctx, fillTop);
}
function _drawEmptyFillBottom(ctx, box, fill) {
  var boxHight = box.boxHight,
      boxLeft = box.boxLeft,
      boxTop = box.boxTop;
  var fillWidth = fill.fillWidth,
      fillHeigh = fill.fillHeigh,
      offset = fill.offset;
  var fillBottom = {
    left: boxLeft + 2,
    top: boxTop + boxHight - offset - fillHeigh,
    height: fillHeigh,
    width: fillWidth
  };
  _drawEmptyFill(ctx, fillBottom);
}
function _drawEmptyFill(ctx, fillConfig) {
  ctx.beginPath();
  ctx.fillStyle = '#fff';
  ctx.fillRect(fillConfig.left, fillConfig.top, fillConfig.width, fillConfig.height);
}
function _drawInsideBorder(ctx, inside) {
  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';
  var borderWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
  ctx.beginPath();
  ctx.fillStyle = 'rgb(186, 198, 214)';
  ctx.fillRect(inside[mode], inside.top, 2, inside.bottom - inside.top);
  _drawInsideOptoinBox(ctx, inside, mode, borderWidth);
}
function _drawInsideContent(ctx, inside) {
  var borderWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
  ctx.beginPath();
  ctx.fillStyle = 'rgba(213, 219, 228, 0.5)';
  ctx.fillRect(inside.left + borderWidth, inside.top, inside.right - inside.left - borderWidth, inside.bottom - inside.top);
}
function updateLayouts(options) {
  var dataZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  if (options.layout) {
    dataZoom.forEach(function (zoom) {
      if (zoom.isHorizontal()) {
        var bottom = options.layout.padding.bottom;
        if (bottom < zoom.height) {
          options.layout.padding.bottom = zoom.height + 10;
        }
      } else {
        var right = options.layout.padding.right;
        if (right < zoom.width) {
          options.layout.padding.right = zoom.width + 10;
        }
      }
    });
  }
}
function updateZoom(options) {
  var dataZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  if (options.layout) {
    dataZoom.forEach(function (zoom) {
      zoom.initLocalConfig();
      zoom.mergeOptions();
    });
  }
}
function updateEvents(options) {
  var evts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  evts.forEach(function (evt) {
    if (!options.events.some(function (event) {
      return String.prototype.toLocaleLowerCase.call(event) === String.prototype.toLocaleLowerCase.call(evt);
    })) {
      options.events.push(evt);
    }
  });
}
function mergerConfig(key, target, source) {
  if (helpers.isArray(source[key])) {
    if (!target[key]) {
      target[key] = [];
    }
    for (var i = 0; i < source[key].length; i++) {
      if (target[key][i]) {
        helpers.mergeIf(target[key][i], source[key][i]);
      } else {
        target[key].push(helpers.clone(source[key][i]));
      }
    }
  } else {
    helpers.mergeIf(target[key], source[key]);
  }
}

var dataZoom = /*#__PURE__*/Object.freeze({
__proto__: null,
drawZoomArea: drawZoomArea,
updateLayouts: updateLayouts,
updateZoom: updateZoom,
updateEvents: updateEvents,
mergerConfig: mergerConfig
});

function setContainerStyle(chart, style) {
  var container = chart.container;
  if (container) {
    var originStyle = container.getAttribute('style') || '';
    var originStyles = convertStringStyleToObject(originStyle);
    var appendStyle = convertStringStyleToObject(style);
    container.setAttribute('style', convertStyleToString(mergeStyle(originStyles, appendStyle)));
  }
}
function convertStringStyleToObject(style) {
  if (typeof style === 'string') {
    var originStyles = style.split(';');
    return originStyles.reduce(function (pre, current) {
      var keyValues = current.split(':');
      return _extends(pre, _defineProperty({}, keyValues[0], keyValues[1]));
    }, {});
  } else {
    return style;
  }
}
function mergeStyle(source, target) {
  return _extends({}, source, target);
}
function convertStyleToString(styleObject) {
  return Object.keys(styleObject).reduce(function (pre, current) {
    current && pre.push("".concat(current, ":").concat(styleObject[current]));
    return pre;
  }, []).join(';');
}

var style = /*#__PURE__*/Object.freeze({
__proto__: null,
setContainerStyle: setContainerStyle
});

const map = {
  0: 0,
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  A: 10,
  B: 11,
  C: 12,
  D: 13,
  E: 14,
  F: 15,
  a: 10,
  b: 11,
  c: 12,
  d: 13,
  e: 14,
  f: 15
};
const hex = '0123456789ABCDEF';
const h1 = b => hex[b & 0xF];
const h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
const eq = b => (b & 0xF0) >> 4 === (b & 0xF);
function isShort(v) {
  return eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
}
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === '#') {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map[str[1]] * 17,
        g: 255 & map[str[2]] * 17,
        b: 255 & map[str[3]] * 17,
        a: len === 5 ? map[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map[str[1]] << 4 | map[str[2]],
        g: map[str[3]] << 4 | map[str[4]],
        b: map[str[5]] << 4 | map[str[6]],
        a: len === 9 ? map[str[7]] << 4 | map[str[8]] : 255
      };
    }
  }
  return ret;
}
function hexString(v) {
  var f = isShort(v) ? h1 : h2;
  return v ? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '') : v;
}
function round(v) {
  return v + 0.5 | 0;
}
const lim = (v, l, h) => Math.max(Math.min(v, h), l);
function p2b(v) {
  return lim(round(v * 2.55), 0, 255);
}
function n2b(v) {
  return lim(round(v * 255), 0, 255);
}
function b2n(v) {
  return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
  return lim(round(v * 100), 0, 100);
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m = RGB_RE.exec(str);
  let a = 255;
  let r, g, b;
  if (!m) {
    return;
  }
  if (m[7] !== r) {
    const v = +m[7];
    a = 255 & (m[8] ? p2b(v) : v * 255);
  }
  r = +m[1];
  g = +m[3];
  b = +m[5];
  r = 255 & (m[2] ? p2b(r) : r);
  g = 255 & (m[4] ? p2b(g) : g);
  b = 255 & (m[6] ? p2b(b) : b);
  return {
    r: r,
    g: g,
    b: b,
    a: a
  };
}
function rgbString(v) {
  return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h, s, l) {
  const a = s * Math.min(l, 1 - l);
  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  return [f(0), f(8), f(4)];
}
function hsv2rgbn(h, s, v) {
  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
  return [f(5), f(3), f(1)];
}
function hwb2rgbn(h, w, b) {
  const rgb = hsl2rgbn(h, 1, 0.5);
  let i;
  if (w + b > 1) {
    i = 1 / (w + b);
    w *= i;
    b *= i;
  }
  for (i = 0; i < 3; i++) {
    rgb[i] *= 1 - w - b;
    rgb[i] += w;
  }
  return rgb;
}
function rgb2hsl(v) {
  const range = 255;
  const r = v.r / range;
  const g = v.g / range;
  const b = v.b / range;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  const l = (max + min) / 2;
  let h, s, d;
  if (max !== min) {
    d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
    h = h * 60 + 0.5;
  }
  return [h | 0, s || 0, l];
}
function calln(f, a, b, c) {
  return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);
}
function hsl2rgb(h, s, l) {
  return calln(hsl2rgbn, h, s, l);
}
function hwb2rgb(h, w, b) {
  return calln(hwb2rgbn, h, w, b);
}
function hsv2rgb(h, s, v) {
  return calln(hsv2rgbn, h, s, v);
}
function hue(h) {
  return (h % 360 + 360) % 360;
}
function hueParse(str) {
  const m = HUE_RE.exec(str);
  let a = 255;
  let v;
  if (!m) {
    return;
  }
  if (m[5] !== v) {
    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
  }
  const h = hue(+m[2]);
  const p1 = +m[3] / 100;
  const p2 = +m[4] / 100;
  if (m[1] === 'hwb') {
    v = hwb2rgb(h, p1, p2);
  } else if (m[1] === 'hsv') {
    v = hsv2rgb(h, p1, p2);
  } else {
    v = hsl2rgb(h, p1, p2);
  }
  return {
    r: v[0],
    g: v[1],
    b: v[2],
    a: a
  };
}
function rotate(v, deg) {
  var h = rgb2hsl(v);
  h[0] = hue(h[0] + deg);
  h = hsl2rgb(h);
  v.r = h[0];
  v.g = h[1];
  v.b = h[2];
}
function hslString(v) {
  if (!v) {
    return;
  }
  const a = rgb2hsl(v);
  const h = a[0];
  const s = n2p(a[1]);
  const l = n2p(a[2]);
  return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;
}
const map$1 = {
  x: 'dark',
  Z: 'light',
  Y: 're',
  X: 'blu',
  W: 'gr',
  V: 'medium',
  U: 'slate',
  A: 'ee',
  T: 'ol',
  S: 'or',
  B: 'ra',
  C: 'lateg',
  D: 'ights',
  R: 'in',
  Q: 'turquois',
  E: 'hi',
  P: 'ro',
  O: 'al',
  N: 'le',
  M: 'de',
  L: 'yello',
  F: 'en',
  K: 'ch',
  G: 'arks',
  H: 'ea',
  I: 'ightg',
  J: 'wh'
};
const names = {
  OiceXe: 'f0f8ff',
  antiquewEte: 'faebd7',
  aqua: 'ffff',
  aquamarRe: '7fffd4',
  azuY: 'f0ffff',
  beige: 'f5f5dc',
  bisque: 'ffe4c4',
  black: '0',
  blanKedOmond: 'ffebcd',
  Xe: 'ff',
  XeviTet: '8a2be2',
  bPwn: 'a52a2a',
  burlywood: 'deb887',
  caMtXe: '5f9ea0',
  KartYuse: '7fff00',
  KocTate: 'd2691e',
  cSO: 'ff7f50',
  cSnflowerXe: '6495ed',
  cSnsilk: 'fff8dc',
  crimson: 'dc143c',
  cyan: 'ffff',
  xXe: '8b',
  xcyan: '8b8b',
  xgTMnPd: 'b8860b',
  xWay: 'a9a9a9',
  xgYF: '6400',
  xgYy: 'a9a9a9',
  xkhaki: 'bdb76b',
  xmagFta: '8b008b',
  xTivegYF: '556b2f',
  xSange: 'ff8c00',
  xScEd: '9932cc',
  xYd: '8b0000',
  xsOmon: 'e9967a',
  xsHgYF: '8fbc8f',
  xUXe: '483d8b',
  xUWay: '2f4f4f',
  xUgYy: '2f4f4f',
  xQe: 'ced1',
  xviTet: '9400d3',
  dAppRk: 'ff1493',
  dApskyXe: 'bfff',
  dimWay: '696969',
  dimgYy: '696969',
  dodgerXe: '1e90ff',
  fiYbrick: 'b22222',
  flSOwEte: 'fffaf0',
  foYstWAn: '228b22',
  fuKsia: 'ff00ff',
  gaRsbSo: 'dcdcdc',
  ghostwEte: 'f8f8ff',
  gTd: 'ffd700',
  gTMnPd: 'daa520',
  Way: '808080',
  gYF: '8000',
  gYFLw: 'adff2f',
  gYy: '808080',
  honeyMw: 'f0fff0',
  hotpRk: 'ff69b4',
  RdianYd: 'cd5c5c',
  Rdigo: '4b0082',
  ivSy: 'fffff0',
  khaki: 'f0e68c',
  lavFMr: 'e6e6fa',
  lavFMrXsh: 'fff0f5',
  lawngYF: '7cfc00',
  NmoncEffon: 'fffacd',
  ZXe: 'add8e6',
  ZcSO: 'f08080',
  Zcyan: 'e0ffff',
  ZgTMnPdLw: 'fafad2',
  ZWay: 'd3d3d3',
  ZgYF: '90ee90',
  ZgYy: 'd3d3d3',
  ZpRk: 'ffb6c1',
  ZsOmon: 'ffa07a',
  ZsHgYF: '20b2aa',
  ZskyXe: '87cefa',
  ZUWay: '778899',
  ZUgYy: '778899',
  ZstAlXe: 'b0c4de',
  ZLw: 'ffffe0',
  lime: 'ff00',
  limegYF: '32cd32',
  lRF: 'faf0e6',
  magFta: 'ff00ff',
  maPon: '800000',
  VaquamarRe: '66cdaa',
  VXe: 'cd',
  VScEd: 'ba55d3',
  VpurpN: '9370db',
  VsHgYF: '3cb371',
  VUXe: '7b68ee',
  VsprRggYF: 'fa9a',
  VQe: '48d1cc',
  VviTetYd: 'c71585',
  midnightXe: '191970',
  mRtcYam: 'f5fffa',
  mistyPse: 'ffe4e1',
  moccasR: 'ffe4b5',
  navajowEte: 'ffdead',
  navy: '80',
  Tdlace: 'fdf5e6',
  Tive: '808000',
  TivedBb: '6b8e23',
  Sange: 'ffa500',
  SangeYd: 'ff4500',
  ScEd: 'da70d6',
  pOegTMnPd: 'eee8aa',
  pOegYF: '98fb98',
  pOeQe: 'afeeee',
  pOeviTetYd: 'db7093',
  papayawEp: 'ffefd5',
  pHKpuff: 'ffdab9',
  peru: 'cd853f',
  pRk: 'ffc0cb',
  plum: 'dda0dd',
  powMrXe: 'b0e0e6',
  purpN: '800080',
  YbeccapurpN: '663399',
  Yd: 'ff0000',
  Psybrown: 'bc8f8f',
  PyOXe: '4169e1',
  saddNbPwn: '8b4513',
  sOmon: 'fa8072',
  sandybPwn: 'f4a460',
  sHgYF: '2e8b57',
  sHshell: 'fff5ee',
  siFna: 'a0522d',
  silver: 'c0c0c0',
  skyXe: '87ceeb',
  UXe: '6a5acd',
  UWay: '708090',
  UgYy: '708090',
  snow: 'fffafa',
  sprRggYF: 'ff7f',
  stAlXe: '4682b4',
  tan: 'd2b48c',
  teO: '8080',
  tEstN: 'd8bfd8',
  tomato: 'ff6347',
  Qe: '40e0d0',
  viTet: 'ee82ee',
  JHt: 'f5deb3',
  wEte: 'ffffff',
  wEtesmoke: 'f5f5f5',
  Lw: 'ffff00',
  LwgYF: '9acd32'
};
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names);
  const tkeys = Object.keys(map$1);
  let i, j, k, ok, nk;
  for (i = 0; i < keys.length; i++) {
    ok = nk = keys[i];
    for (j = 0; j < tkeys.length; j++) {
      k = tkeys[j];
      nk = nk.replace(k, map$1[k]);
    }
    k = parseInt(names[ok], 16);
    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
  }
  return unpacked;
}
let names$1;
function nameParse(str) {
  if (!names$1) {
    names$1 = unpack();
    names$1.transparent = [0, 0, 0, 0];
  }
  const a = names$1[str.toLowerCase()];
  return a && {
    r: a[0],
    g: a[1],
    b: a[2],
    a: a.length === 4 ? a[3] : 255
  };
}
function modHSL(v, i, ratio) {
  if (v) {
    let tmp = rgb2hsl(v);
    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v.r = tmp[0];
    v.g = tmp[1];
    v.b = tmp[2];
  }
}
function clone$1(v, proto) {
  return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
  var v = {
    r: 0,
    g: 0,
    b: 0,
    a: 255
  };
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v = {
        r: input[0],
        g: input[1],
        b: input[2],
        a: 255
      };
      if (input.length > 3) {
        v.a = n2b(input[3]);
      }
    }
  } else {
    v = clone$1(input, {
      r: 0,
      g: 0,
      b: 0,
      a: 1
    });
    v.a = n2b(v.a);
  }
  return v;
}
function functionParse(str) {
  if (str.charAt(0) === 'r') {
    return rgbParse(str);
  }
  return hueParse(str);
}
class Color {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }
    const type = typeof input;
    let v;
    if (type === 'object') {
      v = fromObject(input);
    } else if (type === 'string') {
      v = hexParse(input) || nameParse(input) || functionParse(input);
    }
    this._rgb = v;
    this._valid = !!v;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v = clone$1(this._rgb);
    if (v) {
      v.a = b2n(v.a);
    }
    return v;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : this._rgb;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : this._rgb;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : this._rgb;
  }
  mix(color, weight) {
    const me = this;
    if (color) {
      const c1 = me.rgb;
      const c2 = color.rgb;
      let w2;
      const p = weight === w2 ? 0.5 : weight;
      const w = 2 * p - 1;
      const a = c1.a - c2.a;
      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
      w2 = 1 - w1;
      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p * c1.a + (1 - p) * c2.a;
      me.rgb = c1;
    }
    return me;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a) {
    this._rgb.a = n2b(a);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v = this._rgb;
    v.r = 255 - v.r;
    v.g = 255 - v.g;
    v.b = 255 - v.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
}
function index_esm(input) {
  return new Color(input);
}

var isPatternOrGradient = function isPatternOrGradient(value) {
  return value instanceof CanvasGradient || value instanceof CanvasPattern;
};
function color(value) {
  return isPatternOrGradient(value) ? value : index_esm(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : index_esm(value).saturate(0.5).darken(0.1).hexString();
}

var helpers = _objectSpread2(_objectSpread2({}, coreHelpers), {}, {
  canvas: canvas,
  curve: curve,
  dom: dom,
  easing: {
    effects: effects
  },
  options: options,
  math: math,
  rtl: rtl,
  dataZoom: dataZoom,
  style: style,
  requestAnimFrame: function () {
    if (typeof window === 'undefined') {
      return function (callback) {
        callback();
      };
    }
    return window.requestAnimationFrame;
  }(),
  fontString: function fontString(pixelSize, fontStyle, fontFamily) {
    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
  },
  color: color,
  getHoverColor: getHoverColor
});

function drawFPS(chart, count, date, lastDate) {
  var fps = 1000 / (date - lastDate) | 0;
  var ctx = chart.ctx;
  ctx.save();
  ctx.clearRect(0, 0, 50, 24);
  ctx.fillStyle = 'black';
  ctx.textAlign = 'right';
  if (count) {
    ctx.fillText(count, 50, 8);
    ctx.fillText(fps + ' fps', 50, 18);
  }
  ctx.restore();
}
var Animator = function () {
  function Animator() {
    _classCallCheck(this, Animator);
    this._request = null;
    this._charts = new Map();
    this._running = false;
    this._lastDate = undefined;
  }
  _createClass(Animator, [{
    key: "_notify",
    value: function _notify(chart, anims, date, type) {
      var callbacks = anims.listeners[type] || [];
      var numSteps = anims.duration;
      callbacks.forEach(function (fn) {
        return fn({
          chart: chart,
          numSteps: numSteps,
          currentStep: date - anims.start
        });
      });
    }
  }, {
    key: "_refresh",
    value: function _refresh() {
      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var me = this;
      if (me._request) {
        return;
      }
      me._running = true;
      me._request = helpers.requestAnimFrame.call(window, function () {
        me._update(update);
        me._request = null;
        if (me._running) {
          me._refresh(update);
        }
      });
    }
  }, {
    key: "_update",
    value: function _update() {
      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var me = this;
      var date = Date.now();
      var remaining = 0;
      me._charts.forEach(function (anims, chart) {
        if (!anims.running || !anims.items.length) {
          return;
        }
        var items = anims.items;
        var i = items.length - 1;
        var draw = false;
        var item;
        for (; i >= 0; --i) {
          item = items[i];
          if (item._active) {
            item.tick(date);
            draw = true;
          } else {
            items[i] = items[items.length - 1];
            items.pop();
          }
        }
        if (update && draw) {
          chart.draw();
        }
        if (chart.options.animation.debug) {
          drawFPS(chart, items.length, date, me._lastDate);
        }
        me._notify(chart, anims, date, 'progress');
        if (!items.length) {
          anims.running = false;
          me._notify(chart, anims, date, 'complete');
        }
        remaining += items.length;
      });
      me._lastDate = date;
      if (remaining === 0) {
        me._running = false;
      }
    }
  }, {
    key: "_getAnims",
    value: function _getAnims(chart) {
      var charts = this._charts;
      var anims = charts.get(chart);
      if (!anims) {
        anims = {
          running: false,
          items: [],
          listeners: {
            complete: [],
            progress: []
          }
        };
        charts.set(chart, anims);
      }
      return anims;
    }
  }, {
    key: "listen",
    value: function listen(chart, event, cb) {
      this._getAnims(chart).listeners[event].push(cb);
    }
  }, {
    key: "add",
    value: function add(chart, items) {
      var _this$_getAnims$items;
      if (!items || !items.length) {
        return;
      }
      (_this$_getAnims$items = this._getAnims(chart).items).push.apply(_this$_getAnims$items, _toConsumableArray(items));
    }
  }, {
    key: "has",
    value: function has(chart) {
      return this._getAnims(chart).items.length > 0;
    }
  }, {
    key: "start",
    value: function start(chart) {
      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var anims = this._charts.get(chart);
      if (!anims) {
        return;
      }
      anims.running = true;
      anims.start = Date.now();
      anims.duration = anims.items.reduce(function (acc, cur) {
        return Math.max(acc, cur._duration);
      }, 0);
      this._refresh(update);
    }
  }, {
    key: "running",
    value: function running(chart) {
      if (!this._running) {
        return false;
      }
      var anims = this._charts.get(chart);
      if (!anims || !anims.running || !anims.items.length) {
        return false;
      }
      return true;
    }
  }, {
    key: "stop",
    value: function stop(chart) {
      var anims = this._charts.get(chart);
      if (!anims || !anims.items.length) {
        return;
      }
      var items = anims.items;
      var i = items.length - 1;
      for (; i >= 0; --i) {
        items[i].cancel();
      }
      anims.items = [];
      this._notify(chart, anims, Date.now(), 'complete');
    }
  }, {
    key: "remove",
    value: function remove(chart) {
      return this._charts.delete(chart);
    }
  }]);
  return Animator;
}();
var Animator$1 = new Animator();

var transparent = 'transparent';
var interpolators = {
  boolean: function boolean(from, to, factor) {
    return factor > 0.5 ? to : from;
  },
  color: function color(from, to, factor) {
    var c0 = helpers.color(from || transparent);
    var c1 = c0.valid && helpers.color(to || transparent);
    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
  },
  number: function number(from, to, factor) {
    return from + (to - from) * factor;
  }
};
var Animation = function () {
  function Animation(cfg, target, prop, to) {
    _classCallCheck(this, Animation);
    var currentValue = target[prop];
    to = resolve([cfg.to, to, currentValue, cfg.from]);
    var from = resolve([cfg.from, currentValue, to]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || _typeof(from)];
    this._easing = effects[cfg.easing || 'linear'];
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from;
    this._to = to;
  }
  _createClass(Animation, [{
    key: "active",
    value: function active() {
      return this._active;
    }
  }, {
    key: "update",
    value: function update(cfg, to, date) {
      var me = this;
      if (me._active) {
        var currentValue = me._target[me._prop];
        var elapsed = date - me._start;
        var remain = me._duration - elapsed;
        me._start = date;
        me._duration = Math.floor(Math.max(remain, cfg.duration));
        me._to = resolve([cfg.to, to, currentValue, cfg.from]);
        me._from = resolve([cfg.from, currentValue, to]);
      }
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var me = this;
      if (me._active) {
        me.tick(Date.now());
        me._active = false;
      }
    }
  }, {
    key: "tick",
    value: function tick(date) {
      var me = this;
      var elapsed = date - me._start;
      var duration = me._duration;
      var prop = me._prop;
      var from = me._from;
      var loop = me._loop;
      var to = me._to;
      var factor;
      me._active = from !== to && (loop || elapsed < duration);
      if (!me._active) {
        me._target[prop] = to;
        return;
      }
      if (elapsed < 0) {
        me._target[prop] = from;
        return;
      }
      factor = elapsed / duration % 2;
      factor = loop && factor > 1 ? 2 - factor : factor;
      factor = me._easing(Math.min(1, Math.max(0, factor)));
      me._target[prop] = me._fn(from, to, factor);
    }
  }]);
  return Animation;
}();

var numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];
var colors = ['borderColor', 'backgroundColor'];
defaults.set('animation', {
  duration: 1000,
  easing: 'easeOutQuart',
  onProgress: noop,
  onComplete: noop,
  colors: {
    type: 'color',
    properties: colors
  },
  numbers: {
    type: 'number',
    properties: numbers
  },
  active: {
    duration: 400
  },
  resize: {
    duration: 0
  },
  show: {
    colors: {
      type: 'color',
      properties: colors,
      from: 'transparent'
    },
    visible: {
      type: 'boolean',
      duration: 0
    }
  },
  hide: {
    colors: {
      type: 'color',
      properties: colors,
      to: 'transparent'
    },
    visible: {
      type: 'boolean',
      easing: 'easeInExpo'
    }
  }
});
function copyOptions(target, values) {
  var oldOpts = target.options;
  var newOpts = values.options;
  if (!oldOpts || !newOpts || newOpts.$shared) {
    return;
  }
  if (oldOpts.$shared) {
    target.options = _extends({}, oldOpts, newOpts, {
      $shared: false
    });
  } else {
    _extends(oldOpts, newOpts);
  }
  delete values.options;
}
function extensibleConfig(animations) {
  var result = {};
  Object.keys(animations).forEach(function (key) {
    var value = animations[key];
    if (!isObject(value)) {
      result[key] = value;
    }
  });
  return result;
}
var Animations = function () {
  function Animations(chart, animations) {
    _classCallCheck(this, Animations);
    this._chart = chart;
    this._properties = new Map();
    this.configure(animations);
  }
  _createClass(Animations, [{
    key: "configure",
    value: function configure(animations) {
      if (!isObject(animations)) {
        return;
      }
      var animatedProps = this._properties;
      var animDefaults = extensibleConfig(animations);
      Object.keys(animations).forEach(function (key) {
        var cfg = animations[key];
        if (!isObject(cfg)) {
          return;
        }
        (cfg.properties || [key]).forEach(function (prop) {
          if (!animatedProps.has(prop)) {
            animatedProps.set(prop, _extends({}, animDefaults, cfg));
          } else if (prop === key) {
            animatedProps.set(prop, _extends({}, animatedProps.get(prop), cfg));
          }
        });
      });
    }
  }, {
    key: "_animateOptions",
    value: function _animateOptions(target, values) {
      var newOptions = values.options;
      var animations = [];
      if (!newOptions) {
        return animations;
      }
      var options = target.options;
      if (options) {
        if (options.$shared) {
          target.options = options = _extends({}, options, {
            $shared: false,
            $animations: {}
          });
        }
        animations = this._createAnimations(options, newOptions);
      } else {
        target.options = newOptions;
      }
      return animations;
    }
  }, {
    key: "_createAnimations",
    value: function _createAnimations(target, values) {
      var animatedProps = this._properties;
      var animations = [];
      var running = target.$animations || (target.$animations = {});
      var props = Object.keys(values);
      var date = Date.now();
      var i;
      for (i = props.length - 1; i >= 0; --i) {
        var prop = props[i];
        if (prop.charAt(0) === '$') {
          continue;
        }
        if (prop === 'options') {
          animations.push.apply(animations, _toConsumableArray(this._animateOptions(target, values)));
          continue;
        }
        var value = values[prop];
        var animation = running[prop];
        var cfg = animatedProps.get(prop);
        if (animation) {
          if (cfg && animation.active()) {
            animation.update(cfg, value, date);
            continue;
          } else {
            animation.cancel();
          }
        }
        if (!cfg || !cfg.duration) {
          target[prop] = value;
          continue;
        }
        running[prop] = animation = new Animation(cfg, target, prop, value);
        animations.push(animation);
      }
      return animations;
    }
  }, {
    key: "update",
    value: function update(target, values) {
      if (this._properties.size === 0) {
        copyOptions(target, values);
        _extends(target, values);
        return;
      }
      var animations = this._createAnimations(target, values);
      if (animations.length) {
        Animator$1.add(this._chart, animations);
        return true;
      }
    }
  }]);
  return Animations;
}();

var resolve$1 = helpers.options.resolve;
var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, '_chartjs', {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [listener]
    }
  });
  arrayEvents.forEach(function (key) {
    var method = '_onData' + key.charAt(0).toUpperCase() + key.slice(1);
    var base = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value: function value() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var res = base.apply(this, args);
        array._chartjs.listeners.forEach(function (object) {
          if (typeof object[method] === 'function') {
            object[method].apply(object, args);
          }
        });
        return res;
      }
    });
  });
}
function scaleClip(scale, allowedOverflow) {
  var opts = scale && scale.options || {};
  var reverse = opts.reverse;
  var min = opts.min === undefined ? allowedOverflow : 0;
  var max = opts.max === undefined ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  var x = scaleClip(xScale, allowedOverflow);
  var y = scaleClip(yScale, allowedOverflow);
  return {
    top: y.end,
    right: x.end,
    bottom: y.start,
    left: x.start
  };
}
function toClip(value) {
  var t, r, b, l;
  if (helpers.isObject(value)) {
    t = value.top;
    r = value.right;
    b = value.bottom;
    l = value.left;
  } else {
    t = r = b = l = value;
  }
  return {
    top: t,
    right: r,
    bottom: b,
    left: l
  };
}
function unlistenArrayEvents(array, listener) {
  var stub = array._chartjs;
  if (!stub) {
    return;
  }
  var listeners = stub.listeners;
  var index = listeners.indexOf(listener);
  if (index !== -1) {
    listeners.splice(index, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach(function (key) {
    delete array[key];
  });
  delete array._chartjs;
}
function getSortedDatasetIndices(chart, filterVisible) {
  var keys = [];
  var metasets = chart._getSortedDatasetMetas(filterVisible);
  var i, ilen;
  for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    keys.push(metasets[i].index);
  }
  return keys;
}
function _applyStack(stack, value, dsIndex, allOther) {
  var keys = stack.keys;
  var i, ilen, datasetIndex, otherValue;
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    datasetIndex = +keys[i];
    if (datasetIndex === dsIndex) {
      if (allOther) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if (!isNaN(otherValue) && (value === 0 || helpers.math.sign(value) === helpers.math.sign(otherValue))) {
      value += otherValue;
    }
  }
  return value;
}
function convertObjectDataToArray(data) {
  var keys = Object.keys(data);
  var adata = new Array(keys.length);
  var i, ilen, key;
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    key = keys[i];
    adata[i] = {
      x: key,
      y: data[key]
    };
  }
  return adata;
}
function isStacked(scale, meta) {
  var stacked = scale && scale.options.stacked;
  return stacked || stacked === undefined && meta.stack !== undefined;
}
function getStackKey(indexScale, valueScale, meta) {
  return indexScale.id + '.' + valueScale.id + '.' + meta.stack + '.' + meta.type;
}
function getUserBounds(scale) {
  var _scale$getUserBounds = scale.getUserBounds(),
      min = _scale$getUserBounds.min,
      max = _scale$getUserBounds.max,
      minDefined = _scale$getUserBounds.minDefined,
      maxDefined = _scale$getUserBounds.maxDefined;
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  var subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function updateStacks(controller, parsed) {
  var chart = controller.chart,
      meta = controller._cachedMeta;
  var stacks = chart._stacks || (chart._stacks = {});
  var iScale = meta.iScale,
      vScale = meta.vScale,
      datasetIndex = meta.index;
  var iAxis = iScale.axis;
  var vAxis = vScale.axis;
  var key = getStackKey(iScale, vScale, meta);
  var ilen = parsed.length;
  var stack;
  for (var i = 0; i < ilen; ++i) {
    var item = parsed[i];
    var index = item[iAxis],
        value = item[vAxis];
    var itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
    stack[datasetIndex] = value;
  }
}
function getFirstScaleId(chart, axis) {
  var scales = chart.scales;
  return Object.keys(scales).filter(function (key) {
    return scales[key].axis === axis;
  }).shift();
}
var DatasetController = function () {
  function DatasetController(chart, datasetIndex) {
    _classCallCheck(this, DatasetController);
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedAnimations = {};
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this._config = undefined;
    this._parsing = false;
    this._data = undefined;
    this._dataCopy = undefined;
    this._objectData = undefined;
    this._labels = undefined;
    this._scaleStacked = {};
    this.initialize();
  }
  _createClass(DatasetController, [{
    key: "initialize",
    value: function initialize() {
      var me = this;
      var meta = me._cachedMeta;
      me.configure();
      me.linkScales();
      meta._stacked = isStacked(meta.vScale, meta);
      me.addElements();
    }
  }, {
    key: "updateIndex",
    value: function updateIndex(datasetIndex) {
      this.index = datasetIndex;
    }
  }, {
    key: "linkScales",
    value: function linkScales() {
      var me = this;
      var chart = me.chart;
      var meta = me._cachedMeta;
      var dataset = me.getDataset();
      var xid = meta.xAxisID = dataset.xAxisID || getFirstScaleId(chart, 'x');
      var yid = meta.yAxisID = dataset.yAxisID || getFirstScaleId(chart, 'y');
      var rid = meta.rAxisID = dataset.rAxisID || getFirstScaleId(chart, 'r');
      meta.xScale = me.getScaleForId(xid);
      meta.yScale = me.getScaleForId(yid);
      meta.rScale = me.getScaleForId(rid);
      meta.iScale = me._getIndexScale();
      meta.vScale = me._getValueScale();
    }
  }, {
    key: "getDataset",
    value: function getDataset() {
      return this.chart.data.datasets[this.index];
    }
  }, {
    key: "getMeta",
    value: function getMeta() {
      return this.chart.getDatasetMeta(this.index);
    }
  }, {
    key: "getScaleForId",
    value: function getScaleForId(scaleID) {
      return this.chart.scales[scaleID];
    }
  }, {
    key: "getValueScaleId",
    value: function getValueScaleId() {
      return this._cachedMeta.yAxisID;
    }
  }, {
    key: "getIndexScaleId",
    value: function getIndexScaleId() {
      return this._cachedMeta.xAxisID;
    }
  }, {
    key: "_getValueScale",
    value: function _getValueScale() {
      return this.getScaleForId(this.getValueScaleId());
    }
  }, {
    key: "_getIndexScale",
    value: function _getIndexScale() {
      return this.getScaleForId(this.getIndexScaleId());
    }
  }, {
    key: "_getOtherScale",
    value: function _getOtherScale(scale) {
      var meta = this._cachedMeta;
      return scale === meta.iScale ? meta.vScale : meta.iScale;
    }
  }, {
    key: "reset",
    value: function reset() {
      this._update('reset');
    }
  }, {
    key: "_destroy",
    value: function _destroy() {
      if (this._data) {
        unlistenArrayEvents(this._data, this);
      }
    }
  }, {
    key: "_dataCheck",
    value: function _dataCheck() {
      var me = this;
      var dataset = me.getDataset();
      var data = dataset.data || (dataset.data = []);
      if (helpers.isObject(data)) {
        if (me._objectData === data) {
          return false;
        }
        me._data = convertObjectDataToArray(data);
        me._objectData = data;
      } else {
        if (me._data === data && helpers.arrayEquals(data, me._dataCopy)) {
          return false;
        }
        if (me._data) {
          unlistenArrayEvents(me._data, me);
        }
        me._dataCopy = data.slice(0);
        if (data && Object.isExtensible(data)) {
          listenArrayEvents(data, me);
        }
        me._data = data;
      }
      return true;
    }
  }, {
    key: "_labelCheck",
    value: function _labelCheck() {
      var me = this;
      var iScale = me._cachedMeta.iScale;
      var labels = iScale ? iScale.getLabels() : me.chart.data.labels;
      if (me._labels === labels) {
        return false;
      }
      me._labels = labels;
      return true;
    }
  }, {
    key: "addElements",
    value: function addElements() {
      var me = this;
      var meta = me._cachedMeta;
      me._dataCheck();
      var data = me._data;
      var metaData = meta.data = new Array(data.length);
      for (var i = 0, ilen = data.length; i < ilen; ++i) {
        metaData[i] = new me.dataElementType();
      }
      if (me.datasetElementType) {
        meta.dataset = new me.datasetElementType();
      }
    }
  }, {
    key: "buildOrUpdateElements",
    value: function buildOrUpdateElements() {
      var me = this;
      var dataChanged = me._dataCheck();
      var labelsChanged = me._labelCheck();
      var scaleChanged = me._scaleCheck();
      var meta = me._cachedMeta;
      var dataset = me.getDataset();
      var stackChanged = false;
      meta._stacked = isStacked(meta.vScale, meta);
      if (meta.stack !== dataset.stack) {
        stackChanged = true;
        meta._parsed.forEach(function (parsed) {
          delete parsed._stacks[meta.vScale.id][meta.index];
        });
        meta.stack = dataset.stack;
      }
      me._resyncElements(dataChanged || labelsChanged || scaleChanged || stackChanged);
      if (stackChanged) {
        updateStacks(me, meta._parsed);
      }
    }
  }, {
    key: "configure",
    value: function configure() {
      var me = this;
      me._config = helpers.merge({}, [me.chart.options[me._type].datasets, me.getDataset()], {
        merger: function merger(key, target, source) {
          if (key !== 'data') {
            helpers._merger(key, target, source);
          }
        }
      });
      me._parsing = resolve$1([me._config.parsing, me.chart.options.parsing, true]);
    }
  }, {
    key: "parse",
    value: function parse(start, count) {
      var me = this;
      var meta = me._cachedMeta,
          data = me._data;
      var iScale = meta.iScale,
          vScale = meta.vScale,
          _stacked = meta._stacked;
      var iAxis = iScale.axis;
      var sorted = true;
      var i, parsed, cur, prev;
      if (start > 0) {
        sorted = meta._sorted;
        prev = meta._parsed[start - 1];
      }
      if (me._parsing === false) {
        meta._parsed = data;
        meta._sorted = true;
      } else {
        if (helpers.isArray(data[start])) {
          parsed = me.parseArrayData(meta, data, start, count);
        } else if (helpers.isObject(data[start])) {
          parsed = me.parseObjectData(meta, data, start, count);
        } else {
          parsed = me.parsePrimitiveData(meta, data, start, count);
        }
        for (i = 0; i < count; ++i) {
          meta._parsed[i + start] = cur = parsed[i];
          if (sorted) {
            if (prev && cur[iAxis] < prev[iAxis]) {
              sorted = false;
            }
            prev = cur;
          }
        }
        meta._sorted = sorted;
      }
      if (_stacked) {
        updateStacks(me, parsed);
      }
      iScale.invalidateCaches();
      vScale.invalidateCaches();
    }
  }, {
    key: "parsePrimitiveData",
    value: function parsePrimitiveData(meta, data, start, count) {
      var iScale = meta.iScale,
          vScale = meta.vScale;
      var iAxis = iScale.axis;
      var vAxis = vScale.axis;
      var labels = iScale.getLabels();
      var singleScale = iScale === vScale;
      var parsed = new Array(count);
      var i, ilen, index;
      for (i = 0, ilen = count; i < ilen; ++i) {
        var _parsed$i;
        index = i + start;
        parsed[i] = (_parsed$i = {}, _defineProperty(_parsed$i, iAxis, singleScale || iScale.parse(labels[index], index)), _defineProperty(_parsed$i, vAxis, vScale.parse(data[index], index)), _parsed$i);
      }
      return parsed;
    }
  }, {
    key: "parseArrayData",
    value: function parseArrayData(meta, data, start, count) {
      var xScale = meta.xScale,
          yScale = meta.yScale;
      var parsed = new Array(count);
      var i, ilen, index, item;
      for (i = 0, ilen = count; i < ilen; ++i) {
        index = i + start;
        item = data[index];
        parsed[i] = {
          x: xScale.parse(item[0], index),
          y: yScale.parse(item[1], index)
        };
      }
      return parsed;
    }
  }, {
    key: "parseObjectData",
    value: function parseObjectData(meta, data, start, count) {
      var xScale = meta.xScale,
          yScale = meta.yScale;
      var parsed = new Array(count);
      var i, ilen, index, item;
      for (i = 0, ilen = count; i < ilen; ++i) {
        index = i + start;
        item = data[index];
        parsed[i] = {
          x: xScale.parseObject(item, 'x', index),
          y: yScale.parseObject(item, 'y', index)
        };
      }
      return parsed;
    }
  }, {
    key: "getParsed",
    value: function getParsed(index) {
      return this._cachedMeta._parsed[index];
    }
  }, {
    key: "applyStack",
    value: function applyStack(scale, parsed) {
      var chart = this.chart;
      var meta = this._cachedMeta;
      var value = parsed[scale.axis];
      var stack = {
        keys: getSortedDatasetIndices(chart, true),
        values: parsed._stacks[scale.axis]
      };
      return _applyStack(stack, value, meta.index);
    }
  }, {
    key: "getMinMax",
    value: function getMinMax(scale, canStack) {
      var meta = this._cachedMeta;
      var _parsed = meta._parsed;
      var sorted = meta._sorted && scale === meta.iScale;
      var ilen = _parsed.length;
      var otherScale = this._getOtherScale(scale);
      var stack = canStack && meta._stacked && {
        keys: getSortedDatasetIndices(this.chart, true),
        values: null
      };
      var min = Number.POSITIVE_INFINITY;
      var max = Number.NEGATIVE_INFINITY;
      var _getUserBounds = getUserBounds(otherScale),
          otherMin = _getUserBounds.min,
          otherMax = _getUserBounds.max;
      var i, value, parsed, otherValue;
      function _compute() {
        if (stack) {
          stack.values = parsed._stacks[scale.axis];
          min = Math.min(min, value);
          max = Math.max(max, value);
          value = _applyStack(stack, value, meta.index, true);
        }
        min = Math.min(min, value);
        max = Math.max(max, value);
      }
      function _skip() {
        parsed = _parsed[i];
        value = parsed[scale.axis];
        otherValue = parsed[otherScale.axis];
        return isNaN(value) || otherMin > otherValue || otherMax < otherValue;
      }
      for (i = 0; i < ilen; ++i) {
        if (_skip()) {
          continue;
        }
        _compute();
        if (sorted) {
          break;
        }
      }
      if (sorted) {
        for (i = ilen - 1; i >= 0; --i) {
          if (_skip()) {
            continue;
          }
          _compute();
          break;
        }
      }
      return {
        min: min,
        max: max
      };
    }
  }, {
    key: "getAllParsedValues",
    value: function getAllParsedValues(scale) {
      var parsed = this._cachedMeta._parsed;
      var values = [];
      var i, ilen, value;
      for (i = 0, ilen = parsed.length; i < ilen; ++i) {
        value = parsed[i][scale.axis];
        if (!isNaN(value)) {
          values.push(value);
        }
      }
      return values;
    }
  }, {
    key: "_cacheScaleStackStatus",
    value: function _cacheScaleStackStatus() {
      var me = this;
      var meta = me._cachedMeta;
      var iScale = meta.iScale;
      var vScale = meta.vScale;
      var cache = me._scaleStacked = {};
      if (iScale && vScale) {
        cache[iScale.id] = iScale.options.stacked;
        cache[vScale.id] = vScale.options.stacked;
      }
    }
  }, {
    key: "_scaleCheck",
    value: function _scaleCheck() {
      var me = this;
      var meta = me._cachedMeta;
      var iScale = meta.iScale;
      var vScale = meta.vScale;
      var cache = me._scaleStacked;
      return !cache || !iScale || !vScale || cache[iScale.id] !== iScale.options.stacked || cache[vScale.id] !== vScale.options.stacked;
    }
  }, {
    key: "getMaxOverflow",
    value: function getMaxOverflow() {
      return false;
    }
  }, {
    key: "getLabelAndValue",
    value: function getLabelAndValue(index) {
      var me = this;
      var meta = me._cachedMeta;
      var iScale = meta.iScale;
      var vScale = meta.vScale;
      var parsed = me.getParsed(index);
      return {
        label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
        value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
      };
    }
  }, {
    key: "_update",
    value: function _update(mode) {
      var me = this;
      var meta = me._cachedMeta;
      me.configure();
      me._cachedAnimations = {};
      me._cachedDataOpts = {};
      me.update(mode);
      meta._clip = toClip(helpers.valueOrDefault(me._config.clip, defaultClip(meta.xScale, meta.yScale, me.getMaxOverflow())));
      me._cacheScaleStackStatus();
    }
  }, {
    key: "update",
    value: function update(mode) {}
  }, {
    key: "draw",
    value: function draw() {
      var ctx = this._ctx;
      var meta = this._cachedMeta;
      var elements = meta.data || [];
      var ilen = elements.length;
      var i = 0;
      if (meta.dataset) {
        meta.dataset.draw(ctx);
      }
      for (; i < ilen; ++i) {
        elements[i].draw(ctx);
      }
    }
  }, {
    key: "_addAutomaticHoverColors",
    value: function _addAutomaticHoverColors(index, options) {
      var me = this;
      var getHoverColor = helpers.getHoverColor;
      var normalOptions = me.getStyle(index);
      var missingColors = Object.keys(normalOptions).filter(function (key) {
        return key.indexOf('Color') !== -1 && !(key in options);
      });
      var i = missingColors.length - 1;
      var color;
      for (; i >= 0; i--) {
        color = missingColors[i];
        options[color] = getHoverColor(normalOptions[color]);
      }
    }
  }, {
    key: "getStyle",
    value: function getStyle(index, active) {
      var me = this;
      var meta = me._cachedMeta;
      var dataset = meta.dataset;
      if (!me._config) {
        me.configure();
      }
      var options = dataset && index === undefined ? me.resolveDatasetElementOptions(active) : me.resolveDataElementOptions(index || 0, active && 'active');
      if (active) {
        me._addAutomaticHoverColors(index, options);
      }
      return options;
    }
  }, {
    key: "_getContext",
    value: function _getContext(index, active) {
      return {
        chart: this.chart,
        dataIndex: index,
        dataset: this.getDataset(),
        datasetIndex: this.index,
        active: active
      };
    }
  }, {
    key: "resolveDatasetElementOptions",
    value: function resolveDatasetElementOptions(active) {
      var me = this;
      var chart = me.chart;
      var datasetOpts = me._config;
      var options = chart.options.elements[me.datasetElementType._type] || {};
      var elementOptions = me.datasetElementOptions;
      var values = {};
      var context = me._getContext(undefined, active);
      var i, ilen, key, readKey, value;
      for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
        key = elementOptions[i];
        readKey = active ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
        value = resolve$1([datasetOpts[readKey], options[readKey]], context);
        if (value !== undefined) {
          values[key] = value;
        }
      }
      return values;
    }
  }, {
    key: "resolveDataElementOptions",
    value: function resolveDataElementOptions(index) {
      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var me = this;
      var active = mode === 'active';
      var cached = me._cachedDataOpts;
      if (cached[mode]) {
        return cached[mode];
      }
      var chart = me.chart;
      var datasetOpts = me._config;
      var options = chart.options.elements[me.dataElementType._type] || {};
      var elementOptions = me.dataElementOptions;
      var values = {};
      var context = me._getContext(index, active);
      var info = {
        cacheable: !active
      };
      var keys, i, ilen, key, value, readKey;
      if (helpers.isArray(elementOptions)) {
        for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
          key = elementOptions[i];
          readKey = active ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
          value = resolve$1([datasetOpts[readKey], options[readKey]], context, index, info);
          if (value !== undefined) {
            values[key] = value;
          }
        }
      } else {
        keys = Object.keys(elementOptions);
        for (i = 0, ilen = keys.length; i < ilen; ++i) {
          key = keys[i];
          readKey = active ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
          value = resolve$1([datasetOpts[elementOptions[readKey]], datasetOpts[readKey], options[readKey]], context, index, info);
          if (value !== undefined) {
            values[key] = value;
          }
        }
      }
      if (info.cacheable) {
        values.$shared = true;
        cached[mode] = values;
      }
      return values;
    }
  }, {
    key: "_resolveAnimations",
    value: function _resolveAnimations(index, mode, active) {
      var me = this;
      var chart = me.chart;
      var cached = me._cachedAnimations;
      mode = mode || 'default';
      if (cached[mode]) {
        return cached[mode];
      }
      var info = {
        cacheable: true
      };
      var context = me._getContext(index, active);
      var datasetAnim = resolve$1([me._config.animation], context, index, info);
      var chartAnim = resolve$1([chart.options.animation], context, index, info);
      var config = helpers.mergeIf({}, [datasetAnim, chartAnim]);
      if (config[mode]) {
        config = _extends({}, config, config[mode]);
      }
      var animations = new Animations(chart, config);
      if (info.cacheable) {
        cached[mode] = animations && Object.freeze(animations);
      }
      return animations;
    }
  }, {
    key: "getSharedOptions",
    value: function getSharedOptions(mode, el, options) {
      if (!mode) {
        this._sharedOptions = options && options.$shared;
      }
      if (mode !== 'reset' && options && options.$shared && el && el.options && el.options.$shared) {
        return {
          target: el.options,
          options: options
        };
      }
    }
  }, {
    key: "includeOptions",
    value: function includeOptions(mode, sharedOptions) {
      if (mode === 'hide' || mode === 'show') {
        return true;
      }
      return mode !== 'resize' && !sharedOptions;
    }
  }, {
    key: "updateElement",
    value: function updateElement(element, index, properties, mode) {
      if (mode === 'reset' || mode === 'none') {
        _extends(element, properties);
      } else {
        this._resolveAnimations(index, mode).update(element, properties);
      }
    }
  }, {
    key: "updateSharedOptions",
    value: function updateSharedOptions(sharedOptions, mode) {
      if (sharedOptions) {
        this._resolveAnimations(undefined, mode).update(sharedOptions.target, sharedOptions.options);
      }
    }
  }, {
    key: "_setStyle",
    value: function _setStyle(element, index, mode, active) {
      element.active = active;
      this._resolveAnimations(index, mode, active).update(element, {
        options: this.getStyle(index, active)
      });
    }
  }, {
    key: "removeHoverStyle",
    value: function removeHoverStyle(element, datasetIndex, index) {
      this._setStyle(element, index, 'active', false);
    }
  }, {
    key: "setHoverStyle",
    value: function setHoverStyle(element, datasetIndex, index) {
      this._setStyle(element, index, 'active', true);
    }
  }, {
    key: "_removeDatasetHoverStyle",
    value: function _removeDatasetHoverStyle() {
      var element = this._cachedMeta.dataset;
      if (element) {
        this._setStyle(element, undefined, 'active', false);
      }
    }
  }, {
    key: "_setDatasetHoverStyle",
    value: function _setDatasetHoverStyle() {
      var element = this._cachedMeta.dataset;
      if (element) {
        this._setStyle(element, undefined, 'active', true);
      }
    }
  }, {
    key: "_resyncElements",
    value: function _resyncElements(changed) {
      var me = this;
      var meta = me._cachedMeta;
      var numMeta = meta.data.length;
      var numData = me._data.length;
      if (numData > numMeta) {
        me._insertElements(numMeta, numData - numMeta);
        if (changed && numMeta) {
          me.parse(0, numMeta);
        }
      } else if (numData < numMeta) {
        meta.data.splice(numData, numMeta - numData);
        meta._parsed.splice(numData, numMeta - numData);
        me.parse(0, numData);
      } else if (changed) {
        me.parse(0, numData);
      }
    }
  }, {
    key: "_insertElements",
    value: function _insertElements(start, count) {
      var me = this;
      var elements = new Array(count);
      var meta = me._cachedMeta;
      var data = meta.data;
      var i;
      for (i = 0; i < count; ++i) {
        elements[i] = new me.dataElementType();
      }
      data.splice.apply(data, [start, 0].concat(elements));
      if (me._parsing) {
        var _meta$_parsed;
        (_meta$_parsed = meta._parsed).splice.apply(_meta$_parsed, [start, 0].concat(_toConsumableArray(new Array(count))));
      }
      me.parse(start, count);
      me.updateElements(elements, start, 'reset');
    }
  }, {
    key: "updateElements",
    value: function updateElements(element, start, mode) {}
  }, {
    key: "_removeElements",
    value: function _removeElements(start, count) {
      var me = this;
      if (me._parsing) {
        me._cachedMeta._parsed.splice(start, count);
      }
      me._cachedMeta.data.splice(start, count);
    }
  }, {
    key: "_onDataPush",
    value: function _onDataPush() {
      var count = arguments.length;
      this._insertElements(this.getDataset().data.length - count, count);
    }
  }, {
    key: "_onDataPop",
    value: function _onDataPop() {
      this._removeElements(this._cachedMeta.data.length - 1, 1);
    }
  }, {
    key: "_onDataShift",
    value: function _onDataShift() {
      this._removeElements(0, 1);
    }
  }, {
    key: "_onDataSplice",
    value: function _onDataSplice(start, count) {
      this._removeElements(start, count);
      this._insertElements(start, arguments.length - 2);
    }
  }, {
    key: "_onDataUnshift",
    value: function _onDataUnshift() {
      this._insertElements(0, arguments.length);
    }
  }]);
  return DatasetController;
}();
_defineProperty(DatasetController, "extend", helpers.inherits);
DatasetController.prototype.datasetElementType = null;
DatasetController.prototype.dataElementType = null;
DatasetController.prototype.datasetElementOptions = ['backgroundColor', 'borderCapStyle', 'borderColor', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'borderWidth'];
DatasetController.prototype.dataElementOptions = ['backgroundColor', 'borderColor', 'borderWidth', 'pointStyle'];

var Element$1 = function () {
  function Element() {
    _classCallCheck(this, Element);
    this.x = undefined;
    this.y = undefined;
    this.active = false;
    this.options = undefined;
    this.$animations = undefined;
    this._model = undefined;
  }
  _createClass(Element, [{
    key: "tooltipPosition",
    value: function tooltipPosition(useFinalPosition) {
      var _this$getProps = this.getProps(['x', 'y'], useFinalPosition),
          x = _this$getProps.x,
          y = _this$getProps.y;
      return {
        x: x,
        y: y
      };
    }
  }, {
    key: "hasValue",
    value: function hasValue() {
      return isNumber(this.x) && isNumber(this.y);
    }
  }, {
    key: "getProps",
    value: function getProps(props, final) {
      var me = this;
      var anims = this.$animations;
      if (!final || !anims) {
        return me;
      }
      var ret = {};
      props.forEach(function (prop) {
        ret[prop] = anims[prop] && anims[prop].active ? anims[prop]._to : me[prop];
      });
      return ret;
    }
  }]);
  return Element;
}();
_defineProperty(Element$1, "extend", inherits);

var TAU$1 = Math.PI * 2;
defaults.set('elements', {
  arc: {
    backgroundColor: defaults.color,
    borderAlign: 'center',
    borderColor: '#fff',
    borderWidth: 2
  }
});
function clipArc(ctx, arc) {
  var startAngle = arc.startAngle,
      endAngle = arc.endAngle,
      pixelMargin = arc.pixelMargin,
      x = arc.x,
      y = arc.y;
  var angleMargin = pixelMargin / arc.outerRadius;
  ctx.beginPath();
  ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  if (arc.innerRadius > pixelMargin) {
    angleMargin = pixelMargin / arc.innerRadius;
    ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
  }
  ctx.closePath();
  ctx.clip();
}
function drawFullCircleBorders(ctx, vm, arc, inner) {
  var endAngle = arc.endAngle;
  var i;
  if (inner) {
    arc.endAngle = arc.startAngle + TAU$1;
    clipArc(ctx, arc);
    arc.endAngle = endAngle;
    if (arc.endAngle === arc.startAngle && arc.fullCircles) {
      arc.endAngle += TAU$1;
      arc.fullCircles--;
    }
  }
  ctx.beginPath();
  ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU$1, arc.startAngle, true);
  for (i = 0; i < arc.fullCircles; ++i) {
    ctx.stroke();
  }
  ctx.beginPath();
  ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU$1);
  for (i = 0; i < arc.fullCircles; ++i) {
    ctx.stroke();
  }
}
function drawBorder(ctx, vm, arc) {
  var options = vm.options;
  var inner = options.borderAlign === 'inner';
  if (inner) {
    ctx.lineWidth = options.borderWidth * 2;
    ctx.lineJoin = 'round';
  } else {
    ctx.lineWidth = options.borderWidth;
    ctx.lineJoin = 'bevel';
  }
  if (arc.fullCircles) {
    drawFullCircleBorders(ctx, vm, arc, inner);
  }
  if (inner) {
    clipArc(ctx, arc);
  }
  ctx.beginPath();
  ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
  ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
  ctx.closePath();
  ctx.stroke();
}
var Arc = function (_Element) {
  _inherits(Arc, _Element);
  var _super = _createSuper(Arc);
  function Arc(cfg) {
    var _this;
    _classCallCheck(this, Arc);
    _this = _super.call(this);
    _this.options = undefined;
    _this.circumference = undefined;
    _this.startAngle = undefined;
    _this.endAngle = undefined;
    _this.innerRadius = undefined;
    _this.outerRadius = undefined;
    if (cfg) {
      _extends(_assertThisInitialized(_this), cfg);
    }
    return _this;
  }
  _createClass(Arc, [{
    key: "inRange",
    value: function inRange(chartX, chartY, useFinalPosition) {
      var point = this.getProps(['x', 'y'], useFinalPosition);
      var _getAngleFromPoint = getAngleFromPoint(point, {
        x: chartX,
        y: chartY
      }),
          angle = _getAngleFromPoint.angle,
          distance = _getAngleFromPoint.distance;
      var _this$getProps = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),
          startAngle = _this$getProps.startAngle,
          endAngle = _this$getProps.endAngle,
          innerRadius = _this$getProps.innerRadius,
          outerRadius = _this$getProps.outerRadius,
          circumference = _this$getProps.circumference;
      var betweenAngles = circumference >= TAU$1 || _angleBetween(angle, startAngle, endAngle);
      var withinRadius = distance >= innerRadius && distance <= outerRadius;
      return betweenAngles && withinRadius;
    }
  }, {
    key: "getCenterPoint",
    value: function getCenterPoint(useFinalPosition) {
      var _this$getProps2 = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition),
          x = _this$getProps2.x,
          y = _this$getProps2.y,
          startAngle = _this$getProps2.startAngle,
          endAngle = _this$getProps2.endAngle,
          innerRadius = _this$getProps2.innerRadius,
          outerRadius = _this$getProps2.outerRadius;
      var halfAngle = (startAngle + endAngle) / 2;
      var halfRadius = (innerRadius + outerRadius) / 2;
      return {
        x: x + Math.cos(halfAngle) * halfRadius,
        y: y + Math.sin(halfAngle) * halfRadius
      };
    }
  }, {
    key: "tooltipPosition",
    value: function tooltipPosition(useFinalPosition) {
      return this.getCenterPoint(useFinalPosition);
    }
  }, {
    key: "draw",
    value: function draw(ctx) {
      var me = this;
      var options = me.options;
      var pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;
      var arc = {
        x: me.x,
        y: me.y,
        innerRadius: me.innerRadius,
        outerRadius: Math.max(me.outerRadius - pixelMargin, 0),
        pixelMargin: pixelMargin,
        startAngle: me.startAngle,
        endAngle: me.endAngle,
        fullCircles: Math.floor(me.circumference / TAU$1)
      };
      var i;
      ctx.save();
      ctx.fillStyle = options.backgroundColor;
      ctx.strokeStyle = options.borderColor;
      if (arc.fullCircles) {
        arc.endAngle = arc.startAngle + TAU$1;
        ctx.beginPath();
        ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
        ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
        ctx.closePath();
        for (i = 0; i < arc.fullCircles; ++i) {
          ctx.fill();
        }
        arc.endAngle = arc.startAngle + me.circumference % TAU$1;
      }
      ctx.beginPath();
      ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
      ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
      ctx.closePath();
      ctx.fill();
      if (options.borderWidth) {
        drawBorder(ctx, me, arc);
      }
      ctx.restore();
    }
  }]);
  return Arc;
}(Element$1);
_defineProperty(Arc, "_type", 'arc');

function _pointInLine(p1, p2, t, mode) {
  return {
    x: p1.x + t * (p2.x - p1.x),
    y: p1.y + t * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t, mode) {
  return {
    x: p1.x + t * (p2.x - p1.x),
    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t, mode) {
  var cp1 = {
    x: p1.controlPointNextX,
    y: p1.controlPointNextY
  };
  var cp2 = {
    x: p2.controlPointPreviousX,
    y: p2.controlPointPreviousY
  };
  var a = _pointInLine(p1, cp1, t);
  var b = _pointInLine(cp1, cp2, t);
  var c = _pointInLine(cp2, p2, t);
  var d = _pointInLine(a, b, t);
  var e = _pointInLine(b, c, t);
  return _pointInLine(d, e, t);
}

function propertyFn(property) {
  if (property === 'angle') {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle
    };
  }
  return {
    between: function between(n, s, e) {
      return n >= s && n <= e;
    },
    compare: function compare(a, b) {
      return a - b;
    },
    normalize: function normalize(x) {
      return x;
    }
  };
}
function makeSubSegment(start, end, loop, count) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0
  };
}
function getSegment(segment, points, bounds) {
  var property = bounds.property,
      startBound = bounds.start,
      endBound = bounds.end;
  var _propertyFn = propertyFn(property),
      between = _propertyFn.between,
      normalize = _propertyFn.normalize;
  var count = points.length;
  var start = segment.start,
      end = segment.end,
      loop = segment.loop;
  var i, ilen;
  if (loop) {
    start += count;
    end += count;
    for (i = 0, ilen = count; i < ilen; ++i) {
      if (!between(normalize(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {
    start: start,
    end: end,
    loop: loop
  };
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [segment];
  }
  var property = bounds.property,
      startBound = bounds.start,
      endBound = bounds.end;
  var count = points.length;
  var _propertyFn2 = propertyFn(property),
      compare = _propertyFn2.compare,
      between = _propertyFn2.between,
      normalize = _propertyFn2.normalize;
  var _getSegment = getSegment(segment, points, bounds),
      start = _getSegment.start,
      end = _getSegment.end,
      loop = _getSegment.loop;
  var result = [];
  var inside = false;
  var subStart = null;
  var i, value, point, prev;
  for (i = start; i <= end; ++i) {
    point = points[i % count];
    if (point.skip) {
      continue;
    }
    value = normalize(point[property]);
    inside = between(value, startBound, endBound);
    if (subStart === null && inside) {
      subStart = i > start && compare(value, startBound) > 0 ? prev : i;
    }
    if (subStart !== null && (!inside || compare(value, endBound) === 0)) {
      result.push(makeSubSegment(subStart, i, loop, count));
      subStart = null;
    }
    prev = i;
  }
  if (subStart !== null) {
    result.push(makeSubSegment(subStart, end, loop, count));
  }
  return result;
}
function _boundSegments(line, bounds) {
  var result = [];
  var segments = line.segments;
  for (var i = 0; i < segments.length; i++) {
    var sub = _boundSegment(segments[i], line.points, bounds);
    if (sub.length) {
      result.push.apply(result, _toConsumableArray(sub));
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
  var start = 0;
  var end = count - 1;
  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {
    start: start,
    end: end
  };
}
function solidSegments(points, start, max, loop) {
  var count = points.length;
  var result = [];
  var last = start;
  var prev = points[start];
  var end;
  for (end = start + 1; end <= max; ++end) {
    var cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev.skip) {
        loop = false;
        result.push({
          start: start % count,
          end: (end - 1) % count,
          loop: loop
        });
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;
      if (prev.skip) {
        start = end;
      }
    }
    prev = cur;
  }
  if (last !== null) {
    result.push({
      start: start % count,
      end: last % count,
      loop: loop
    });
  }
  return result;
}
function _computeSegments(line) {
  var points = line.points;
  var spanGaps = line.options.spanGaps;
  var count = points.length;
  if (!count) {
    return [];
  }
  var loop = !!line._loop;
  var _findStartAndEnd = findStartAndEnd(points, count, loop, spanGaps),
      start = _findStartAndEnd.start,
      end = _findStartAndEnd.end;
  if (spanGaps === true) {
    return [{
      start: start,
      end: end,
      loop: loop
    }];
  }
  var max = end < start ? end + count : end;
  var completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
  return solidSegments(points, start, max, completeLoop);
}

var defaultColor = defaults.color;
defaults.set('elements', {
  line: {
    backgroundColor: defaultColor,
    borderCapStyle: 'butt',
    borderColor: defaultColor,
    borderDash: [],
    borderDashOffset: 0,
    borderJoinStyle: 'miter',
    borderWidth: 3,
    capBezierPoints: true,
    fill: true,
    tension: 0.4
  }
});
function setStyle(ctx, vm) {
  ctx.lineCap = vm.borderCapStyle;
  ctx.setLineDash(vm.borderDash);
  ctx.lineDashOffset = vm.borderDashOffset;
  ctx.lineJoin = vm.borderJoinStyle;
  ctx.lineWidth = vm.borderWidth;
  ctx.strokeStyle = vm.borderColor;
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
  if (options.stepped) {
    return _steppedLineTo;
  }
  if (options.tension) {
    return _bezierCurveTo;
  }
  return lineTo;
}
function pathSegment(ctx, line, segment, params) {
  var start = segment.start,
      end = segment.end,
      loop = segment.loop;
  var points = line.points,
      options = line.options;
  var lineMethod = getLineMethod(options);
  var count = points.length;
  var _ref = params || {},
      _ref$move = _ref.move,
      move = _ref$move === void 0 ? true : _ref$move,
      reverse = _ref.reverse;
  var ilen = end < start ? count + end - start : end - start;
  var i, point, prev;
  for (i = 0; i <= ilen; ++i) {
    point = points[(start + (reverse ? ilen - i : i)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    prev = point;
  }
  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev, point, reverse, options.stepped);
  }
  return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
  var points = line.points;
  var count = points.length;
  var start = segment.start,
      end = segment.end;
  var _ref2 = params || {},
      _ref2$move = _ref2.move,
      move = _ref2$move === void 0 ? true : _ref2$move,
      reverse = _ref2.reverse;
  var ilen = end < start ? count + end - start : end - start;
  var avgX = 0;
  var countX = 0;
  var i, point, prevX, minY, maxY, lastY;
  if (move) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    ctx.moveTo(point.x, point.y);
  }
  for (i = 0; i <= ilen; ++i) {
    point = points[(start + (reverse ? ilen - i : i)) % count];
    if (point.skip) {
      continue;
    }
    var x = point.x;
    var y = point.y;
    var truncX = x | 0;
    if (truncX === prevX) {
      if (y < minY) {
        minY = y;
      } else if (y > maxY) {
        maxY = y;
      }
      avgX = (countX * avgX + x) / ++countX;
    } else {
      if (minY !== maxY) {
        ctx.lineTo(avgX, maxY);
        ctx.lineTo(avgX, minY);
        ctx.lineTo(avgX, lastY);
      }
      ctx.lineTo(x, y);
      prevX = truncX;
      countX = 0;
      minY = maxY = y;
    }
    lastY = y;
  }
}
function _getSegmentMethod(line) {
  var opts = line.options;
  var borderDash = opts.borderDash && opts.borderDash.length;
  var useFastPath = !line._loop && !opts.tension && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
  if (options.stepped) {
    return _steppedInterpolation;
  }
  if (options.tension) {
    return _bezierInterpolation;
  }
  return _pointInLine;
}
var Line = function (_Element) {
  _inherits(Line, _Element);
  var _super = _createSuper(Line);
  function Line(cfg) {
    var _this;
    _classCallCheck(this, Line);
    _this = _super.call(this);
    _this.options = undefined;
    _this._loop = undefined;
    _this._fullLoop = undefined;
    _this._controlPointsUpdated = undefined;
    _this._points = undefined;
    _this._segments = undefined;
    if (cfg) {
      _extends(_assertThisInitialized(_this), cfg);
    }
    return _this;
  }
  _createClass(Line, [{
    key: "updateControlPoints",
    value: function updateControlPoints(chartArea) {
      var me = this;
      if (me._controlPointsUpdated) {
        return;
      }
      var options = me.options;
      if (options.tension && !options.stepped) {
        var loop = options.spanGaps ? me._loop : me._fullLoop;
        _updateBezierControlPoints(me._points, options, chartArea, loop);
      }
    }
  }, {
    key: "first",
    value: function first() {
      var segments = this.segments;
      var points = this.points;
      return segments.length && points[segments[0].start];
    }
  }, {
    key: "last",
    value: function last() {
      var segments = this.segments;
      var points = this.points;
      var count = segments.length;
      return count && points[segments[count - 1].end];
    }
  }, {
    key: "interpolate",
    value: function interpolate(point, property) {
      var me = this;
      var options = me.options;
      var value = point[property];
      var points = me.points;
      var segments = _boundSegments(me, {
        property: property,
        start: value,
        end: value
      });
      if (!segments.length) {
        return;
      }
      var result = [];
      var _interpolate = _getInterpolationMethod(options);
      var i, ilen;
      for (i = 0, ilen = segments.length; i < ilen; ++i) {
        var _segments$i = segments[i],
            start = _segments$i.start,
            end = _segments$i.end;
        var p1 = points[start];
        var p2 = points[end];
        if (p1 === p2) {
          result.push(p1);
          continue;
        }
        var t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
        var interpolated = _interpolate(p1, p2, t, options.stepped);
        interpolated[property] = point[property];
        result.push(interpolated);
      }
      return result.length === 1 ? result[0] : result;
    }
  }, {
    key: "pathSegment",
    value: function pathSegment(ctx, segment, params) {
      var segmentMethod = _getSegmentMethod(this);
      return segmentMethod(ctx, this, segment, params);
    }
  }, {
    key: "path",
    value: function path(ctx) {
      var me = this;
      var segments = me.segments;
      var ilen = segments.length;
      var segmentMethod = _getSegmentMethod(me);
      var loop = me._loop;
      for (var i = 0; i < ilen; ++i) {
        loop &= segmentMethod(ctx, me, segments[i]);
      }
      return !!loop;
    }
  }, {
    key: "draw",
    value: function draw(ctx) {
      var me = this;
      if (!me.points.length) {
        return;
      }
      ctx.save();
      setStyle(ctx, me.options);
      ctx.beginPath();
      if (me.path(ctx)) {
        ctx.closePath();
      }
      ctx.stroke();
      ctx.restore();
    }
  }, {
    key: "points",
    set: function set(points) {
      this._points = points;
      delete this._segments;
    },
    get: function get() {
      return this._points;
    }
  }, {
    key: "segments",
    get: function get() {
      return this._segments || (this._segments = _computeSegments(this));
    }
  }]);
  return Line;
}(Element$1);
_defineProperty(Line, "_type", 'line');

var defaultColor$1 = defaults.color;
defaults.set('elements', {
  point: {
    backgroundColor: defaultColor$1,
    borderColor: defaultColor$1,
    borderWidth: 1,
    hitRadius: 1,
    hoverBorderWidth: 1,
    hoverRadius: 4,
    pointStyle: 'circle',
    radius: 3
  }
});
var Point = function (_Element) {
  _inherits(Point, _Element);
  var _super = _createSuper(Point);
  function Point(cfg) {
    var _this;
    _classCallCheck(this, Point);
    _this = _super.call(this);
    _this.options = undefined;
    _this.skip = undefined;
    _this.stop = undefined;
    if (cfg) {
      _extends(_assertThisInitialized(_this), cfg);
    }
    return _this;
  }
  _createClass(Point, [{
    key: "inRange",
    value: function inRange(mouseX, mouseY, useFinalPosition) {
      var options = this.options;
      var _this$getProps = this.getProps(['x', 'y'], useFinalPosition),
          x = _this$getProps.x,
          y = _this$getProps.y;
      return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
    }
  }, {
    key: "inXRange",
    value: function inXRange(mouseX, useFinalPosition) {
      var options = this.options;
      var _this$getProps2 = this.getProps(['x'], useFinalPosition),
          x = _this$getProps2.x;
      return Math.abs(mouseX - x) < options.radius + options.hitRadius;
    }
  }, {
    key: "inYRange",
    value: function inYRange(mouseY, useFinalPosition) {
      var options = this.options;
      var _this$getProps3 = this.getProps(['x'], useFinalPosition),
          y = _this$getProps3.y;
      return Math.abs(mouseY - y) < options.radius + options.hitRadius;
    }
  }, {
    key: "getCenterPoint",
    value: function getCenterPoint(useFinalPosition) {
      var _this$getProps4 = this.getProps(['x', 'y'], useFinalPosition),
          x = _this$getProps4.x,
          y = _this$getProps4.y;
      return {
        x: x,
        y: y
      };
    }
  }, {
    key: "size",
    value: function size() {
      var options = this.options || {};
      var radius = Math.max(options.radius, options.hoverRadius) || 0;
      var borderWidth = radius && options.borderWidth || 0;
      return (radius + borderWidth) * 2;
    }
  }, {
    key: "draw",
    value: function draw(ctx, chartArea) {
      var me = this;
      var options = me.options;
      if (me.skip || options.radius <= 0) {
        return;
      }
      if (chartArea === undefined || _isPointInArea(me, chartArea)) {
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.fillStyle = options.backgroundColor;
        drawPoint(ctx, options, me.x, me.y);
      }
    }
  }, {
    key: "getRange",
    value: function getRange() {
      var options = this.options || {};
      return options.radius + options.hitRadius;
    }
  }]);
  return Point;
}(Element$1);
_defineProperty(Point, "_type", 'point');

var defaultColor$2 = defaults.color;
defaults.set('elements', {
  rectangle: {
    backgroundColor: defaultColor$2,
    borderColor: defaultColor$2,
    borderSkipped: 'bottom',
    borderWidth: 0
  }
});
function getBarBounds(bar, useFinalPosition) {
  var _bar$getProps = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition),
      x = _bar$getProps.x,
      y = _bar$getProps.y,
      base = _bar$getProps.base,
      width = _bar$getProps.width,
      height = _bar$getProps.height;
  var left, right, top, bottom, half;
  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x, base);
    right = Math.max(x, base);
    top = y - half;
    bottom = y + half;
  } else {
    half = width / 2;
    left = x - half;
    right = x + half;
    top = Math.min(y, base);
    bottom = Math.max(y, base);
  }
  return {
    left: left,
    top: top,
    right: right,
    bottom: bottom
  };
}
function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function parseBorderSkipped(bar) {
  var edge = bar.options.borderSkipped;
  var res = {};
  if (!edge) {
    return res;
  }
  if (bar.horizontal) {
    if (bar.base > bar.x) {
      edge = swap(edge, 'left', 'right');
    }
  } else if (bar.base < bar.y) {
    edge = swap(edge, 'bottom', 'top');
  }
  res[edge] = true;
  return res;
}
function skipOrLimit(skip, value, min, max) {
  return skip ? 0 : Math.max(Math.min(value, max), min);
}
function parseBorderWidth(bar, maxW, maxH) {
  var value = bar.options.borderWidth;
  var skip = parseBorderSkipped(bar);
  var t, r, b, l;
  if (isObject(value)) {
    t = +value.top || 0;
    r = +value.right || 0;
    b = +value.bottom || 0;
    l = +value.left || 0;
  } else {
    t = r = b = l = +value || 0;
  }
  return {
    t: skipOrLimit(skip.top, t, 0, maxH),
    r: skipOrLimit(skip.right, r, 0, maxW),
    b: skipOrLimit(skip.bottom, b, 0, maxH),
    l: skipOrLimit(skip.left, l, 0, maxW)
  };
}
function boundingRects(bar) {
  var bounds = getBarBounds(bar);
  var width = bounds.right - bounds.left;
  var height = bounds.bottom - bounds.top;
  var border = parseBorderWidth(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height
    },
    inner: {
      x: bounds.left + border.l,
      y: bounds.top + border.t,
      w: width - border.l - border.r,
      h: height - border.t - border.b
    }
  };
}
function _inRange(bar, x, y, useFinalPosition) {
  var skipX = x === null;
  var skipY = y === null;
  var bounds = !bar || skipX && skipY ? false : getBarBounds(bar, useFinalPosition);
  return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);
}
var Rectangle = function (_Element) {
  _inherits(Rectangle, _Element);
  var _super = _createSuper(Rectangle);
  function Rectangle(cfg) {
    var _this;
    _classCallCheck(this, Rectangle);
    _this = _super.call(this);
    _this.options = undefined;
    _this.horizontal = undefined;
    _this.base = undefined;
    _this.width = undefined;
    _this.height = undefined;
    if (cfg) {
      _extends(_assertThisInitialized(_this), cfg);
    }
    return _this;
  }
  _createClass(Rectangle, [{
    key: "draw",
    value: function draw(ctx) {
      var options = this.options;
      var _boundingRects = boundingRects(this),
          inner = _boundingRects.inner,
          outer = _boundingRects.outer;
      ctx.save();
      if (outer.w !== inner.w || outer.h !== inner.h) {
        ctx.beginPath();
        ctx.rect(outer.x, outer.y, outer.w, outer.h);
        ctx.clip();
        ctx.rect(inner.x, inner.y, inner.w, inner.h);
        ctx.fillStyle = options.borderColor;
        ctx.fill('evenodd');
      }
      ctx.fillStyle = options.backgroundColor;
      ctx.fillRect(inner.x, inner.y, inner.w, inner.h);
      ctx.restore();
    }
  }, {
    key: "inRange",
    value: function inRange(mouseX, mouseY, useFinalPosition) {
      return _inRange(this, mouseX, mouseY, useFinalPosition);
    }
  }, {
    key: "inXRange",
    value: function inXRange(mouseX, useFinalPosition) {
      return _inRange(this, mouseX, null, useFinalPosition);
    }
  }, {
    key: "inYRange",
    value: function inYRange(mouseY, useFinalPosition) {
      return _inRange(this, null, mouseY, useFinalPosition);
    }
  }, {
    key: "getCenterPoint",
    value: function getCenterPoint(useFinalPosition) {
      var _this$getProps = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition),
          x = _this$getProps.x,
          y = _this$getProps.y,
          base = _this$getProps.base,
          horizontal = _this$getProps.horizontal;
      return {
        x: horizontal ? (x + base) / 2 : x,
        y: horizontal ? y : (y + base) / 2
      };
    }
  }, {
    key: "getRange",
    value: function getRange(axis) {
      return axis === 'x' ? this.width / 2 : this.height / 2;
    }
  }]);
  return Rectangle;
}(Element$1);
_defineProperty(Rectangle, "_type", 'rectangle');

var elements = /*#__PURE__*/Object.freeze({
__proto__: null,
Arc: Arc,
Line: Line,
Point: Point,
Rectangle: Rectangle
});

defaults.set('bar', {
  hover: {
    mode: 'index'
  },
  datasets: {
    categoryPercentage: 0.8,
    barPercentage: 0.9,
    animation: {
      numbers: {
        type: 'number',
        properties: ['x', 'y', 'base', 'width', 'height']
      }
    }
  },
  scales: {
    x: {
      type: 'category',
      offset: true,
      gridLines: {
        offsetGridLines: true
      }
    },
    y: {
      type: 'linear',
      beginAtZero: true
    }
  }
});
function computeMinSampleSize(scale, pixels) {
  var min = scale._length;
  var prev, curr, i, ilen;
  for (i = 1, ilen = pixels.length; i < ilen; ++i) {
    min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
  }
  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {
    curr = scale.getPixelForTick(i);
    min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
    prev = curr;
  }
  return min;
}
function computeFitCategoryTraits(index, ruler, options) {
  var thickness = options.barThickness;
  var count = ruler.stackCount;
  var size, ratio;
  if (isNullOrUndef(thickness)) {
    size = ruler.min * options.categoryPercentage;
    ratio = options.barPercentage;
  } else {
    size = thickness * count;
    ratio = 1;
  }
  return {
    chunk: size / count,
    ratio: ratio,
    start: ruler.pixels[index] - size / 2
  };
}
function computeFlexCategoryTraits(index, ruler, options) {
  var pixels = ruler.pixels;
  var curr = pixels[index];
  var prev = index > 0 ? pixels[index - 1] : null;
  var next = index < pixels.length - 1 ? pixels[index + 1] : null;
  var percent = options.categoryPercentage;
  if (prev === null) {
    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
  }
  if (next === null) {
    next = curr + curr - prev;
  }
  var start = curr - (curr - Math.min(prev, next)) / 2 * percent;
  var size = Math.abs(next - prev) / 2 * percent;
  return {
    chunk: size / ruler.stackCount,
    ratio: options.barPercentage,
    start: start
  };
}
function parseFloatBar(arr, item, vScale, i) {
  var startValue = vScale.parse(arr[0], i);
  var endValue = vScale.parse(arr[1], i);
  var min = Math.min(startValue, endValue);
  var max = Math.max(startValue, endValue);
  var barStart = min;
  var barEnd = max;
  if (Math.abs(min) > Math.abs(max)) {
    barStart = max;
    barEnd = min;
  }
  item[vScale.axis] = barEnd;
  item._custom = {
    barStart: barStart,
    barEnd: barEnd,
    start: startValue,
    end: endValue,
    min: min,
    max: max
  };
}
function parseArrayOrPrimitive(meta, data, start, count) {
  var iScale = meta.iScale;
  var vScale = meta.vScale;
  var labels = iScale.getLabels();
  var singleScale = iScale === vScale;
  var parsed = [];
  var i, ilen, item, entry;
  for (i = start, ilen = start + count; i < ilen; ++i) {
    entry = data[i];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
    if (isArray(entry)) {
      parseFloatBar(entry, item, vScale, i);
    } else {
      item[vScale.axis] = vScale.parse(entry, i);
    }
    parsed.push(item);
  }
  return parsed;
}
function isFloatBar(custom) {
  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}
var BarController = function (_DatasetController) {
  _inherits(BarController, _DatasetController);
  var _super = _createSuper(BarController);
  function BarController() {
    _classCallCheck(this, BarController);
    return _super.apply(this, arguments);
  }
  _createClass(BarController, [{
    key: "parsePrimitiveData",
    value: function parsePrimitiveData(meta, data, start, count) {
      return parseArrayOrPrimitive(meta, data, start, count);
    }
  }, {
    key: "parseArrayData",
    value: function parseArrayData(meta, data, start, count) {
      return parseArrayOrPrimitive(meta, data, start, count);
    }
  }, {
    key: "parseObjectData",
    value: function parseObjectData(meta, data, start, count) {
      var iScale = meta.iScale,
          vScale = meta.vScale;
      var vProp = vScale.axis;
      var parsed = [];
      var i, ilen, item, obj, value;
      for (i = start, ilen = start + count; i < ilen; ++i) {
        obj = data[i];
        item = {};
        item[iScale.axis] = iScale.parseObject(obj, iScale.axis, i);
        value = obj[vProp];
        if (isArray(value)) {
          parseFloatBar(value, item, vScale, i);
        } else {
          item[vScale.axis] = vScale.parseObject(obj, vProp, i);
        }
        parsed.push(item);
      }
      return parsed;
    }
  }, {
    key: "getLabelAndValue",
    value: function getLabelAndValue(index) {
      var me = this;
      var meta = me._cachedMeta;
      var iScale = meta.iScale,
          vScale = meta.vScale;
      var parsed = me.getParsed(index);
      var custom = parsed._custom;
      var value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);
      return {
        label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
        value: value
      };
    }
  }, {
    key: "initialize",
    value: function initialize() {
      var me = this;
      _get(_getPrototypeOf(BarController.prototype), "initialize", this).call(this);
      var meta = me._cachedMeta;
      meta.stack = me.getDataset().stack;
      meta.bar = true;
    }
  }, {
    key: "update",
    value: function update(mode) {
      var me = this;
      var meta = me._cachedMeta;
      me.updateElements(meta.data, 0, mode);
    }
  }, {
    key: "updateElements",
    value: function updateElements(rectangles, start, mode) {
      var me = this;
      var reset = mode === 'reset';
      var vscale = me._cachedMeta.vScale;
      var base = vscale.getBasePixel();
      var horizontal = vscale.isHorizontal();
      var ruler = me._getRuler();
      var firstOpts = me.resolveDataElementOptions(start, mode);
      var sharedOptions = me.getSharedOptions(mode, rectangles[start], firstOpts);
      var includeOptions = me.includeOptions(mode, sharedOptions);
      var i;
      for (i = 0; i < rectangles.length; i++) {
        var index = start + i;
        var options = me.resolveDataElementOptions(index, mode);
        var vpixels = me._calculateBarValuePixels(index, options);
        var ipixels = me._calculateBarIndexPixels(index, ruler, options);
        var properties = {
          horizontal: horizontal,
          base: reset ? base : vpixels.base,
          x: horizontal ? reset ? base : vpixels.head : ipixels.center,
          y: horizontal ? ipixels.center : reset ? base : vpixels.head,
          height: horizontal ? ipixels.size : undefined,
          width: horizontal ? undefined : ipixels.size
        };
        if (includeOptions) {
          properties.options = options;
        }
        me.updateElement(rectangles[i], index, properties, mode);
      }
      me.updateSharedOptions(sharedOptions, mode);
    }
  }, {
    key: "_getStacks",
    value: function _getStacks(last) {
      var me = this;
      var meta = me._cachedMeta;
      var iScale = meta.iScale;
      var metasets = iScale.getMatchingVisibleMetas(me._type);
      var stacked = iScale.options.stacked;
      var ilen = metasets.length;
      var stacks = [];
      var i, item;
      for (i = 0; i < ilen; ++i) {
        item = metasets[i];
        if (stacked === false || stacks.indexOf(item.stack) === -1 || stacked === undefined && item.stack === undefined) {
          stacks.push(item.stack);
        }
        if (item.index === last) {
          break;
        }
      }
      if (!stacks.length) {
        stacks.push(undefined);
      }
      return stacks;
    }
  }, {
    key: "_getStackCount",
    value: function _getStackCount() {
      return this._getStacks().length;
    }
  }, {
    key: "_getStackIndex",
    value: function _getStackIndex(datasetIndex, name) {
      var stacks = this._getStacks(datasetIndex);
      var index = name !== undefined ? stacks.indexOf(name) : -1;
      return index === -1 ? stacks.length - 1 : index;
    }
  }, {
    key: "_getRuler",
    value: function _getRuler() {
      var me = this;
      var meta = me._cachedMeta;
      var iScale = meta.iScale;
      var pixels = [];
      var i, ilen;
      for (i = 0, ilen = meta.data.length; i < ilen; ++i) {
        pixels.push(iScale.getPixelForValue(me.getParsed(i)[iScale.axis]));
      }
      var min = computeMinSampleSize(iScale, pixels);
      return {
        min: min,
        pixels: pixels,
        start: iScale._startPixel,
        end: iScale._endPixel,
        stackCount: me._getStackCount(),
        scale: iScale
      };
    }
  }, {
    key: "_calculateBarValuePixels",
    value: function _calculateBarValuePixels(index, options) {
      var me = this;
      var meta = me._cachedMeta;
      var vScale = meta.vScale;
      var minBarLength = options.minBarLength;
      var parsed = me.getParsed(index);
      var custom = parsed._custom;
      var value = parsed[vScale.axis];
      var start = 0;
      var length = meta._stacked ? me.applyStack(vScale, parsed) : value;
      var head, size;
      if (length !== value) {
        start = length - value;
        length = value;
      }
      if (isFloatBar(custom)) {
        value = custom.barStart;
        length = custom.barEnd - custom.barStart;
        if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
          start = 0;
        }
        start += value;
      }
      var base = _limitValue(vScale.getPixelForValue(start), vScale._startPixel - 10, vScale._endPixel + 10);
      head = vScale.getPixelForValue(start + length);
      size = head - base;
      if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
        size = size < 0 ? -minBarLength : minBarLength;
        head = base + size;
      }
      return {
        size: size,
        base: base,
        head: head,
        center: head + size / 2
      };
    }
  }, {
    key: "_calculateBarIndexPixels",
    value: function _calculateBarIndexPixels(index, ruler, options) {
      var me = this;
      var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options) : computeFitCategoryTraits(index, ruler, options);
      var stackIndex = me._getStackIndex(me.index, me._cachedMeta.stack);
      var center = range.start + range.chunk * stackIndex + range.chunk / 2;
      var size = Math.min(valueOrDefault(options.maxBarThickness, Infinity), range.chunk * range.ratio);
      return {
        base: center - size / 2,
        head: center + size / 2,
        center: center,
        size: size
      };
    }
  }, {
    key: "draw",
    value: function draw() {
      var me = this;
      var chart = me.chart;
      var meta = me._cachedMeta;
      var vScale = meta.vScale;
      var rects = meta.data;
      var ilen = rects.length;
      var i = 0;
      clipArea(chart.ctx, chart.chartArea);
      for (; i < ilen; ++i) {
        if (!isNaN(me.getParsed(i)[vScale.axis])) {
          rects[i].draw(me._ctx);
        }
      }
      unclipArea(chart.ctx);
    }
  }]);
  return BarController;
}(DatasetController);
BarController.prototype.dataElementType = Rectangle;
BarController.prototype.dataElementOptions = ['backgroundColor', 'borderColor', 'borderSkipped', 'borderWidth', 'barPercentage', 'barThickness', 'categoryPercentage', 'maxBarThickness', 'minBarLength'];

defaults.set('bubble', {
  animation: {
    numbers: {
      properties: ['x', 'y', 'borderWidth', 'radius']
    }
  },
  scales: {
    x: {
      type: 'linear'
    },
    y: {
      type: 'linear'
    }
  },
  tooltips: {
    callbacks: {
      title: function title() {
        return '';
      }
    }
  }
});
var BubbleController = function (_DatasetController) {
  _inherits(BubbleController, _DatasetController);
  var _super = _createSuper(BubbleController);
  function BubbleController() {
    _classCallCheck(this, BubbleController);
    return _super.apply(this, arguments);
  }
  _createClass(BubbleController, [{
    key: "parseObjectData",
    value: function parseObjectData(meta, data, start, count) {
      var xScale = meta.xScale,
          yScale = meta.yScale;
      var parsed = [];
      var i, ilen, item;
      for (i = start, ilen = start + count; i < ilen; ++i) {
        item = data[i];
        parsed.push({
          x: xScale.parseObject(item, 'x', i),
          y: yScale.parseObject(item, 'y', i),
          _custom: item && item.r && +item.r
        });
      }
      return parsed;
    }
  }, {
    key: "getMaxOverflow",
    value: function getMaxOverflow() {
      var me = this;
      var meta = me._cachedMeta;
      var i = (meta.data || []).length - 1;
      var max = 0;
      for (; i >= 0; --i) {
        max = Math.max(max, me.getStyle(i, true).radius);
      }
      return max > 0 && max;
    }
  }, {
    key: "getLabelAndValue",
    value: function getLabelAndValue(index) {
      var me = this;
      var meta = me._cachedMeta;
      var xScale = meta.xScale,
          yScale = meta.yScale;
      var parsed = me.getParsed(index);
      var x = xScale.getLabelForValue(parsed.x);
      var y = yScale.getLabelForValue(parsed.y);
      var r = parsed._custom;
      return {
        label: meta.label,
        value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
      };
    }
  }, {
    key: "update",
    value: function update(mode) {
      var me = this;
      var points = me._cachedMeta.data;
      me.updateElements(points, 0, mode);
    }
  }, {
    key: "updateElements",
    value: function updateElements(points, start, mode) {
      var me = this;
      var reset = mode === 'reset';
      var _me$_cachedMeta = me._cachedMeta,
          xScale = _me$_cachedMeta.xScale,
          yScale = _me$_cachedMeta.yScale;
      var firstOpts = me.resolveDataElementOptions(start, mode);
      var sharedOptions = me.getSharedOptions(mode, points[start], firstOpts);
      var includeOptions = me.includeOptions(mode, sharedOptions);
      for (var i = 0; i < points.length; i++) {
        var point = points[i];
        var index = start + i;
        var parsed = !reset && me.getParsed(index);
        var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(parsed.x);
        var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(parsed.y);
        var properties = {
          x: x,
          y: y,
          skip: isNaN(x) || isNaN(y)
        };
        if (includeOptions) {
          properties.options = me.resolveDataElementOptions(i, mode);
          if (reset) {
            properties.options.radius = 0;
          }
        }
        me.updateElement(point, index, properties, mode);
      }
      me.updateSharedOptions(sharedOptions, mode);
    }
  }, {
    key: "resolveDataElementOptions",
    value: function resolveDataElementOptions(index, mode) {
      var me = this;
      var chart = me.chart;
      var dataset = me.getDataset();
      var parsed = me.getParsed(index);
      var values = _get(_getPrototypeOf(BubbleController.prototype), "resolveDataElementOptions", this).call(this, index, mode);
      var context = {
        chart: chart,
        dataIndex: index,
        dataset: dataset,
        datasetIndex: me.index
      };
      if (values.$shared) {
        values = _extends({}, values, {
          $shared: false
        });
      }
      if (mode !== 'active') {
        values.radius = 0;
      }
      values.radius += resolve([parsed && parsed._custom, me._config.radius, chart.options.elements.point.radius], context, index);
      return values;
    }
  }]);
  return BubbleController;
}(DatasetController);
BubbleController.prototype.dataElementType = Point;
BubbleController.prototype.dataElementOptions = ['backgroundColor', 'borderColor', 'borderWidth', 'hitRadius', 'radius', 'pointStyle', 'rotation'];

var PI$2 = Math.PI;
var DOUBLE_PI$1 = PI$2 * 2;
var HALF_PI$1 = PI$2 / 2;
defaults.set('doughnut', {
  animation: {
    numbers: {
      type: 'number',
      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y']
    },
    animateRotate: true,
    animateScale: false
  },
  legend: {
    labels: {
      generateLabels: function generateLabels(chart) {
        var data = chart.data;
        if (data.labels.length && data.datasets.length) {
          return data.labels.map(function (label, i) {
            var meta = chart.getDatasetMeta(0);
            var style = meta.controller.getStyle(i);
            return {
              text: label,
              fillStyle: style.backgroundColor,
              strokeStyle: style.borderColor,
              lineWidth: style.borderWidth,
              hidden: !chart.getDataVisibility(i),
              index: i
            };
          });
        }
        return [];
      }
    },
    onClick: function onClick(e, legendItem) {
      this.chart.toggleDataVisibility(legendItem.index);
      this.chart.update();
    }
  },
  cutoutPercentage: 50,
  rotation: -HALF_PI$1,
  circumference: DOUBLE_PI$1,
  tooltips: {
    callbacks: {
      title: function title() {
        return '';
      },
      label: function label(tooltipItem, data) {
        var dataLabel = data.labels[tooltipItem.index];
        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
        if (isArray(dataLabel)) {
          dataLabel = dataLabel.slice();
          dataLabel[0] += value;
        } else {
          dataLabel += value;
        }
        return dataLabel;
      }
    }
  }
});
function getRatioAndOffset(rotation, circumference, cutout) {
  var ratioX = 1;
  var ratioY = 1;
  var offsetX = 0;
  var offsetY = 0;
  if (circumference < DOUBLE_PI$1) {
    var startAngle = rotation % DOUBLE_PI$1;
    startAngle += startAngle >= PI$2 ? -DOUBLE_PI$1 : startAngle < -PI$2 ? DOUBLE_PI$1 : 0;
    var endAngle = startAngle + circumference;
    var startX = Math.cos(startAngle);
    var startY = Math.sin(startAngle);
    var endX = Math.cos(endAngle);
    var endY = Math.sin(endAngle);
    var contains0 = startAngle <= 0 && endAngle >= 0 || endAngle >= DOUBLE_PI$1;
    var contains90 = startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1 || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
    var contains180 = startAngle === -PI$2 || endAngle >= PI$2;
    var contains270 = startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1 || endAngle >= PI$2 + HALF_PI$1;
    var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
    var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
    var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
    var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }
  return {
    ratioX: ratioX,
    ratioY: ratioY,
    offsetX: offsetX,
    offsetY: offsetY
  };
}
var DoughnutController = function (_DatasetController) {
  _inherits(DoughnutController, _DatasetController);
  var _super = _createSuper(DoughnutController);
  function DoughnutController(chart, datasetIndex) {
    var _this;
    _classCallCheck(this, DoughnutController);
    _this = _super.call(this, chart, datasetIndex);
    _this.innerRadius = undefined;
    _this.outerRadius = undefined;
    _this.offsetX = undefined;
    _this.offsetY = undefined;
    return _this;
  }
  _createClass(DoughnutController, [{
    key: "linkScales",
    value: function linkScales() {}
  }, {
    key: "parse",
    value: function parse(start, count) {
      var data = this.getDataset().data;
      var meta = this._cachedMeta;
      var i, ilen;
      for (i = start, ilen = start + count; i < ilen; ++i) {
        meta._parsed[i] = +data[i];
      }
    }
  }, {
    key: "getRingIndex",
    value: function getRingIndex(datasetIndex) {
      var ringIndex = 0;
      for (var j = 0; j < datasetIndex; ++j) {
        if (this.chart.isDatasetVisible(j)) {
          ++ringIndex;
        }
      }
      return ringIndex;
    }
  }, {
    key: "update",
    value: function update(mode) {
      var me = this;
      var chart = me.chart;
      var chartArea = chart.chartArea,
          options = chart.options;
      var meta = me._cachedMeta;
      var arcs = meta.data;
      var cutout = options.cutoutPercentage / 100 || 0;
      var chartWeight = me._getRingWeight(me.index);
      var _getRatioAndOffset = getRatioAndOffset(options.rotation, options.circumference, cutout),
          ratioX = _getRatioAndOffset.ratioX,
          ratioY = _getRatioAndOffset.ratioY,
          offsetX = _getRatioAndOffset.offsetX,
          offsetY = _getRatioAndOffset.offsetY;
      var borderWidth = me.getMaxBorderWidth();
      var maxWidth = (chartArea.right - chartArea.left - borderWidth) / ratioX;
      var maxHeight = (chartArea.bottom - chartArea.top - borderWidth) / ratioY;
      var outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
      var innerRadius = Math.max(outerRadius * cutout, 0);
      var radiusLength = (outerRadius - innerRadius) / me._getVisibleDatasetWeightTotal();
      me.offsetX = offsetX * outerRadius;
      me.offsetY = offsetY * outerRadius;
      meta.total = me.calculateTotal();
      me.outerRadius = outerRadius - radiusLength * me._getRingWeightOffset(me.index);
      me.innerRadius = Math.max(me.outerRadius - radiusLength * chartWeight, 0);
      me.updateElements(arcs, 0, mode);
    }
  }, {
    key: "_circumference",
    value: function _circumference(i, reset) {
      var me = this;
      var opts = me.chart.options;
      var meta = me._cachedMeta;
      return reset && opts.animation.animateRotate ? 0 : this.chart.getDataVisibility(i) ? me.calculateCircumference(meta._parsed[i] * opts.circumference / DOUBLE_PI$1) : 0;
    }
  }, {
    key: "updateElements",
    value: function updateElements(arcs, start, mode) {
      var me = this;
      var reset = mode === 'reset';
      var chart = me.chart;
      var chartArea = chart.chartArea;
      var opts = chart.options;
      var animationOpts = opts.animation;
      var centerX = (chartArea.left + chartArea.right) / 2;
      var centerY = (chartArea.top + chartArea.bottom) / 2;
      var animateScale = reset && animationOpts.animateScale;
      var innerRadius = animateScale ? 0 : me.innerRadius;
      var outerRadius = animateScale ? 0 : me.outerRadius;
      var firstOpts = me.resolveDataElementOptions(start, mode);
      var sharedOptions = me.getSharedOptions(mode, arcs[start], firstOpts);
      var includeOptions = me.includeOptions(mode, sharedOptions);
      var startAngle = opts.rotation;
      var i;
      for (i = 0; i < start; ++i) {
        startAngle += me._circumference(i, reset);
      }
      for (i = 0; i < arcs.length; ++i) {
        var index = start + i;
        var circumference = me._circumference(index, reset);
        var arc = arcs[i];
        var properties = {
          x: centerX + me.offsetX,
          y: centerY + me.offsetY,
          startAngle: startAngle,
          endAngle: startAngle + circumference,
          circumference: circumference,
          outerRadius: outerRadius,
          innerRadius: innerRadius
        };
        if (includeOptions) {
          properties.options = me.resolveDataElementOptions(index, mode);
        }
        startAngle += circumference;
        me.updateElement(arc, index, properties, mode);
      }
      me.updateSharedOptions(sharedOptions, mode);
    }
  }, {
    key: "calculateTotal",
    value: function calculateTotal() {
      var meta = this._cachedMeta;
      var metaData = meta.data;
      var total = 0;
      var i;
      for (i = 0; i < metaData.length; i++) {
        var value = meta._parsed[i];
        if (!isNaN(value) && this.chart.getDataVisibility(i)) {
          total += Math.abs(value);
        }
      }
      return total;
    }
  }, {
    key: "calculateCircumference",
    value: function calculateCircumference(value) {
      var total = this._cachedMeta.total;
      if (total > 0 && !isNaN(value)) {
        return DOUBLE_PI$1 * (Math.abs(value) / total);
      }
      return 0;
    }
  }, {
    key: "getMaxBorderWidth",
    value: function getMaxBorderWidth(arcs) {
      var me = this;
      var max = 0;
      var chart = me.chart;
      var i, ilen, meta, controller, options;
      if (!arcs) {
        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
          if (chart.isDatasetVisible(i)) {
            meta = chart.getDatasetMeta(i);
            arcs = meta.data;
            controller = meta.controller;
            if (controller !== me) {
              controller.configure();
            }
            break;
          }
        }
      }
      if (!arcs) {
        return 0;
      }
      for (i = 0, ilen = arcs.length; i < ilen; ++i) {
        options = controller.resolveDataElementOptions(i);
        if (options.borderAlign !== 'inner') {
          max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
        }
      }
      return max;
    }
  }, {
    key: "_getRingWeightOffset",
    value: function _getRingWeightOffset(datasetIndex) {
      var ringWeightOffset = 0;
      for (var i = 0; i < datasetIndex; ++i) {
        if (this.chart.isDatasetVisible(i)) {
          ringWeightOffset += this._getRingWeight(i);
        }
      }
      return ringWeightOffset;
    }
  }, {
    key: "_getRingWeight",
    value: function _getRingWeight(datasetIndex) {
      return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
    }
  }, {
    key: "_getVisibleDatasetWeightTotal",
    value: function _getVisibleDatasetWeightTotal() {
      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
  }]);
  return DoughnutController;
}(DatasetController);
DoughnutController.prototype.dataElementType = Arc;
DoughnutController.prototype.dataElementOptions = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];

defaults.set('horizontalBar', {
  hover: {
    mode: 'index',
    axis: 'y'
  },
  scales: {
    x: {
      type: 'linear',
      beginAtZero: true
    },
    y: {
      type: 'category',
      offset: true,
      gridLines: {
        offsetGridLines: true
      }
    }
  },
  datasets: {
    categoryPercentage: 0.8,
    barPercentage: 0.9
  },
  elements: {
    rectangle: {
      borderSkipped: 'left'
    }
  },
  tooltips: {
    mode: 'index',
    axis: 'y'
  }
});
var HorizontalBarController = function (_BarController) {
  _inherits(HorizontalBarController, _BarController);
  var _super = _createSuper(HorizontalBarController);
  function HorizontalBarController() {
    _classCallCheck(this, HorizontalBarController);
    return _super.apply(this, arguments);
  }
  _createClass(HorizontalBarController, [{
    key: "getValueScaleId",
    value: function getValueScaleId() {
      return this._cachedMeta.xAxisID;
    }
  }, {
    key: "getIndexScaleId",
    value: function getIndexScaleId() {
      return this._cachedMeta.yAxisID;
    }
  }]);
  return HorizontalBarController;
}(BarController);

defaults.set('line', {
  showLines: true,
  spanGaps: false,
  hover: {
    mode: 'index'
  },
  scales: {
    x: {
      type: 'category'
    },
    y: {
      type: 'linear'
    }
  }
});
var LineController = function (_DatasetController) {
  _inherits(LineController, _DatasetController);
  var _super = _createSuper(LineController);
  function LineController(chart, datasetIndex) {
    var _this;
    _classCallCheck(this, LineController);
    _this = _super.call(this, chart, datasetIndex);
    _this._showLine = false;
    return _this;
  }
  _createClass(LineController, [{
    key: "update",
    value: function update(mode) {
      var me = this;
      var meta = me._cachedMeta;
      var line = meta.dataset;
      var points = meta.data || [];
      var options = me.chart.options;
      var config = me._config;
      var showLine = me._showLine = valueOrDefault(config.showLine, options.showLines);
      if (showLine && mode !== 'resize') {
        var properties = {
          points: points,
          options: me.resolveDatasetElementOptions()
        };
        me.updateElement(line, undefined, properties, mode);
      }
      me.updateElements(points, 0, mode);
    }
  }, {
    key: "updateElements",
    value: function updateElements(points, start, mode) {
      var me = this;
      var reset = mode === 'reset';
      var _me$_cachedMeta = me._cachedMeta,
          xScale = _me$_cachedMeta.xScale,
          yScale = _me$_cachedMeta.yScale,
          _stacked = _me$_cachedMeta._stacked;
      var firstOpts = me.resolveDataElementOptions(start, mode);
      var sharedOptions = me.getSharedOptions(mode, points[start], firstOpts);
      var includeOptions = me.includeOptions(mode, sharedOptions);
      var spanGaps = valueOrDefault(me._config.spanGaps, me.chart.options.spanGaps);
      var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
      var prevParsed;
      for (var i = 0; i < points.length; ++i) {
        var index = start + i;
        var point = points[i];
        var parsed = me.getParsed(index);
        var x = xScale.getPixelForValue(parsed.x);
        var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(_stacked ? me.applyStack(yScale, parsed) : parsed.y);
        var properties = {
          x: x,
          y: y,
          skip: isNaN(x) || isNaN(y),
          stop: i > 0 && parsed.x - prevParsed.x > maxGapLength
        };
        if (includeOptions) {
          properties.options = me.resolveDataElementOptions(index, mode);
        }
        me.updateElement(point, index, properties, mode);
        prevParsed = parsed;
      }
      me.updateSharedOptions(sharedOptions, mode);
    }
  }, {
    key: "resolveDatasetElementOptions",
    value: function resolveDatasetElementOptions(active) {
      var me = this;
      var config = me._config;
      var options = me.chart.options;
      var lineOptions = options.elements.line;
      var values = _get(_getPrototypeOf(LineController.prototype), "resolveDatasetElementOptions", this).call(this, active);
      values.spanGaps = valueOrDefault(config.spanGaps, options.spanGaps);
      values.tension = valueOrDefault(config.lineTension, lineOptions.tension);
      values.stepped = resolve([config.stepped, lineOptions.stepped]);
      return values;
    }
  }, {
    key: "getMaxOverflow",
    value: function getMaxOverflow() {
      var me = this;
      var meta = me._cachedMeta;
      var border = me._showLine && meta.dataset.options.borderWidth || 0;
      var data = meta.data || [];
      if (!data.length) {
        return border;
      }
      var firstPoint = data[0].size();
      var lastPoint = data[data.length - 1].size();
      return Math.max(border, firstPoint, lastPoint) / 2;
    }
  }, {
    key: "draw",
    value: function draw() {
      var me = this;
      var ctx = me._ctx;
      var chart = me.chart;
      var meta = me._cachedMeta;
      var points = meta.data || [];
      var area = chart.chartArea;
      var active = [];
      var ilen = points.length;
      var i, point;
      if (me._showLine) {
        meta.dataset.draw(ctx, area);
      }
      for (i = 0; i < ilen; ++i) {
        point = points[i];
        if (point.active) {
          active.push(point);
        } else {
          point.draw(ctx, area);
        }
      }
      for (i = 0, ilen = active.length; i < ilen; ++i) {
        active[i].draw(ctx, area);
      }
    }
  }]);
  return LineController;
}(DatasetController);
LineController.prototype.datasetElementType = Line;
LineController.prototype.dataElementType = Point;
LineController.prototype.datasetElementOptions = ['backgroundColor', 'borderCapStyle', 'borderColor', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'borderWidth', 'capBezierPoints', 'cubicInterpolationMode', 'fill'];
LineController.prototype.dataElementOptions = {
  backgroundColor: 'pointBackgroundColor',
  borderColor: 'pointBorderColor',
  borderWidth: 'pointBorderWidth',
  hitRadius: 'pointHitRadius',
  hoverHitRadius: 'pointHitRadius',
  hoverBackgroundColor: 'pointHoverBackgroundColor',
  hoverBorderColor: 'pointHoverBorderColor',
  hoverBorderWidth: 'pointHoverBorderWidth',
  hoverRadius: 'pointHoverRadius',
  pointStyle: 'pointStyle',
  radius: 'pointRadius',
  rotation: 'pointRotation'
};

defaults.set('polarArea', {
  animation: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']
    },
    animateRotate: true,
    animateScale: true
  },
  scales: {
    r: {
      type: 'radialLinear',
      angleLines: {
        display: false
      },
      beginAtZero: true,
      gridLines: {
        circular: true
      },
      pointLabels: {
        display: false
      }
    }
  },
  startAngle: 0,
  legend: {
    labels: {
      generateLabels: function generateLabels(chart) {
        var data = chart.data;
        if (data.labels.length && data.datasets.length) {
          return data.labels.map(function (label, i) {
            var meta = chart.getDatasetMeta(0);
            var style = meta.controller.getStyle(i);
            return {
              text: label,
              fillStyle: style.backgroundColor,
              strokeStyle: style.borderColor,
              lineWidth: style.borderWidth,
              hidden: !chart.getDataVisibility(i),
              index: i
            };
          });
        }
        return [];
      }
    },
    onClick: function onClick(e, legendItem) {
      this.chart.toggleDataVisibility(legendItem.index);
      this.chart.update();
    }
  },
  tooltips: {
    callbacks: {
      title: function title() {
        return '';
      },
      label: function label(item, data) {
        return data.labels[item.index] + ': ' + item.value;
      }
    }
  }
});
function getStartAngleRadians(deg) {
  return toRadians(deg) - 0.5 * Math.PI;
}
var PolarAreaController = function (_DatasetController) {
  _inherits(PolarAreaController, _DatasetController);
  var _super = _createSuper(PolarAreaController);
  function PolarAreaController(chart, datasetIndex) {
    var _this;
    _classCallCheck(this, PolarAreaController);
    _this = _super.call(this, chart, datasetIndex);
    _this.innerRadius = undefined;
    _this.outerRadius = undefined;
    return _this;
  }
  _createClass(PolarAreaController, [{
    key: "getIndexScaleId",
    value: function getIndexScaleId() {
      return this._cachedMeta.rAxisID;
    }
  }, {
    key: "getValueScaleId",
    value: function getValueScaleId() {
      return this._cachedMeta.rAxisID;
    }
  }, {
    key: "update",
    value: function update(mode) {
      var arcs = this._cachedMeta.data;
      this._updateRadius();
      this.updateElements(arcs, 0, mode);
    }
  }, {
    key: "_updateRadius",
    value: function _updateRadius() {
      var me = this;
      var chart = me.chart;
      var chartArea = chart.chartArea;
      var opts = chart.options;
      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
      var outerRadius = Math.max(minSize / 2, 0);
      var innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
      var radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
      me.outerRadius = outerRadius - radiusLength * me.index;
      me.innerRadius = me.outerRadius - radiusLength;
    }
  }, {
    key: "updateElements",
    value: function updateElements(arcs, start, mode) {
      var me = this;
      var reset = mode === 'reset';
      var chart = me.chart;
      var dataset = me.getDataset();
      var opts = chart.options;
      var animationOpts = opts.animation;
      var scale = chart.scales.r;
      var centerX = scale.xCenter;
      var centerY = scale.yCenter;
      var datasetStartAngle = getStartAngleRadians(opts.startAngle);
      var angle = datasetStartAngle;
      var i;
      me._cachedMeta.count = me.countVisibleElements();
      for (i = 0; i < start; ++i) {
        angle += me._computeAngle(i);
      }
      for (i = 0; i < arcs.length; i++) {
        var arc = arcs[i];
        var index = start + i;
        var startAngle = angle;
        var endAngle = angle + me._computeAngle(index);
        var outerRadius = this.chart.getDataVisibility(index) ? scale.getDistanceFromCenterForValue(dataset.data[index]) : 0;
        angle = endAngle;
        if (reset) {
          if (animationOpts.animateScale) {
            outerRadius = 0;
          }
          if (animationOpts.animateRotate) {
            startAngle = datasetStartAngle;
            endAngle = datasetStartAngle;
          }
        }
        var properties = {
          x: centerX,
          y: centerY,
          innerRadius: 0,
          outerRadius: outerRadius,
          startAngle: startAngle,
          endAngle: endAngle,
          options: me.resolveDataElementOptions(index)
        };
        me.updateElement(arc, index, properties, mode);
      }
    }
  }, {
    key: "countVisibleElements",
    value: function countVisibleElements() {
      var _this2 = this;
      var dataset = this.getDataset();
      var meta = this._cachedMeta;
      var count = 0;
      meta.data.forEach(function (element, index) {
        if (!isNaN(dataset.data[index]) && _this2.chart.getDataVisibility(index)) {
          count++;
        }
      });
      return count;
    }
  }, {
    key: "_computeAngle",
    value: function _computeAngle(index) {
      var me = this;
      var meta = me._cachedMeta;
      var count = meta.count;
      var dataset = me.getDataset();
      if (isNaN(dataset.data[index]) || !this.chart.getDataVisibility(index)) {
        return 0;
      }
      var context = {
        chart: me.chart,
        dataIndex: index,
        dataset: dataset,
        datasetIndex: me.index
      };
      return resolve([me.chart.options.elements.arc.angle, 2 * Math.PI / count], context, index);
    }
  }]);
  return PolarAreaController;
}(DatasetController);
PolarAreaController.prototype.dataElementType = Arc;
PolarAreaController.prototype.dataElementOptions = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];

defaults.set('pie', clone(defaults.doughnut));
defaults.set('pie', {
  cutoutPercentage: 0
});

defaults.set('radar', {
  spanGaps: false,
  scales: {
    r: {
      type: 'radialLinear'
    }
  },
  elements: {
    line: {
      tension: 0
    }
  }
});
var RadarController = function (_DatasetController) {
  _inherits(RadarController, _DatasetController);
  var _super = _createSuper(RadarController);
  function RadarController() {
    _classCallCheck(this, RadarController);
    return _super.apply(this, arguments);
  }
  _createClass(RadarController, [{
    key: "getIndexScaleId",
    value: function getIndexScaleId() {
      return this._cachedMeta.rAxisID;
    }
  }, {
    key: "getValueScaleId",
    value: function getValueScaleId() {
      return this._cachedMeta.rAxisID;
    }
  }, {
    key: "getLabelAndValue",
    value: function getLabelAndValue(index) {
      var me = this;
      var vScale = me._cachedMeta.vScale;
      var parsed = me.getParsed(index);
      return {
        label: vScale.getLabels()[index],
        value: '' + vScale.getLabelForValue(parsed[vScale.axis])
      };
    }
  }, {
    key: "update",
    value: function update(mode) {
      var me = this;
      var meta = me._cachedMeta;
      var line = meta.dataset;
      var points = meta.data || [];
      var labels = meta.iScale.getLabels();
      var properties = {
        points: points,
        _loop: true,
        _fullLoop: labels.length === points.length,
        options: me.resolveDatasetElementOptions()
      };
      me.updateElement(line, undefined, properties, mode);
      me.updateElements(points, 0, mode);
      line.updateControlPoints(me.chart.chartArea);
    }
  }, {
    key: "updateElements",
    value: function updateElements(points, start, mode) {
      var me = this;
      var dataset = me.getDataset();
      var scale = me.chart.scales.r;
      var reset = mode === 'reset';
      var i;
      for (i = 0; i < points.length; i++) {
        var point = points[i];
        var index = start + i;
        var options = me.resolveDataElementOptions(index);
        var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
        var x = reset ? scale.xCenter : pointPosition.x;
        var y = reset ? scale.yCenter : pointPosition.y;
        var properties = {
          x: x,
          y: y,
          angle: pointPosition.angle,
          skip: isNaN(x) || isNaN(y),
          options: options
        };
        me.updateElement(point, index, properties, mode);
      }
    }
  }, {
    key: "resolveDatasetElementOptions",
    value: function resolveDatasetElementOptions(active) {
      var me = this;
      var config = me._config;
      var options = me.chart.options;
      var values = _get(_getPrototypeOf(RadarController.prototype), "resolveDatasetElementOptions", this).call(this, active);
      values.spanGaps = valueOrDefault(config.spanGaps, options.spanGaps);
      values.tension = valueOrDefault(config.lineTension, options.elements.line.tension);
      return values;
    }
  }]);
  return RadarController;
}(DatasetController);
RadarController.prototype.datasetElementType = Line;
RadarController.prototype.dataElementType = Point;
RadarController.prototype.datasetElementOptions = ['backgroundColor', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'borderWidth', 'fill'];
RadarController.prototype.dataElementOptions = {
  backgroundColor: 'pointBackgroundColor',
  borderColor: 'pointBorderColor',
  borderWidth: 'pointBorderWidth',
  hitRadius: 'pointHitRadius',
  hoverBackgroundColor: 'pointHoverBackgroundColor',
  hoverBorderColor: 'pointHoverBorderColor',
  hoverBorderWidth: 'pointHoverBorderWidth',
  hoverRadius: 'pointHoverRadius',
  pointStyle: 'pointStyle',
  radius: 'pointRadius',
  rotation: 'pointRotation'
};

defaults.set('scatter', {
  scales: {
    x: {
      type: 'linear'
    },
    y: {
      type: 'linear'
    }
  },
  datasets: {
    showLine: false
  },
  tooltips: {
    callbacks: {
      title: function title() {
        return '';
      },
      label: function label(item) {
        return '(' + item.label + ', ' + item.value + ')';
      }
    }
  }
});

var PI$3 = Math.PI;
var DOUBLE_PI$2 = PI$3 * 2;
defaults.set('dashBoard', _extends({}, clone(defaults.doughnut), {
  dashBoard: {
    total: 100,
    tickNumber: 4,
    showTickNum: false,
    tickColor: '#ccc',
    tickNumberColor: '#ccc',
    titleColor: '#777',
    labelColor: '#777'
  },
  cutoutPercentage: 75,
  circumference: Math.PI * 1.6,
  rotation: -Math.PI * 1.3,
  legend: {
    display: false
  },
  tooltips: {
    enabled: false
  }
}));
var RoundDoughnut = function (_DoughnutController) {
  _inherits(RoundDoughnut, _DoughnutController);
  var _super = _createSuper(RoundDoughnut);
  function RoundDoughnut(chart, datasetIndex) {
    var _this;
    _classCallCheck(this, RoundDoughnut);
    _this = _super.call(this, chart, datasetIndex);
    _this.content = chart.ctx;
    _this.options = chart.options;
    return _this;
  }
  _createClass(RoundDoughnut, [{
    key: "draw",
    value: function draw() {
      var me = this;
      var meta = me._cachedMeta;
      var rects = meta.data;
      this._drawBack(rects[0]);
      for (var i = 0; i < 1; ++i) {
        if (!isNaN(me.getParsed(i))) {
          this._drawCircle(rects[i]);
        }
      }
    }
  }, {
    key: "setDefaultBack",
    value: function setDefaultBack(arc) {
      var backArc = {};
      _extends(backArc, arc);
      _extends(backArc, {
        startAngle: Math.PI * 0.7,
        endAngle: Math.PI * 2.3,
        options: {
          backgroundColor: '#f0f1f5'
        }
      });
      return backArc;
    }
  }, {
    key: "calculateCircumference",
    value: function calculateCircumference(value) {
      var total = this.options.dashBoard.total;
      if (total > 0 && !isNaN(value)) {
        return DOUBLE_PI$2 * (Math.abs(value) / total);
      }
      return 0;
    }
  }, {
    key: "_drawCircle",
    value: function _drawCircle(arc, r) {
      var fill = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var line = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var width = this.chart.chartArea.width;
      var _this$options$dashBoa = this.options.dashBoard,
          tickNumber = _this$options$dashBoa.tickNumber,
          total = _this$options$dashBoa.total,
          showTickNum = _this$options$dashBoa.showTickNum;
      var x = arc.x,
          y = arc.y,
          options = arc.options,
          startAngle = arc.startAngle,
          endAngle = arc.endAngle;
      this.content.beginPath();
      if (line) {
        this.content.moveTo(x, y);
      }
      this.content.arc(x, y, r || x / 2.1, startAngle, endAngle);
      var lineWidth = showTickNum ? width / 20 : width / 15;
      this.content.lineWidth = line || fill ? 1 : lineWidth;
      this.content.strokeStyle = options.backgroundColor;
      if (fill) {
        this.content.fillStyle = options.backgroundColor;
        this.content.fill();
      }
      this.content.stroke();
    }
  }, {
    key: "_drawBack",
    value: function _drawBack(arc) {
      this._drawCircle(this.setDefaultBack(arc));
      this._drawTicks(arc);
      this._drawTitle();
    }
  }, {
    key: "_drawTitle",
    value: function _drawTitle() {
      var _this$chart$chartArea = this.chart.chartArea,
          height = _this$chart$chartArea.height,
          width = _this$chart$chartArea.width;
      var meta = this._cachedMeta;
      var _this$options$dashBoa2 = this.options.dashBoard,
          label = _this$options$dashBoa2.label,
          labelColor = _this$options$dashBoa2.labelColor,
          title = _this$options$dashBoa2.title,
          titleColor = _this$options$dashBoa2.titleColor;
      var titleX = width / 2;
      this._drawFont(title, titleX, height * 0.42, width / 20, titleColor);
      this._drawFont(label || meta._parsed[0], titleX, height * 0.68, width / 10, labelColor);
    }
  }, {
    key: "_drawFont",
    value: function _drawFont(text, x, y, size, color) {
      this.content.textAlign = 'center';
      this.content.fillStyle = color;
      this.content.font = "".concat(size, "px serif");
      this.content.fillText(text, x, y);
    }
  }, {
    key: "_drawTicks",
    value: function _drawTicks(arc) {
      var _this$options$dashBoa3 = this.options.dashBoard,
          tickNumber = _this$options$dashBoa3.tickNumber,
          total = _this$options$dashBoa3.total,
          showTickNum = _this$options$dashBoa3.showTickNum,
          tickNumberColor = _this$options$dashBoa3.tickNumberColor,
          tickColor = _this$options$dashBoa3.tickColor,
          tickList = _this$options$dashBoa3.tickList;
      var x = arc.x,
          y = arc.y,
          startAngle = arc.startAngle;
      var r = x / 2;
      var step = total / tickNumber;
      var moveX = showTickNum ? 0.84 : 0.8;
      var lineY = showTickNum ? 0.77 : 0.73;
      var length = !!tickList && showTickNum ? tickList.length - 1 : tickNumber;
      for (var i = 0; i <= length; i++) {
        var currentAngle = startAngle + i * (1.6 * Math.PI / length);
        var cosAngle = Math.cos(currentAngle) * r;
        var sinAngle = Math.sin(currentAngle) * r;
        this.content.strokeStyle = tickColor;
        this.content.save();
        this.content.beginPath();
        this.content.lineWidth = 1;
        this.content.moveTo(cosAngle * moveX + x, sinAngle * moveX + y);
        this.content.lineTo(cosAngle * lineY + x, sinAngle * lineY + y);
        if (showTickNum) {
          var textX = cosAngle * 0.69 + x;
          var textY = sinAngle * 0.69 + y;
          var text = !!tickList ? tickList[i] : step * i;
          this._drawFont(text, textX, textY, x / 30, tickNumberColor);
        }
        this.content.stroke();
      }
    }
  }]);
  return RoundDoughnut;
}(DoughnutController);
RoundDoughnut.prototype.dataElementType = Arc;
RoundDoughnut.prototype.dataElementOptions = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth', 'borderCapStyle', 'label'];

var controllers = {
  bar: BarController,
  bubble: BubbleController,
  doughnut: DoughnutController,
  horizontalBar: HorizontalBarController,
  line: LineController,
  polarArea: PolarAreaController,
  pie: DoughnutController,
  radar: RadarController,
  scatter: LineController,
  dashBoard: RoundDoughnut
};

function _lookup(table, value) {
  var hi = table.length - 1;
  var lo = 0;
  var mid;
  while (hi - lo > 1) {
    mid = lo + hi >> 1;
    if (table[mid] < value) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return {
    lo: lo,
    hi: hi
  };
}
function _lookupByKey(table, key, value) {
  var hi = table.length - 1;
  var lo = 0;
  var mid;
  while (hi - lo > 1) {
    mid = lo + hi >> 1;
    if (table[mid][key] < value) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return {
    lo: lo,
    hi: hi
  };
}
function _rlookupByKey(table, key, value) {
  var hi = table.length - 1;
  var lo = 0;
  var mid;
  while (hi - lo > 1) {
    mid = lo + hi >> 1;
    if (table[mid][key] < value) {
      hi = mid;
    } else {
      lo = mid;
    }
  }
  return {
    lo: lo,
    hi: hi
  };
}
function _filterBetween(values, min, max) {
  var start = 0;
  var end = values.length;
  while (start < end && values[start] < min) {
    start++;
  }
  while (end > start && values[end - 1] > max) {
    end--;
  }
  return start > 0 || end < values.length ? values.slice(start, end) : values;
}

function getRelativePosition$1(e, chart) {
  if ('native' in e) {
    return {
      x: e.x,
      y: e.y
    };
  }
  return helpers.dom.getRelativePosition(e, chart);
}
function evaluateAllVisibleItems(chart, handler) {
  var metasets = chart.getSortedVisibleDatasetMetas();
  var index, data, element;
  for (var i = 0, ilen = metasets.length; i < ilen; ++i) {
    var _metasets$i = metasets[i];
    index = _metasets$i.index;
    data = _metasets$i.data;
    for (var j = 0, jlen = data.length; j < jlen; ++j) {
      element = data[j];
      if (!element.skip) {
        handler(element, index, j);
      }
    }
  }
}
function binarySearch(metaset, axis, value, intersect) {
  var controller = metaset.controller,
      data = metaset.data,
      _sorted = metaset._sorted;
  var iScale = controller._cachedMeta.iScale;
  if (iScale && axis === iScale.axis && _sorted && data.length) {
    var lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
    if (!intersect) {
      return lookupMethod(data, axis, value);
    } else if (controller._sharedOptions) {
      var el = data[0];
      var range = typeof el.getRange === 'function' && el.getRange(axis);
      if (range) {
        var start = lookupMethod(data, axis, value - range);
        var end = lookupMethod(data, axis, value + range);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }
  return {
    lo: 0,
    hi: data.length - 1
  };
}
function optimizedEvaluateItems(chart, axis, position, handler, intersect) {
  var metasets = chart.getSortedVisibleDatasetMetas();
  var value = position[axis];
  for (var i = 0, ilen = metasets.length; i < ilen; ++i) {
    var _metasets$i2 = metasets[i],
        index = _metasets$i2.index,
        data = _metasets$i2.data;
    var _binarySearch = binarySearch(metasets[i], axis, value, intersect),
        lo = _binarySearch.lo,
        hi = _binarySearch.hi;
    for (var j = lo; j <= hi; ++j) {
      var element = data[j];
      if (!element.skip) {
        handler(element, index, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  var useX = axis.indexOf('x') !== -1;
  var useY = axis.indexOf('y') !== -1;
  return function (pt1, pt2) {
    var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position, axis, useFinalPosition) {
  var items = [];
  if (!_isPointInArea(position, chart.chartArea)) {
    return items;
  }
  var evaluationFunc = function evaluationFunc(element, datasetIndex, index) {
    if (element.inRange(position.x, position.y, useFinalPosition)) {
      items.push({
        element: element,
        datasetIndex: datasetIndex,
        index: index
      });
    }
  };
  optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);
  return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition) {
  var distanceMetric = getDistanceMetricForAxis(axis);
  var minDistance = Number.POSITIVE_INFINITY;
  var items = [];
  if (!_isPointInArea(position, chart.chartArea)) {
    return items;
  }
  var evaluationFunc = function evaluationFunc(element, datasetIndex, index) {
    if (intersect && !element.inRange(position.x, position.y, useFinalPosition)) {
      return;
    }
    var center = element.getCenterPoint(useFinalPosition);
    var distance = distanceMetric(position, center);
    if (distance < minDistance) {
      items = [{
        element: element,
        datasetIndex: datasetIndex,
        index: index
      }];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({
        element: element,
        datasetIndex: datasetIndex,
        index: index
      });
    }
  };
  optimizedEvaluateItems(chart, axis, position, evaluationFunc);
  return items;
}
var Interaction = {
  modes: {
    index: function index(chart, e, options, useFinalPosition) {
      var position = getRelativePosition$1(e, chart);
      var axis = options.axis || 'x';
      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition) : getNearestItems(chart, position, axis, false, useFinalPosition);
      var elements = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach(function (meta) {
        var index = items[0].index;
        var element = meta.data[index];
        if (element && !element.skip) {
          elements.push({
            element: element,
            datasetIndex: meta.index,
            index: index
          });
        }
      });
      return elements;
    },
    dataset: function dataset(chart, e, options, useFinalPosition) {
      var position = getRelativePosition$1(e, chart);
      var axis = options.axis || 'xy';
      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition) : getNearestItems(chart, position, axis, false, useFinalPosition);
      if (items.length > 0) {
        var datasetIndex = items[0].datasetIndex;
        var data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (var i = 0; i < data.length; ++i) {
          items.push({
            element: data[i],
            datasetIndex: datasetIndex,
            index: i
          });
        }
      }
      return items;
    },
    point: function point(chart, e, options, useFinalPosition) {
      var position = getRelativePosition$1(e, chart);
      var axis = options.axis || 'xy';
      return getIntersectItems(chart, position, axis, useFinalPosition);
    },
    nearest: function nearest(chart, e, options, useFinalPosition) {
      var position = getRelativePosition$1(e, chart);
      var axis = options.axis || 'xy';
      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);
    },
    x: function x(chart, e, options, useFinalPosition) {
      var position = getRelativePosition$1(e, chart);
      var items = [];
      var intersectsItem = false;
      evaluateAllVisibleItems(chart, function (element, datasetIndex, index) {
        if (element.inXRange(position.x, useFinalPosition)) {
          items.push({
            element: element,
            datasetIndex: datasetIndex,
            index: index
          });
        }
        if (element.inRange(position.x, position.y, useFinalPosition)) {
          intersectsItem = true;
        }
      });
      if (options.intersect && !intersectsItem) {
        return [];
      }
      return items;
    },
    y: function y(chart, e, options, useFinalPosition) {
      var position = getRelativePosition$1(e, chart);
      var items = [];
      var intersectsItem = false;
      evaluateAllVisibleItems(chart, function (element, datasetIndex, index) {
        if (element.inYRange(position.y, useFinalPosition)) {
          items.push({
            element: element,
            datasetIndex: datasetIndex,
            index: index
          });
        }
        if (element.inRange(position.x, position.y, useFinalPosition)) {
          intersectsItem = true;
        }
      });
      if (options.intersect && !intersectsItem) {
        return [];
      }
      return items;
    }
  }
};

var STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];
function filterByPosition(array, position) {
  return array.filter(function (v) {
    return v.pos === position;
  });
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter(function (v) {
    return STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis;
  });
}
function sortByWeight(array, reverse) {
  return array.sort(function (a, b) {
    var v0 = reverse ? b : a;
    var v1 = reverse ? a : b;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  var layoutBoxes = [];
  var i, ilen, box;
  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    box = boxes[i];
    layoutBoxes.push({
      index: i,
      box: box,
      pos: box.position,
      horizontal: box.isHorizontal(),
      weight: box.weight
    });
  }
  return layoutBoxes;
}
function setLayoutDims(layouts, params) {
  var i, ilen, layout;
  for (i = 0, ilen = layouts.length; i < ilen; ++i) {
    layout = layouts[i];
    layout.width = layout.horizontal ? layout.box.fullWidth && params.availableWidth : params.vBoxMaxWidth;
    layout.height = layout.horizontal && params.hBoxMaxHeight;
  }
}
function buildLayoutBoxes(boxes) {
  var layoutBoxes = wrapBoxes(boxes);
  var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
  var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
  var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
  var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
  var centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
  var centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
  return {
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, 'chartArea'),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a, b) {
  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function updateDims(chartArea, params, layout) {
  var box = layout.box;
  var maxPadding = chartArea.maxPadding;
  if (layout.size) {
    chartArea[layout.pos] -= layout.size;
  }
  layout.size = layout.horizontal ? box.height : box.width;
  chartArea[layout.pos] += layout.size;
  if (box.getPadding) {
    var boxPadding = box.getPadding();
    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
  }
  var newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
  var newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');
  if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
    chartArea.w = newWidth;
    chartArea.h = newHeight;
    return layout.horizontal ? newWidth !== chartArea.w : newHeight !== chartArea.h;
  }
}
function handleMaxPadding(chartArea) {
  var maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos('top');
  chartArea.x += updatePos('left');
  updatePos('right');
  updatePos('bottom');
}
function getMargins(horizontal, chartArea) {
  var maxPadding = chartArea.maxPadding;
  function marginForPositions(positions) {
    var margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions.forEach(function (pos) {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);
}
function fitBoxes(boxes, chartArea, params) {
  var refitBoxes = [];
  var i, ilen, layout, box, refit, changed;
  for (i = 0, ilen = boxes.length; i < ilen; ++i) {
    layout = boxes[i];
    box = layout.box;
    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
    if (updateDims(chartArea, params, layout)) {
      changed = true;
      if (refitBoxes.length) {
        refit = true;
      }
    }
    if (!box.fullWidth) {
      refitBoxes.push(layout);
    }
  }
  return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
}
function placeBoxes(boxes, chartArea, params) {
  var userPadding = params.padding;
  var x = chartArea.x;
  var y = chartArea.y;
  var i, ilen, layout, box;
  for (i = 0, ilen = boxes.length; i < ilen; ++i) {
    layout = boxes[i];
    box = layout.box;
    if (layout.horizontal) {
      box.left = box.fullWidth ? userPadding.left : chartArea.left;
      box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
      box.top = y;
      box.bottom = y + box.height;
      box.width = box.right - box.left;
      y = box.bottom;
    } else {
      box.left = x;
      box.right = x + box.width;
      box.top = chartArea.top;
      box.bottom = chartArea.top + chartArea.h;
      box.height = box.bottom - box.top;
      x = box.right;
    }
  }
  chartArea.x = x;
  chartArea.y = y;
}
defaults.set('layout', {
  padding: {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
});
var layouts = {
  addBox: function addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item.fullWidth = item.fullWidth || false;
    item.position = item.position || 'top';
    item.weight = item.weight || 0;
    item._layers = item._layers || function () {
      return [{
        z: 0,
        draw: function draw(chartArea) {
          item.draw(chartArea);
        }
      }];
    };
    chart.boxes.push(item);
  },
  removeBox: function removeBox(chart, layoutItem) {
    var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index !== -1) {
      chart.boxes.splice(index, 1);
    }
  },
  configure: function configure(chart, item, options) {
    var props = ['fullWidth', 'position', 'weight'];
    var ilen = props.length;
    var i = 0;
    var prop;
    for (; i < ilen; ++i) {
      prop = props[i];
      if (Object.prototype.hasOwnProperty.call(options, prop)) {
        item[prop] = options[prop];
      }
    }
  },
  update: function update(chart, width, height) {
    if (!chart) {
      return;
    }
    var layoutOptions = chart.options.layout || {};
    var padding = toPadding(layoutOptions.padding);
    var availableWidth = width - padding.width;
    var availableHeight = height - padding.height;
    var boxes = buildLayoutBoxes(chart.boxes);
    var verticalBoxes = boxes.vertical;
    var horizontalBoxes = boxes.horizontal;
    var params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding: padding,
      availableWidth: availableWidth,
      vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
      hBoxMaxHeight: availableHeight / 2
    });
    var chartArea = _extends({
      maxPadding: _extends({}, padding),
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(verticalBoxes, chartArea, params);
    if (fitBoxes(horizontalBoxes, chartArea, params)) {
      fitBoxes(verticalBoxes, chartArea, params);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w
    };
    each(boxes.chartArea, function (layout) {
      var box = layout.box;
      _extends(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h);
    });
  }
};

var BasePlatform = function () {
  function BasePlatform() {
    _classCallCheck(this, BasePlatform);
  }
  _createClass(BasePlatform, [{
    key: "acquireContext",
    value: function acquireContext(canvas, options) {}
  }, {
    key: "releaseContext",
    value: function releaseContext(context) {
      return false;
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(chart, type, listener) {}
  }, {
    key: "removeEventListener",
    value: function removeEventListener(chart, type, listener) {}
  }, {
    key: "getDevicePixelRatio",
    value: function getDevicePixelRatio() {
      return 1;
    }
  }]);
  return BasePlatform;
}();

var BasicPlatform = function (_BasePlatform) {
  _inherits(BasicPlatform, _BasePlatform);
  var _super = _createSuper(BasicPlatform);
  function BasicPlatform() {
    _classCallCheck(this, BasicPlatform);
    return _super.apply(this, arguments);
  }
  _createClass(BasicPlatform, [{
    key: "acquireContext",
    value: function acquireContext(item) {
      return item && item.getContext && item.getContext('2d') || null;
    }
  }]);
  return BasicPlatform;
}(BasePlatform);

var MapShim = function () {
  if (typeof Map !== 'undefined') {
    return Map;
  }
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function (entry, index) {
      if (entry[0] === key) {
        result = index;
        return true;
      }
      return false;
    });
    return result;
  }
  return (
    function () {
      function class_1() {
        this.__entries__ = [];
      }
      Object.defineProperty(class_1.prototype, "size", {
        get: function () {
          return this.__entries__.length;
        },
        enumerable: true,
        configurable: true
      });
      class_1.prototype.get = function (key) {
        var index = getIndex(this.__entries__, key);
        var entry = this.__entries__[index];
        return entry && entry[1];
      };
      class_1.prototype.set = function (key, value) {
        var index = getIndex(this.__entries__, key);
        if (~index) {
          this.__entries__[index][1] = value;
        } else {
          this.__entries__.push([key, value]);
        }
      };
      class_1.prototype.delete = function (key) {
        var entries = this.__entries__;
        var index = getIndex(entries, key);
        if (~index) {
          entries.splice(index, 1);
        }
      };
      class_1.prototype.has = function (key) {
        return !!~getIndex(this.__entries__, key);
      };
      class_1.prototype.clear = function () {
        this.__entries__.splice(0);
      };
      class_1.prototype.forEach = function (callback, ctx) {
        if (ctx === void 0) {
          ctx = null;
        }
        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
          var entry = _a[_i];
          callback.call(ctx, entry[1], entry[0]);
        }
      };
      return class_1;
    }()
  );
}();
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;
var global$1 = function () {
  if (typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.Math === Math) {
    return __webpack_require__.g;
  }
  if (typeof self !== 'undefined' && self.Math === Math) {
    return self;
  }
  if (typeof window !== 'undefined' && window.Math === Math) {
    return window;
  }
  return Function('return this')();
}();
var requestAnimationFrame$1 = function () {
  if (typeof requestAnimationFrame === 'function') {
    return requestAnimationFrame.bind(global$1);
  }
  return function (callback) {
    return setTimeout(function () {
      return callback(Date.now());
    }, 1000 / 60);
  };
}();
var trailingTimeout = 2;
function throttle(callback, delay) {
  var leadingCall = false,
      trailingCall = false,
      lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
var REFRESH_DELAY = 20;
var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
var ResizeObserverController =
function () {
  function ResizeObserverController() {
    this.connected_ = false;
    this.mutationEventsAdded_ = false;
    this.mutationsObserver_ = null;
    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
  }
  ResizeObserverController.prototype.addObserver = function (observer) {
    if (!~this.observers_.indexOf(observer)) {
      this.observers_.push(observer);
    }
    if (!this.connected_) {
      this.connect_();
    }
  };
  ResizeObserverController.prototype.removeObserver = function (observer) {
    var observers = this.observers_;
    var index = observers.indexOf(observer);
    if (~index) {
      observers.splice(index, 1);
    }
    if (!observers.length && this.connected_) {
      this.disconnect_();
    }
  };
  ResizeObserverController.prototype.refresh = function () {
    var changesDetected = this.updateObservers_();
    if (changesDetected) {
      this.refresh();
    }
  };
  ResizeObserverController.prototype.updateObservers_ = function () {
    var activeObservers = this.observers_.filter(function (observer) {
      return observer.gatherActive(), observer.hasActive();
    });
    activeObservers.forEach(function (observer) {
      return observer.broadcastActive();
    });
    return activeObservers.length > 0;
  };
  ResizeObserverController.prototype.connect_ = function () {
    if (!isBrowser || this.connected_) {
      return;
    }
    document.addEventListener('transitionend', this.onTransitionEnd_);
    window.addEventListener('resize', this.refresh);
    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener('DOMSubtreeModified', this.refresh);
      this.mutationEventsAdded_ = true;
    }
    this.connected_ = true;
  };
  ResizeObserverController.prototype.disconnect_ = function () {
    if (!isBrowser || !this.connected_) {
      return;
    }
    document.removeEventListener('transitionend', this.onTransitionEnd_);
    window.removeEventListener('resize', this.refresh);
    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }
    if (this.mutationEventsAdded_) {
      document.removeEventListener('DOMSubtreeModified', this.refresh);
    }
    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };
  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
    var _b = _a.propertyName,
        propertyName = _b === void 0 ? '' : _b;
    var isReflowProperty = transitionKeys.some(function (key) {
      return !!~propertyName.indexOf(key);
    });
    if (isReflowProperty) {
      this.refresh();
    }
  };
  ResizeObserverController.getInstance = function () {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController();
    }
    return this.instance_;
  };
  ResizeObserverController.instance_ = null;
  return ResizeObserverController;
}();
var defineConfigurable = function (target, props) {
  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
    var key = _a[_i];
    Object.defineProperty(target, key, {
      value: props[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target;
};
var getWindowOf = function (target) {
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
  return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function (size, position) {
    var value = styles['border-' + position + '-width'];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles) {
  var positions = ['top', 'right', 'bottom', 'left'];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles['padding-' + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth,
      clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width),
      height = toFloat(styles.height);
  if (styles.boxSizing === 'border-box') {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, 'left', 'right') + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function () {
  if (typeof SVGGraphicsElement !== 'undefined') {
    return function (target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  }
  return function (target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
  };
}();
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a) {
  var x = _a.x,
      y = _a.y,
      width = _a.width,
      height = _a.height;
  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x: x,
    y: y,
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
function createRectInit(x, y, width, height) {
  return {
    x: x,
    y: y,
    width: width,
    height: height
  };
}
var ResizeObservation =
function () {
  function ResizeObservation(target) {
    this.broadcastWidth = 0;
    this.broadcastHeight = 0;
    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target;
  }
  ResizeObservation.prototype.isActive = function () {
    var rect = getContentRect(this.target);
    this.contentRect_ = rect;
    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };
  ResizeObservation.prototype.broadcastRect = function () {
    var rect = this.contentRect_;
    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;
    return rect;
  };
  return ResizeObservation;
}();
var ResizeObserverEntry =
function () {
  function ResizeObserverEntry(target, rectInit) {
    var contentRect = createReadOnlyRect(rectInit);
    defineConfigurable(this, {
      target: target,
      contentRect: contentRect
    });
  }
  return ResizeObserverEntry;
}();
var ResizeObserverSPI =
function () {
  function ResizeObserverSPI(callback, controller, callbackCtx) {
    this.activeObservations_ = [];
    this.observations_ = new MapShim();
    if (typeof callback !== 'function') {
      throw new TypeError('The callback provided as parameter 1 is not a function.');
    }
    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  }
  ResizeObserverSPI.prototype.observe = function (target) {
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    }
    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (observations.has(target)) {
      return;
    }
    observations.set(target, new ResizeObservation(target));
    this.controller_.addObserver(this);
    this.controller_.refresh();
  };
  ResizeObserverSPI.prototype.unobserve = function (target) {
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    }
    if (typeof Element === 'undefined' || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (!observations.has(target)) {
      return;
    }
    observations.delete(target);
    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };
  ResizeObserverSPI.prototype.disconnect = function () {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };
  ResizeObserverSPI.prototype.gatherActive = function () {
    var _this = this;
    this.clearActive();
    this.observations_.forEach(function (observation) {
      if (observation.isActive()) {
        _this.activeObservations_.push(observation);
      }
    });
  };
  ResizeObserverSPI.prototype.broadcastActive = function () {
    if (!this.hasActive()) {
      return;
    }
    var ctx = this.callbackCtx_;
    var entries = this.activeObservations_.map(function (observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx, entries, ctx);
    this.clearActive();
  };
  ResizeObserverSPI.prototype.clearActive = function () {
    this.activeObservations_.splice(0);
  };
  ResizeObserverSPI.prototype.hasActive = function () {
    return this.activeObservations_.length > 0;
  };
  return ResizeObserverSPI;
}();
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
var ResizeObserver =
function () {
  function ResizeObserver(callback) {
    if (!(this instanceof ResizeObserver)) {
      throw new TypeError('Cannot call a class as a function.');
    }
    if (!arguments.length) {
      throw new TypeError('1 argument required, but only 0 present.');
    }
    var controller = ResizeObserverController.getInstance();
    var observer = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer);
  }
  return ResizeObserver;
}();
['observe', 'unobserve', 'disconnect'].forEach(function (method) {
  ResizeObserver.prototype[method] = function () {
    var _a;
    return (_a = observers.get(this))[method].apply(_a, arguments);
  };
});
var index = function () {
  if (typeof global$1.ResizeObserver !== 'undefined') {
    return global$1.ResizeObserver;
  }
  return ResizeObserver;
}();

var EXPANDO_KEY = '$chartjs';
var EVENT_TYPES = {
  touchstart: 'mousedown',
  touchmove: 'mousemove',
  touchend: 'mouseup',
  pointerenter: 'mouseenter',
  pointerdown: 'mousedown',
  pointermove: 'mousemove',
  pointerup: 'mouseup',
  pointerleave: 'mouseout',
  pointerout: 'mouseout'
};
function readUsedSize(element, property) {
  var value = helpers.dom.getStyle(element, property);
  var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : undefined;
}
function initCanvas(canvas, config) {
  var style = canvas.style;
  var renderHeight = canvas.getAttribute('height');
  var renderWidth = canvas.getAttribute('width');
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || 'block';
  style.boxSizing = style.boxSizing || 'border-box';
  if (renderWidth === null || renderWidth === '') {
    var displayWidth = readUsedSize(canvas, 'width');
    if (displayWidth !== undefined) {
      canvas.width = displayWidth;
    }
  }
  if (renderHeight === null || renderHeight === '') {
    if (canvas.style.height === '') {
      canvas.height = canvas.width / (config.options.aspectRatio || 2);
    } else {
      var displayHeight = readUsedSize(canvas, 'height');
      if (displayHeight !== undefined) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
var supportsEventListenerOptions = function () {
  var passiveSupported = false;
  try {
    var options = {
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    window.addEventListener('test', null, options);
    window.removeEventListener('test', null, options);
  } catch (e) {
  }
  return passiveSupported;
}();
var eventListenerOptions = supportsEventListenerOptions ? {
  passive: true
} : false;
function addListener(node, type, listener) {
  node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(node, type, listener) {
  node.removeEventListener(type, listener, eventListenerOptions);
}
function createEvent(type, chart, x, y, nativeEvent) {
  return {
    type: type,
    chart: chart,
    native: nativeEvent || null,
    x: x !== undefined ? x : null,
    y: y !== undefined ? y : null
  };
}
function fromNativeEvent(event, chart) {
  var type = EVENT_TYPES[event.type] || event.type;
  var pos = helpers.dom.getRelativePosition(event, chart);
  return createEvent(type, chart, pos.x, pos.y, event);
}
function throttled(fn, thisArg) {
  var ticking = false;
  var args = [];
  return function () {
    for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {
      rest[_key] = arguments[_key];
    }
    args = Array.prototype.slice.call(rest);
    if (!ticking) {
      ticking = true;
      helpers.requestAnimFrame.call(window, function () {
        ticking = false;
        fn.apply(thisArg, args);
      });
    }
  };
}
function watchForResize(element, fn) {
  var resize = throttled(function (width, height) {
    var w = element.clientWidth;
    fn(width, height);
    if (w < element.clientWidth) {
      fn();
    }
  }, window);
  var observer = new index(function (entries) {
    var entry = entries[0];
    resize(entry.contentRect.width, entry.contentRect.height);
  });
  observer.observe(element);
  return observer;
}
function watchForAttachment(element, fn) {
  var observer = new MutationObserver(function (entries) {
    var parent = _getParentNode(element);
    entries.forEach(function (entry) {
      for (var i = 0; i < entry.addedNodes.length; i++) {
        var added = entry.addedNodes[i];
        if (added === element || added === parent) {
          fn(entry.target);
        }
      }
    });
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function watchForDetachment(element, fn) {
  var parent = _getParentNode(element);
  if (!parent) {
    return;
  }
  var observer = new MutationObserver(function (entries) {
    entries.forEach(function (entry) {
      for (var i = 0; i < entry.removedNodes.length; i++) {
        if (entry.removedNodes[i] === element) {
          fn();
          break;
        }
      }
    });
  });
  observer.observe(parent, {
    childList: true
  });
  return observer;
}
function removeObserver(proxies, type) {
  var observer = proxies[type];
  if (observer) {
    observer.disconnect();
    proxies[type] = undefined;
  }
}
function unlistenForResize(proxies) {
  removeObserver(proxies, 'attach');
  removeObserver(proxies, 'detach');
  removeObserver(proxies, 'resize');
}
function listenForResize(canvas, proxies, listener) {
  var detached = function detached() {
    return listenForResize(canvas, proxies, listener);
  };
  unlistenForResize(proxies);
  var container = _getParentNode(canvas);
  if (container) {
    proxies.resize = watchForResize(container, listener);
    proxies.detach = watchForDetachment(canvas, detached);
  } else {
    proxies.attach = watchForAttachment(canvas, function () {
      removeObserver(proxies, 'attach');
      var parent = _getParentNode(canvas);
      proxies.resize = watchForResize(parent, listener);
      proxies.detach = watchForDetachment(canvas, detached);
    });
  }
}
var DomPlatform = function (_BasePlatform) {
  _inherits(DomPlatform, _BasePlatform);
  var _super = _createSuper(DomPlatform);
  function DomPlatform() {
    _classCallCheck(this, DomPlatform);
    return _super.apply(this, arguments);
  }
  _createClass(DomPlatform, [{
    key: "acquireContext",
    value: function acquireContext(canvas, config) {
      var context = canvas && canvas.getContext && canvas.getContext('2d');
      if (context && context.canvas === canvas) {
        initCanvas(canvas, config);
        return context;
      }
      return null;
    }
  }, {
    key: "releaseContext",
    value: function releaseContext(context) {
      var canvas = context.canvas;
      if (!canvas[EXPANDO_KEY]) {
        return false;
      }
      var initial = canvas[EXPANDO_KEY].initial;
      ['height', 'width'].forEach(function (prop) {
        var value = initial[prop];
        if (helpers.isNullOrUndef(value)) {
          canvas.removeAttribute(prop);
        } else {
          canvas.setAttribute(prop, value);
        }
      });
      var style = initial.style || {};
      Object.keys(style).forEach(function (key) {
        canvas.style[key] = style[key];
      });
      canvas.width = canvas.width;
      delete canvas[EXPANDO_KEY];
      return true;
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(chart, type, listener) {
      this.removeEventListener(chart, type);
      var canvas = chart.canvas;
      var container = chart.container;
      var proxies = chart.$proxies || (chart.$proxies = {});
      if (type === 'resize') {
        return listenForResize(canvas, proxies, listener);
      }
      var proxy = proxies[type] = throttled(function (event) {
        listener(fromNativeEvent(event, chart));
      }, chart);
      addListener(container || canvas, type, proxy);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(chart, type) {
      var canvas = chart.canvas;
      var container = chart.container;
      var proxies = chart.$proxies || (chart.$proxies = {});
      if (type === 'resize') {
        return unlistenForResize(proxies);
      }
      var proxy = proxies[type];
      if (!proxy) {
        return;
      }
      removeListener(container || canvas, type, proxy);
      proxies[type] = undefined;
    }
  }, {
    key: "getDevicePixelRatio",
    value: function getDevicePixelRatio() {
      return window.devicePixelRatio;
    }
  }]);
  return DomPlatform;
}(BasePlatform);

var platforms = {
  BasicPlatform: BasicPlatform,
  DomPlatform: DomPlatform,
  BasePlatform: BasePlatform
};

defaults.set('plugins', {});
var PluginService = function () {
  function PluginService() {
    _classCallCheck(this, PluginService);
    this._plugins = [];
    this._cacheId = 0;
  }
  _createClass(PluginService, [{
    key: "register",
    value: function register(plugins) {
      var p = this._plugins;
      [].concat(plugins).forEach(function (plugin) {
        if (p.indexOf(plugin) === -1) {
          p.push(plugin);
        }
      });
      this._cacheId++;
    }
  }, {
    key: "unregister",
    value: function unregister(plugins) {
      var p = this._plugins;
      [].concat(plugins).forEach(function (plugin) {
        var idx = p.indexOf(plugin);
        if (idx !== -1) {
          p.splice(idx, 1);
        }
      });
      this._cacheId++;
    }
  }, {
    key: "clear",
    value: function clear() {
      this._plugins = [];
      this._cacheId++;
    }
  }, {
    key: "count",
    value: function count() {
      return this._plugins.length;
    }
  }, {
    key: "getAll",
    value: function getAll() {
      return this._plugins;
    }
  }, {
    key: "notify",
    value: function notify(chart, hook, args) {
      var descriptors = this._descriptors(chart);
      var ilen = descriptors.length;
      var i, descriptor, plugin, params, method;
      for (i = 0; i < ilen; ++i) {
        descriptor = descriptors[i];
        plugin = descriptor.plugin;
        method = plugin[hook];
        if (typeof method === 'function') {
          params = [chart].concat(args || []);
          params.push(descriptor.options);
          if (method.apply(plugin, params) === false) {
            return false;
          }
        }
      }
      return true;
    }
  }, {
    key: "_descriptors",
    value: function _descriptors(chart) {
      var cache = chart.$plugins || (chart.$plugins = {});
      if (cache.id === this._cacheId) {
        return cache.descriptors;
      }
      var plugins = [];
      var descriptors = [];
      var config = chart && chart.config || {};
      var options = config.options && config.options.plugins || {};
      this._plugins.concat(config.plugins || []).forEach(function (plugin) {
        var idx = plugins.indexOf(plugin);
        if (idx !== -1) {
          return;
        }
        var id = plugin.id;
        var opts = options[id];
        if (opts === false) {
          return;
        }
        if (opts === true) {
          opts = clone(defaults.plugins[id]);
        }
        plugins.push(plugin);
        descriptors.push({
          plugin: plugin,
          options: opts || {}
        });
      });
      cache.descriptors = descriptors;
      cache.id = this._cacheId;
      return descriptors;
    }
  }, {
    key: "invalidate",
    value: function invalidate(chart) {
      delete chart.$plugins;
    }
  }]);
  return PluginService;
}();
var pluginsCore = new PluginService();

var scaleService = {
  constructors: {},
  defaults: {},
  registerScale: function registerScale(scaleConstructor) {
    var me = this;
    var type = scaleConstructor.id;
    me.constructors[type] = scaleConstructor;
    me.defaults[type] = clone(scaleConstructor.defaults);
  },
  getScaleConstructor: function getScaleConstructor(type) {
    return Object.prototype.hasOwnProperty.call(this.constructors, type) ? this.constructors[type] : undefined;
  },
  getScaleDefaults: function getScaleDefaults(type) {
    return Object.prototype.hasOwnProperty.call(this.defaults, type) ? merge({}, [defaults.scale, this.defaults[type]]) : {};
  },
  updateScaleDefaults: function updateScaleDefaults(type, additions) {
    var me = this;
    if (Object.prototype.hasOwnProperty.call(me.defaults, type)) {
      me.defaults[type] = _extends(me.defaults[type], additions);
    }
  },
  addScalesToLayout: function addScalesToLayout(chart) {
    each(chart.scales, function (scale) {
      scale.fullWidth = scale.options.fullWidth;
      scale.position = scale.options.position;
      scale.weight = scale.options.weight;
      layouts.addBox(chart, scale);
    });
  }
};

var AssistContext = function () {
  function AssistContext(ctx, width, height) {
    _classCallCheck(this, AssistContext);
    this.ctx = ctx;
    this.width = width;
    this.height = height;
    this.isClearing = false;
  }
  _createClass(AssistContext, [{
    key: "clear",
    value: function clear() {
      helpers.canvas.clearContext(this.ctx, this.width, this.height);
    }
  }, {
    key: "afterDraw",
    value: function afterDraw() {
      this.isClearing = false;
    }
  }, {
    key: "update",
    value: function update(cfgs) {
      _extends(this, cfgs);
    }
  }]);
  return AssistContext;
}();

var valueOrDefault$1 = helpers.valueOrDefault;
function mergeScaleConfig(config, options) {
  options = options || {};
  var chartDefaults = defaults[config.type] || {
    scales: {}
  };
  var configScales = options.scales || {};
  var firstIDs = {};
  var scales = {};
  Object.keys(configScales).forEach(function (id) {
    var axis = id[0];
    firstIDs[axis] = firstIDs[axis] || id;
    scales[id] = helpers.mergeIf({}, [configScales[id], chartDefaults.scales[axis]]);
  });
  if (options.scale) {
    scales[options.scale.id || 'r'] = helpers.mergeIf({}, [options.scale, chartDefaults.scales.r]);
    firstIDs.r = firstIDs.r || options.scale.id || 'r';
  }
  config.data.datasets.forEach(function (dataset) {
    var datasetDefaults = defaults[dataset.type || config.type] || {
      scales: {}
    };
    var defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach(function (defaultID) {
      var id = dataset[defaultID + 'AxisID'] || firstIDs[defaultID] || defaultID;
      scales[id] = scales[id] || {};
      helpers.mergeIf(scales[id], [configScales[id], defaultScaleOptions[defaultID]]);
    });
  });
  Object.keys(scales).forEach(function (key) {
    var scale = scales[key];
    helpers.mergeIf(scale, scaleService.getScaleDefaults(scale.type));
  });
  return scales;
}
function mergeConfig()
{
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return helpers.merge({}, args, {
    merger: function merger(key, target, source, options) {
      if (key !== 'scales' && key !== 'scale') {
        helpers._merger(key, target, source, options);
      }
    }
  });
}
function initConfig(config) {
  config = config || {};
  var data = config.data = config.data || {
    datasets: [],
    labels: []
  };
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  var scaleConfig = mergeScaleConfig(config, config.options);
  config.options = mergeConfig(defaults, defaults[config.type], config.options || {});
  config.options.scales = scaleConfig;
  return config;
}
function isAnimationDisabled(config) {
  return !config.animation;
}
function updateConfig(chart) {
  var newOptions = chart.options;
  helpers.each(chart.scales, function (scale) {
    layouts.removeBox(chart, scale);
  });
  var scaleConfig = mergeScaleConfig(chart.config, newOptions);
  newOptions = mergeConfig(defaults, defaults[chart.config.type], newOptions);
  chart.options = chart.config.options = newOptions;
  chart.options.scales = scaleConfig;
  chart._animationsDisabled = isAnimationDisabled(newOptions);
  chart.ensureScalesHaveIDs();
  chart.buildOrUpdateScales();
}
var KNOWN_POSITIONS = new Set(['top', 'bottom', 'left', 'right', 'chartArea']);
function positionIsHorizontal(position, axis) {
  return position === 'top' || position === 'bottom' || !KNOWN_POSITIONS.has(position) && axis === 'x';
}
function compare2Level(l1, l2) {
  return function (a, b) {
    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
  };
}
function onAnimationsComplete(ctx) {
  var chart = ctx.chart;
  var animationOptions = chart.options.animation;
  pluginsCore.notify(chart, 'afterRender');
  helpers.callback(animationOptions && animationOptions.onComplete, [ctx], chart);
}
function onAnimationProgress(ctx) {
  var chart = ctx.chart;
  var animationOptions = chart.options.animation;
  helpers.callback(animationOptions && animationOptions.onProgress, [ctx], chart);
}
function isDomSupported() {
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
function getCanvas(item) {
  if (isDomSupported() && typeof item === 'string') {
    item = document.getElementById(item);
  } else if (item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
function initContainer(canvas) {
  if (canvas.parentNode.getAttribute('data-bkcharts-container')) {
    return canvas.parentNode;
  }
  var container = document.createElement('div');
  container.style['position'] = 'relative';
  container.setAttribute('data-bkcharts-container', "".concat(new Date().getTime()));
  canvas.parentNode.append(container, canvas);
  container.append(canvas);
  return container;
}
var BKChart = function () {
  function BKChart(item, config) {
    _classCallCheck(this, BKChart);
    var me = this;
    config = initConfig(config);
    var initialCanvas = getCanvas(item);
    this.container = initContainer(initialCanvas);
    this.assistCanvas = me._initAssistCanvas();
    this.assistCtx = this.assistCanvas.getContext('2d');
    this.platform = me._initializePlatform(initialCanvas, config);
    var context = me.platform.acquireContext(initialCanvas, config);
    var canvas = context && context.canvas;
    var height = canvas && canvas.height;
    var width = canvas && canvas.width;
    this.id = helpers.uid();
    this.ctx = context;
    this.canvas = canvas;
    this.config = config;
    this.width = width;
    this.height = height;
    this.aspectRatio = height ? width / height : null;
    this.options = config.options;
    this._bufferedRender = false;
    this._layers = [];
    this._metasets = [];
    this.boxes = [];
    this.currentDevicePixelRatio = undefined;
    this.chartArea = undefined;
    this.data = undefined;
    this.active = undefined;
    this.lastActive = [];
    this._lastEvent = undefined;
    this._listeners = {};
    this._sortedMetasets = [];
    this._updating = false;
    this.scales = {};
    this.scale = undefined;
    this.$plugins = undefined;
    this.$proxies = {};
    this._hiddenIndices = {};
    this._toolTips = undefined;
    this.assistCtxHelper = new AssistContext(this.assistCtx, this.width, this.height);
    BKChart.instances[me.id] = me;
    Object.defineProperty(me, 'data', {
      get: function get() {
        return me.config.data;
      },
      set: function set(value) {
        me.config.data = value;
      }
    });
    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    Animator$1.listen(me, 'complete', onAnimationsComplete);
    Animator$1.listen(me, 'progress', onAnimationProgress);
    me._initialize();
    me.update();
  }
  _createClass(BKChart, [{
    key: "_initAssistCanvas",
    value: function _initAssistCanvas() {
      var me = this;
      var canvas = me.container.querySelector('[data-bkcharts-assist]');
      if (canvas) {
        return canvas;
      }
      var _canvas = document.createElement('canvas');
      _canvas.setAttribute('style', 'position: absolute; top: 0; left: 0; right: 0; bottom: 0; pointer-events: none;');
      _canvas.setAttribute('data-bkcharts-assist', "".concat(new Date().getTime()));
      me.container.append(_canvas);
      return _canvas;
    }
  }, {
    key: "_initialize",
    value: function _initialize() {
      var me = this;
      if (me.options.responsive) {
        me.container.style['height'] = '100%';
      }
      pluginsCore.notify(me, 'beforeInit');
      if (me.options.responsive) {
        me.resize(true);
      } else {
        helpers.dom.retinaScale(me, me.options.devicePixelRatio);
      }
      me.bindEvents();
      pluginsCore.notify(me, 'afterInit');
      return me;
    }
  }, {
    key: "_initializePlatform",
    value: function _initializePlatform(canvas, config) {
      if (config.platform) {
        return new config.platform();
      } else if (!isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {
        return new BasicPlatform();
      }
      return new DomPlatform();
    }
  }, {
    key: "clear",
    value: function clear() {
      helpers.canvas.clear(this);
      return this;
    }
  }, {
    key: "stop",
    value: function stop() {
      Animator$1.stop(this);
      return this;
    }
  }, {
    key: "resize",
    value: function resize(silent, width, height) {
      var me = this;
      var options = me.options;
      var canvas = me.canvas;
      var aspectRatio = options.maintainAspectRatio && me.aspectRatio;
      if (width === undefined || height === undefined) {
        width = getMaximumWidth(canvas);
        height = getMaximumHeight(canvas);
      }
      var newWidth = Math.max(0, Math.floor(width));
      var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : height));
      var oldRatio = me.currentDevicePixelRatio;
      var newRatio = options.devicePixelRatio || me.platform.getDevicePixelRatio();
      if (me.width === newWidth && me.height === newHeight && oldRatio === newRatio) {
        return;
      }
      canvas.width = me.width = newWidth;
      canvas.height = me.height = newHeight;
      if (canvas.style) {
        canvas.style.width = newWidth + 'px';
        canvas.style.height = newHeight + 'px';
      }
      helpers.dom.retinaScale(me, newRatio);
      if (!silent) {
        var newSize = {
          width: newWidth,
          height: newHeight
        };
        pluginsCore.notify(me, 'resize', [newSize]);
        if (options.onResize) {
          options.onResize(me, newSize);
        }
        me.update('resize');
      }
    }
  }, {
    key: "ensureScalesHaveIDs",
    value: function ensureScalesHaveIDs() {
      var options = this.options;
      var scalesOptions = options.scales || {};
      var scaleOptions = options.scale;
      helpers.each(scalesOptions, function (axisOptions, axisID) {
        axisOptions.id = axisID;
      });
      if (scaleOptions) {
        scaleOptions.id = scaleOptions.id || 'scale';
      }
    }
  }, {
    key: "buildOrUpdateScales",
    value: function buildOrUpdateScales() {
      var me = this;
      var options = me.options;
      var scaleOpts = options.scales;
      var scales = me.scales || {};
      var updated = Object.keys(scales).reduce(function (obj, id) {
        obj[id] = false;
        return obj;
      }, {});
      var items = [];
      if (scaleOpts) {
        items = items.concat(Object.keys(scaleOpts).map(function (axisID) {
          var axisOptions = scaleOpts[axisID];
          var isRadial = axisID.charAt(0).toLowerCase() === 'r';
          var isHorizontal = axisID.charAt(0).toLowerCase() === 'x';
          return {
            options: axisOptions,
            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
          };
        }));
      }
      helpers.each(items, function (item) {
        var scaleOptions = item.options;
        var id = scaleOptions.id;
        var scaleType = valueOrDefault$1(scaleOptions.type, item.dtype);
        if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, scaleOptions.axis || id[0]) !== positionIsHorizontal(item.dposition)) {
          scaleOptions.position = item.dposition;
        }
        updated[id] = true;
        var scale = null;
        if (id in scales && scales[id].type === scaleType) {
          scale = scales[id];
          scale.options = scaleOptions;
          scale.ctx = me.ctx;
          scale.chart = me;
        } else {
          var scaleClass = scaleService.getScaleConstructor(scaleType);
          if (!scaleClass) {
            return;
          }
          scale = new scaleClass({
            id: id,
            type: scaleType,
            options: scaleOptions,
            ctx: me.ctx,
            chart: me
          });
          scales[scale.id] = scale;
        }
        scale.axis = scale.options.position === 'chartArea' ? 'r' : scale.isHorizontal() ? 'x' : 'y';
        scale._userMin = scale.parse(scale.options.min);
        scale._userMax = scale.parse(scale.options.max);
        if (item.isDefault) {
          me.scale = scale;
        }
      });
      helpers.each(updated, function (hasUpdated, id) {
        if (!hasUpdated) {
          delete scales[id];
        }
      });
      me.scales = scales;
      scaleService.addScalesToLayout(this);
    }
  }, {
    key: "_updateMetasetIndex",
    value: function _updateMetasetIndex(meta, index) {
      var metasets = this._metasets;
      var oldIndex = meta.index;
      if (oldIndex !== index) {
        metasets[oldIndex] = metasets[index];
        metasets[index] = meta;
        meta.index = index;
      }
    }
  }, {
    key: "_updateMetasets",
    value: function _updateMetasets() {
      var me = this;
      var metasets = me._metasets;
      var numData = me.data.datasets.length;
      var numMeta = metasets.length;
      if (numMeta > numData) {
        for (var i = numData; i < numMeta; ++i) {
          me._destroyDatasetMeta(i);
        }
        metasets.splice(numData, numMeta - numData);
      }
      me._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
    }
  }, {
    key: "buildOrUpdateControllers",
    value: function buildOrUpdateControllers() {
      var me = this;
      var newControllers = [];
      var datasets = me.data.datasets;
      var i, ilen;
      for (i = 0, ilen = datasets.length; i < ilen; i++) {
        var dataset = datasets[i];
        var meta = me.getDatasetMeta(i);
        var type = dataset.type || me.config.type;
        if (meta.type && meta.type !== type) {
          me._destroyDatasetMeta(i);
          meta = me.getDatasetMeta(i);
        }
        meta.type = type;
        meta.order = dataset.order || 0;
        me._updateMetasetIndex(meta, i);
        meta.label = '' + dataset.label;
        meta.visible = me.isDatasetVisible(i);
        if (meta.controller) {
          meta.controller.updateIndex(i);
          meta.controller.linkScales();
        } else {
          var ControllerClass = controllers[meta.type];
          if (ControllerClass === undefined) {
            throw new Error('"' + meta.type + '" is not a chart type.');
          }
          meta.controller = new ControllerClass(me, i);
          newControllers.push(meta.controller);
        }
      }
      me._updateMetasets();
      return newControllers;
    }
  }, {
    key: "_resetElements",
    value: function _resetElements() {
      var me = this;
      helpers.each(me.data.datasets, function (dataset, datasetIndex) {
        me.getDatasetMeta(datasetIndex).controller.reset();
      }, me);
    }
  }, {
    key: "reset",
    value: function reset() {
      this._resetElements();
      pluginsCore.notify(this, 'reset');
    }
  }, {
    key: "update",
    value: function update(mode) {
      var me = this;
      var i, ilen;
      me._updating = true;
      updateConfig(me);
      pluginsCore.invalidate(me);
      if (pluginsCore.notify(me, 'beforeUpdate') === false) {
        return;
      }
      var newControllers = me.buildOrUpdateControllers();
      for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
        me.getDatasetMeta(i).controller.buildOrUpdateElements();
      }
      me._updateLayout();
      me._updateAssistLayout();
      if (me.options.animation) {
        helpers.each(newControllers, function (controller) {
          controller.reset();
        });
      }
      me._updateDatasets(mode);
      pluginsCore.notify(me, 'afterUpdate');
      me._layers.sort(compare2Level('z', '_idx'));
      if (me._lastEvent) {
        me._eventHandler(me._lastEvent, true);
      }
      me.render();
      me._updating = false;
    }
  }, {
    key: "_updateLayout",
    value: function _updateLayout() {
      var me = this;
      if (pluginsCore.notify(me, 'beforeLayout') === false) {
        return;
      }
      layouts.update(me, me.width, me.height);
      me._layers = [];
      helpers.each(me.boxes, function (box) {
        var _me$_layers;
        if (box.configure) {
          box.configure();
        }
        (_me$_layers = me._layers).push.apply(_me$_layers, _toConsumableArray(box._layers()));
      }, me);
      me._layers.forEach(function (item, index) {
        item._idx = index;
      });
      pluginsCore.notify(me, 'afterLayout');
    }
  }, {
    key: "_updateAssistLayout",
    value: function _updateAssistLayout() {
      var me = this;
      var width = this.width,
          height = this.height;
      me.assistCanvas.width = width;
      me.assistCanvas.height = height;
      me.assistCtxHelper.update({
        width: width,
        height: height
      });
    }
  }, {
    key: "_updateDatasets",
    value: function _updateDatasets(mode) {
      var me = this;
      var isFunction = typeof mode === 'function';
      if (pluginsCore.notify(me, 'beforeDatasetsUpdate') === false) {
        return;
      }
      for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
        me._updateDataset(i, isFunction ? mode({
          datasetIndex: i
        }) : mode);
      }
      pluginsCore.notify(me, 'afterDatasetsUpdate');
    }
  }, {
    key: "_updateDataset",
    value: function _updateDataset(index, mode) {
      var me = this;
      var meta = me.getDatasetMeta(index);
      var args = {
        meta: meta,
        index: index,
        mode: mode
      };
      if (pluginsCore.notify(me, 'beforeDatasetUpdate', [args]) === false) {
        return;
      }
      meta.controller._update(mode);
      pluginsCore.notify(me, 'afterDatasetUpdate', [args]);
    }
  }, {
    key: "render",
    value: function render() {
      var me = this;
      var animationOptions = me.options.animation;
      if (pluginsCore.notify(me, 'beforeRender') === false) {
        return;
      }
      var onComplete = function onComplete() {
        pluginsCore.notify(me, 'afterRender');
        helpers.callback(animationOptions && animationOptions.onComplete, [], me);
      };
      if (Animator$1.has(me)) {
        if (!Animator$1.running(me)) {
          Animator$1.start(me);
        }
      } else {
        me.draw();
        onComplete();
      }
    }
  }, {
    key: "updateAnimator",
    value: function updateAnimator(update) {
      var me = this;
      if (Animator$1.has(me)) {
        if (!Animator$1.running(me)) {
          Animator$1.start(me, update);
        }
      }
    }
  }, {
    key: "draw",
    value: function draw() {
      var me = this;
      var i;
      me.clear();
      me.assistCtxHelper.clear();
      if (me.width <= 0 || me.height <= 0) {
        return;
      }
      if (pluginsCore.notify(me, 'beforeDraw') === false) {
        return;
      }
      var layers = me._layers;
      for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
        layers[i].draw(me.chartArea);
      }
      me._drawDatasets();
      for (; i < layers.length; ++i) {
        layers[i].draw(me.chartArea);
      }
      pluginsCore.notify(me, 'afterDraw');
    }
  }, {
    key: "_getSortedDatasetMetas",
    value: function _getSortedDatasetMetas(filterVisible) {
      var me = this;
      var metasets = me._sortedMetasets;
      var result = [];
      var i, ilen;
      for (i = 0, ilen = metasets.length; i < ilen; ++i) {
        var meta = metasets[i];
        if (!filterVisible || meta.visible) {
          result.push(meta);
        }
      }
      return result;
    }
  }, {
    key: "getSortedVisibleDatasetMetas",
    value: function getSortedVisibleDatasetMetas() {
      return this._getSortedDatasetMetas(true);
    }
  }, {
    key: "_drawDatasets",
    value: function _drawDatasets() {
      var me = this;
      if (pluginsCore.notify(me, 'beforeDatasetsDraw') === false) {
        return;
      }
      var metasets = me.getSortedVisibleDatasetMetas();
      for (var i = metasets.length - 1; i >= 0; --i) {
        me._drawDataset(metasets[i]);
      }
      pluginsCore.notify(me, 'afterDatasetsDraw');
    }
  }, {
    key: "_drawDataset",
    value: function _drawDataset(meta) {
      var me = this;
      var ctx = me.ctx;
      var clip = meta._clip;
      var area = me.chartArea;
      var args = {
        meta: meta,
        index: meta.index
      };
      if (pluginsCore.notify(me, 'beforeDatasetDraw', [args]) === false) {
        return;
      }
      helpers.canvas.clipArea(ctx, {
        left: clip.left === false ? 0 : area.left - clip.left,
        right: clip.right === false ? me.width : area.right + clip.right,
        top: clip.top === false ? 0 : area.top - clip.top,
        bottom: clip.bottom === false ? me.height : area.bottom + clip.bottom
      });
      meta.controller.draw();
      helpers.canvas.unclipArea(ctx);
      pluginsCore.notify(me, 'afterDatasetDraw', [args]);
    }
  }, {
    key: "getElementAtEvent",
    value: function getElementAtEvent(e) {
      return Interaction.modes.nearest(this, e, {
        intersect: true
      });
    }
  }, {
    key: "getElementsAtEvent",
    value: function getElementsAtEvent(e) {
      return Interaction.modes.index(this, e, {
        intersect: true
      });
    }
  }, {
    key: "getElementsAtXAxis",
    value: function getElementsAtXAxis(e) {
      return Interaction.modes.index(this, e, {
        intersect: false
      });
    }
  }, {
    key: "getElementsAtEventForMode",
    value: function getElementsAtEventForMode(e, mode, options, useFinalPosition) {
      var method = Interaction.modes[mode];
      if (typeof method === 'function') {
        return method(this, e, options, useFinalPosition);
      }
      return [];
    }
  }, {
    key: "getDatasetAtEvent",
    value: function getDatasetAtEvent(e) {
      return Interaction.modes.dataset(this, e, {
        intersect: true
      });
    }
  }, {
    key: "getDatasetMeta",
    value: function getDatasetMeta(datasetIndex) {
      var me = this;
      var dataset = me.data.datasets[datasetIndex];
      var metasets = me._metasets;
      var meta = metasets.filter(function (x) {
        return x._dataset === dataset;
      }).pop();
      if (!meta) {
        meta = metasets[datasetIndex] = {
          type: null,
          data: [],
          dataset: null,
          controller: null,
          hidden: null,
          xAxisID: null,
          yAxisID: null,
          order: dataset.order || 0,
          index: datasetIndex,
          _dataset: dataset,
          _parsed: [],
          _sorted: false
        };
      }
      return meta;
    }
  }, {
    key: "getVisibleDatasetCount",
    value: function getVisibleDatasetCount() {
      return this.getSortedVisibleDatasetMetas().length;
    }
  }, {
    key: "isDatasetVisible",
    value: function isDatasetVisible(datasetIndex) {
      var meta = this.getDatasetMeta(datasetIndex);
      return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
    }
  }, {
    key: "setDatasetVisibility",
    value: function setDatasetVisibility(datasetIndex, visible) {
      var meta = this.getDatasetMeta(datasetIndex);
      meta.hidden = !visible;
    }
  }, {
    key: "toggleDataVisibility",
    value: function toggleDataVisibility(index) {
      this._hiddenIndices[index] = !this._hiddenIndices[index];
    }
  }, {
    key: "getDataVisibility",
    value: function getDataVisibility(index) {
      return !this._hiddenIndices[index];
    }
  }, {
    key: "_updateDatasetVisibility",
    value: function _updateDatasetVisibility(datasetIndex, visible) {
      var me = this;
      var mode = visible ? 'show' : 'hide';
      var meta = me.getDatasetMeta(datasetIndex);
      var anims = meta.controller._resolveAnimations(undefined, mode);
      me.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {
        visible: visible
      });
      me.update(function (ctx) {
        return ctx.datasetIndex === datasetIndex ? mode : undefined;
      });
    }
  }, {
    key: "hide",
    value: function hide(datasetIndex) {
      this._updateDatasetVisibility(datasetIndex, false);
    }
  }, {
    key: "show",
    value: function show(datasetIndex) {
      this._updateDatasetVisibility(datasetIndex, true);
    }
  }, {
    key: "_destroyDatasetMeta",
    value: function _destroyDatasetMeta(datasetIndex) {
      var me = this;
      var meta = me._metasets && me._metasets[datasetIndex];
      if (meta) {
        meta.controller._destroy();
        delete me._metasets[datasetIndex];
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var me = this;
      var canvas = me.canvas;
      var i, ilen;
      me.stop();
      Animator$1.remove(me);
      for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
        me._destroyDatasetMeta(i);
      }
      if (canvas) {
        me.unbindEvents();
        helpers.canvas.clear(me);
        helpers.canvas.clearContext(me.assistCtx, me.width, me.height);
        me.platform.releaseContext(me.ctx);
        me.platform.releaseContext(me.assistCtx);
        me.canvas = null;
        me.ctx = null;
        me.assistCtx = null;
        me.assistCanvas = null;
      }
      pluginsCore.notify(me, 'destroy');
      delete BKChart.instances[me.id];
    }
  }, {
    key: "toBase64Image",
    value: function toBase64Image() {
      var _this$canvas;
      return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var me = this;
      var listeners = me._listeners;
      var listener = function listener(e) {
        me._eventHandler(e);
      };
      helpers.each(me.options.events, function (type) {
        me.platform.addEventListener(me, type, listener);
        listeners[type] = listener;
      });
      if (me.options.responsive) {
        listener = function listener(width, height) {
          if (me.canvas) {
            me.resize(false, width, height);
          }
        };
        me.platform.addEventListener(me, 'resize', listener);
        listeners.resize = listener;
      }
    }
  }, {
    key: "unbindEvents",
    value: function unbindEvents() {
      var me = this;
      var listeners = me._listeners;
      if (!listeners) {
        return;
      }
      delete me._listeners;
      helpers.each(listeners, function (listener, type) {
        me.platform.removeEventListener(me, type, listener);
      });
    }
  }, {
    key: "updateHoverStyle",
    value: function updateHoverStyle(items, mode, enabled) {
      var prefix = enabled ? 'set' : 'remove';
      var meta, item, i, ilen;
      if (mode === 'dataset') {
        meta = this.getDatasetMeta(items[0].datasetIndex);
        meta.controller['_' + prefix + 'DatasetHoverStyle']();
      }
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        item = items[i];
        if (item) {
          this.getDatasetMeta(item.datasetIndex).controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
        }
      }
    }
  }, {
    key: "_updateHoverStyles",
    value: function _updateHoverStyles() {
      var me = this;
      var options = me.options || {};
      var hoverOptions = options.hover;
      if (me.lastActive.length) {
        me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
      }
      if (me.active.length && hoverOptions.mode) {
        me.updateHoverStyle(me.active, hoverOptions.mode, true);
      }
    }
  }, {
    key: "_eventHandler",
    value: function _eventHandler(e, replay) {
      var me = this;
      if (pluginsCore.notify(me, 'beforeEvent', [e, replay]) === false) {
        return;
      }
      me._handleEvent(e, replay);
      pluginsCore.notify(me, 'afterEvent', [e, replay]);
      if (me.options.speedMode) {
        me.updateAnimator(false);
      } else {
        me.render();
      }
      return me;
    }
  }, {
    key: "_handleEvent",
    value: function _handleEvent(e, replay) {
      var me = this;
      var options = me.options;
      var hoverOptions = options.hover;
      var useFinalPosition = replay;
      var changed = false;
      if (e.type === 'mouseout') {
        me.active = [];
        me._lastEvent = null;
      } else {
        me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
        me._lastEvent = e.type === 'click' ? me._lastEvent : e;
      }
      helpers.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);
      if (e.type === 'mouseup' || e.type === 'click') {
        if (options.onClick && helpers.canvas._isPointInArea(e, me.chartArea)) {
          options.onClick.call(me, e.native, me.active);
        }
      }
      changed = !helpers._elementsEqual(me.active, me.lastActive);
      if (changed || replay) {
        me._updateHoverStyles();
      }
      me.lastActive = me.active;
      return changed;
    }
  }]);
  return BKChart;
}();
_defineProperty(BKChart, "instances", {});

function abstract() {
  throw new Error('This method is not implemented: either no adapter can be found or an incomplete integration was provided.');
}
var DateAdapter = function () {
  function DateAdapter(options) {
    _classCallCheck(this, DateAdapter);
    this.options = options || {};
  }
  _createClass(DateAdapter, [{
    key: "formats",
    value: function formats() {
      return abstract();
    }
  }, {
    key: "parse",
    value: function parse(value, format) {
      return abstract();
    }
  }, {
    key: "format",
    value: function format(timestamp, _format, options) {
      return abstract();
    }
  }, {
    key: "add",
    value: function add(timestamp, amount, unit) {
      return abstract();
    }
  }, {
    key: "diff",
    value: function diff(a, b, unit) {
      return abstract();
    }
  }, {
    key: "startOf",
    value: function startOf(timestamp, unit, weekday) {
      return abstract();
    }
  }, {
    key: "endOf",
    value: function endOf(timestamp, unit) {
      return abstract();
    }
  }]);
  return DateAdapter;
}();
DateAdapter.override = function (members) {
  _extends(DateAdapter.prototype, members);
};
var _adapters = {
  _date: DateAdapter
};

var formatters = {
  values: function values(value) {
    return isArray(value) ? value : '' + value;
  },
  numeric: function numeric(tickValue, index, ticks) {
    if (tickValue === 0) {
      return '0';
    }
    var delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
    if (Math.abs(delta) > 1 && tickValue !== Math.floor(tickValue)) {
      delta = tickValue - Math.floor(tickValue);
    }
    var logDelta = log10(Math.abs(delta));
    var maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
    var minTick = Math.min(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
    var locale = this.chart.options.locale;
    if (maxTick < 1e-4 || minTick > 1e+7) {
      var logTick = log10(Math.abs(tickValue));
      var numExponential = Math.floor(logTick) - Math.floor(logDelta);
      numExponential = Math.max(Math.min(numExponential, 20), 0);
      return tickValue.toExponential(numExponential);
    }
    var numDecimal = -1 * Math.floor(logDelta);
    numDecimal = Math.max(Math.min(numDecimal, 20), 0);
    return new Intl.NumberFormat(locale, {
      minimumFractionDigits: numDecimal,
      maximumFractionDigits: numDecimal
    }).format(tickValue);
  }
};
formatters.logarithmic = function (tickValue, index, ticks) {
  if (tickValue === 0) {
    return '0';
  }
  var remain = tickValue / Math.pow(10, Math.floor(log10(tickValue)));
  if (remain === 1 || remain === 2 || remain === 5) {
    return formatters.numeric.call(this, tickValue, index, ticks);
  }
  return '';
};
var Ticks = {
  formatters: formatters
};

defaults.set('scale', {
  display: true,
  offset: false,
  reverse: false,
  beginAtZero: false,
  gridLines: {
    display: true,
    color: 'rgba(0,0,0,0.1)',
    lineWidth: 1,
    drawBorder: true,
    drawOnChartArea: true,
    drawTicks: true,
    tickMarkLength: 10,
    offsetGridLines: false,
    borderDash: [],
    borderDashOffset: 0.0
  },
  scaleLabel: {
    display: false,
    labelString: '',
    padding: {
      top: 4,
      bottom: 4
    }
  },
  ticks: {
    minRotation: 0,
    maxRotation: 50,
    mirror: false,
    lineWidth: 0,
    strokeStyle: '',
    padding: 0,
    display: true,
    autoSkip: true,
    autoSkipPadding: 0,
    labelOffset: 0,
    callback: Ticks.formatters.values,
    minor: {},
    major: {}
  }
});
function sample(arr, numItems) {
  var result = [];
  var increment = arr.length / numItems;
  var len = arr.length;
  var i = 0;
  for (; i < len; i += increment) {
    result.push(arr[Math.floor(i)]);
  }
  return result;
}
function getPixelForGridLine(scale, index, offsetGridLines) {
  var length = scale.ticks.length;
  var validIndex = Math.min(index, length - 1);
  var start = scale._startPixel;
  var end = scale._endPixel;
  var epsilon = 1e-6;
  var lineValue = scale.getPixelForTick(validIndex);
  var offset;
  if (offsetGridLines) {
    if (length === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index === 0) {
      offset = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
    }
    lineValue += validIndex < index ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length) {
  each(caches, function (cache) {
    var gc = cache.gc;
    var gcLen = gc.length / 2;
    var i;
    if (gcLen > length) {
      for (i = 0; i < gcLen; ++i) {
        delete cache.data[gc[i]];
      }
      gc.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options) {
  return options.drawTicks ? options.tickMarkLength : 0;
}
function getScaleLabelHeight(options) {
  if (!options.display) {
    return 0;
  }
  var font = _parseFont(options);
  var padding = toPadding(options.padding);
  return font.lineHeight + padding.height;
}
function getEvenSpacing(arr) {
  var len = arr.length;
  var i, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i = 1; i < len; ++i) {
    if (arr[i] - arr[i - 1] !== diff) {
      return false;
    }
  }
  return diff;
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  var evenMajorSpacing = getEvenSpacing(majorIndices);
  var spacing = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }
  var factors = _factorize(evenMajorSpacing);
  for (var i = 0, ilen = factors.length - 1; i < ilen; i++) {
    var factor = factors[i];
    if (factor > spacing) {
      return factor;
    }
  }
  return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
  var result = [];
  var i, ilen;
  for (i = 0, ilen = ticks.length; i < ilen; i++) {
    if (ticks[i].major) {
      result.push(i);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
  var count = 0;
  var next = majorIndices[0];
  var i;
  spacing = Math.ceil(spacing);
  for (i = 0; i < ticks.length; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = majorIndices[count * spacing];
    }
  }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  var start = valueOrDefault(majorStart, 0);
  var end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
  var count = 0;
  var length, i, next;
  spacing = Math.ceil(spacing);
  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }
  next = start;
  while (next < 0) {
    count++;
    next = Math.round(start + count * spacing);
  }
  for (i = Math.max(start, 0); i < end; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = Math.round(start + count * spacing);
    }
  }
}
var Scale = function (_Element) {
  _inherits(Scale, _Element);
  var _super = _createSuper(Scale);
  function Scale(cfg) {
    var _this;
    _classCallCheck(this, Scale);
    _this = _super.call(this);
    _this.id = cfg.id;
    _this.type = cfg.type;
    _this.options = cfg.options;
    _this.ctx = cfg.ctx;
    _this.chart = cfg.chart;
    _this.top = undefined;
    _this.bottom = undefined;
    _this.left = undefined;
    _this.right = undefined;
    _this.width = undefined;
    _this.height = undefined;
    _this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    _this.maxWidth = undefined;
    _this.maxHeight = undefined;
    _this.paddingTop = undefined;
    _this.paddingBottom = undefined;
    _this.paddingLeft = undefined;
    _this.paddingRight = undefined;
    _this.axis = undefined;
    _this.labelRotation = undefined;
    _this.min = undefined;
    _this.max = undefined;
    _this.ticks = [];
    _this._gridLineItems = null;
    _this._labelItems = null;
    _this._labelSizes = null;
    _this._length = 0;
    _this._longestTextCache = {};
    _this._startPixel = undefined;
    _this._endPixel = undefined;
    _this._reversePixels = false;
    _this._userMax = undefined;
    _this._userMin = undefined;
    _this._ticksLength = 0;
    _this._borderValue = 0;
    return _this;
  }
  _createClass(Scale, [{
    key: "parse",
    value: function parse(raw, index) {
      return raw;
    }
  }, {
    key: "parseObject",
    value: function parseObject(obj, axis, index) {
      if (obj[axis] !== undefined) {
        return this.parse(obj[axis], index);
      }
      return null;
    }
  }, {
    key: "getUserBounds",
    value: function getUserBounds() {
      var min = this._userMin;
      var max = this._userMax;
      if (isNullOrUndef(min) || isNaN(min)) {
        min = Number.POSITIVE_INFINITY;
      }
      if (isNullOrUndef(max) || isNaN(max)) {
        max = Number.NEGATIVE_INFINITY;
      }
      return {
        min: min,
        max: max,
        minDefined: isNumberFinite(min),
        maxDefined: isNumberFinite(max)
      };
    }
  }, {
    key: "getMinMax",
    value: function getMinMax(canStack) {
      var me = this;
      var _me$getUserBounds = me.getUserBounds(),
          min = _me$getUserBounds.min,
          max = _me$getUserBounds.max,
          minDefined = _me$getUserBounds.minDefined,
          maxDefined = _me$getUserBounds.maxDefined;
      var minmax;
      if (minDefined && maxDefined) {
        return {
          min: min,
          max: max
        };
      }
      var metas = me.getMatchingVisibleMetas();
      for (var i = 0, ilen = metas.length; i < ilen; ++i) {
        minmax = metas[i].controller.getMinMax(me, canStack);
        if (!minDefined) {
          min = Math.min(min, minmax.min);
        }
        if (!maxDefined) {
          max = Math.max(max, minmax.max);
        }
      }
      return {
        min: min,
        max: max
      };
    }
  }, {
    key: "invalidateCaches",
    value: function invalidateCaches() {}
  }, {
    key: "getPadding",
    value: function getPadding() {
      var me = this;
      return {
        left: me.paddingLeft || 0,
        top: me.paddingTop || 0,
        right: me.paddingRight || 0,
        bottom: me.paddingBottom || 0
      };
    }
  }, {
    key: "getTicks",
    value: function getTicks() {
      return this.ticks;
    }
  }, {
    key: "getLabels",
    value: function getLabels() {
      var data = this.chart.data;
      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    }
  }, {
    key: "beforeUpdate",
    value: function beforeUpdate() {
      callback(this.options.beforeUpdate, [this]);
    }
  }, {
    key: "update",
    value: function update(maxWidth, maxHeight, margins) {
      var me = this;
      var tickOpts = me.options.ticks;
      var sampleSize = tickOpts.sampleSize;
      me.beforeUpdate();
      me.maxWidth = maxWidth;
      me.maxHeight = maxHeight;
      me._margins = _extends({
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, margins);
      me.ticks = null;
      me._labelSizes = null;
      me._gridLineItems = null;
      me._labelItems = null;
      me.beforeSetDimensions();
      me.setDimensions();
      me.afterSetDimensions();
      me.beforeDataLimits();
      me.determineDataLimits();
      me.afterDataLimits();
      me.beforeBuildTicks();
      me.ticks = me.buildTicks() || [];
      me.afterBuildTicks();
      var samplingEnabled = sampleSize < me.ticks.length;
      me._convertTicksToLabels(samplingEnabled ? sample(me.ticks, sampleSize) : me.ticks);
      me.configure();
      me.beforeCalculateLabelRotation();
      me.calculateLabelRotation();
      me.afterCalculateLabelRotation();
      me.beforeFit();
      me.fit();
      me.afterFit();
      me.ticks = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(me.ticks) : me.ticks;
      if (samplingEnabled) {
        me._convertTicksToLabels(me.ticks);
      }
      me.afterUpdate();
    }
  }, {
    key: "configure",
    value: function configure() {
      var me = this;
      var reversePixels = me.options.reverse;
      var startPixel, endPixel;
      if (me.isHorizontal()) {
        startPixel = me.left;
        endPixel = me.right;
      } else {
        startPixel = me.top;
        endPixel = me.bottom;
        reversePixels = !reversePixels;
      }
      me._startPixel = startPixel;
      me._endPixel = endPixel;
      me._reversePixels = reversePixels;
      me._length = endPixel - startPixel;
    }
  }, {
    key: "afterUpdate",
    value: function afterUpdate() {
      callback(this.options.afterUpdate, [this]);
    }
  }, {
    key: "beforeSetDimensions",
    value: function beforeSetDimensions() {
      callback(this.options.beforeSetDimensions, [this]);
    }
  }, {
    key: "setDimensions",
    value: function setDimensions() {
      var me = this;
      if (me.isHorizontal()) {
        me.width = me.maxWidth;
        me.left = 0;
        me.right = me.width;
      } else {
        me.height = me.maxHeight;
        me.top = 0;
        me.bottom = me.height;
      }
      me.paddingLeft = 0;
      me.paddingTop = 0;
      me.paddingRight = 0;
      me.paddingBottom = 0;
    }
  }, {
    key: "afterSetDimensions",
    value: function afterSetDimensions() {
      callback(this.options.afterSetDimensions, [this]);
    }
  }, {
    key: "beforeDataLimits",
    value: function beforeDataLimits() {
      callback(this.options.beforeDataLimits, [this]);
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {}
  }, {
    key: "afterDataLimits",
    value: function afterDataLimits() {
      callback(this.options.afterDataLimits, [this]);
    }
  }, {
    key: "beforeBuildTicks",
    value: function beforeBuildTicks() {
      callback(this.options.beforeBuildTicks, [this]);
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      return [];
    }
  }, {
    key: "afterBuildTicks",
    value: function afterBuildTicks() {
      callback(this.options.afterBuildTicks, [this]);
    }
  }, {
    key: "beforeTickToLabelConversion",
    value: function beforeTickToLabelConversion() {
      callback(this.options.beforeTickToLabelConversion, [this]);
    }
  }, {
    key: "generateTickLabels",
    value: function generateTickLabels(ticks) {
      var me = this;
      var tickOpts = me.options.ticks;
      var i, ilen, tick;
      for (i = 0, ilen = ticks.length; i < ilen; i++) {
        tick = ticks[i];
        tick.label = callback(tickOpts.callback, [tick.value, i, ticks], me);
      }
    }
  }, {
    key: "afterTickToLabelConversion",
    value: function afterTickToLabelConversion() {
      callback(this.options.afterTickToLabelConversion, [this]);
    }
  }, {
    key: "beforeCalculateLabelRotation",
    value: function beforeCalculateLabelRotation() {
      callback(this.options.beforeCalculateLabelRotation, [this]);
    }
  }, {
    key: "calculateLabelRotation",
    value: function calculateLabelRotation() {
      var me = this;
      var options = me.options;
      var tickOpts = options.ticks;
      var numTicks = me.ticks.length;
      var minRotation = tickOpts.minRotation || 0;
      var maxRotation = tickOpts.maxRotation;
      var labelRotation = minRotation;
      var tickWidth, maxHeight, maxLabelDiagonal;
      if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
        me.labelRotation = minRotation;
        return;
      }
      var labelSizes = me._getLabelSizes();
      var maxLabelWidth = labelSizes.widest.width;
      var maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;
      var maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
      tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);
      if (maxLabelWidth + 6 > tickWidth) {
        tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
        maxHeight = me.maxHeight - getTickMarkLength(options.gridLines) - tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
        maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
        labelRotation = toDegrees(Math.min(Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)), Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)));
        labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
      }
      me.labelRotation = labelRotation;
    }
  }, {
    key: "afterCalculateLabelRotation",
    value: function afterCalculateLabelRotation() {
      callback(this.options.afterCalculateLabelRotation, [this]);
    }
  }, {
    key: "beforeFit",
    value: function beforeFit() {
      callback(this.options.beforeFit, [this]);
    }
  }, {
    key: "fit",
    value: function fit() {
      var me = this;
      var minSize = {
        width: 0,
        height: 0
      };
      var chart = me.chart;
      var opts = me.options;
      var tickOpts = opts.ticks;
      var scaleLabelOpts = opts.scaleLabel;
      var gridLineOpts = opts.gridLines;
      var display = me._isVisible();
      var labelsBelowTicks = opts.position !== 'top' && me.axis === 'x';
      var isHorizontal = me.isHorizontal();
      if (isHorizontal) {
        minSize.width = me.maxWidth;
      } else if (display) {
        minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
      }
      if (!isHorizontal) {
        minSize.height = me.maxHeight;
      } else if (display) {
        minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
      }
      if (tickOpts.display && display && me.ticks.length) {
        var labelSizes = me._getLabelSizes();
        var firstLabelSize = labelSizes.first;
        var lastLabelSize = labelSizes.last;
        var widestLabelSize = labelSizes.widest;
        var highestLabelSize = labelSizes.highest;
        var lineSpace = highestLabelSize.offset * 0.8;
        var tickPadding = tickOpts.padding;
        if (isHorizontal) {
          var isRotated = me.labelRotation !== 0;
          var angleRadians = toRadians(me.labelRotation);
          var cosRotation = Math.cos(angleRadians);
          var sinRotation = Math.sin(angleRadians);
          var labelHeight = sinRotation * widestLabelSize.width + cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0)) + (isRotated ? 0 : lineSpace);
          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
          var offsetLeft = me.getPixelForTick(0) - me.left;
          var offsetRight = me.right - me.getPixelForTick(me.ticks.length - 1);
          var paddingLeft, paddingRight;
          if (isRotated) {
            paddingLeft = labelsBelowTicks ? cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset : sinRotation * (firstLabelSize.height - firstLabelSize.offset);
            paddingRight = labelsBelowTicks ? sinRotation * (lastLabelSize.height - lastLabelSize.offset) : cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
          } else {
            paddingLeft = firstLabelSize.width / 2;
            paddingRight = lastLabelSize.width / 2;
          }
          me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
          me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
        } else {
          var labelWidth = tickOpts.mirror ? 0 :
          widestLabelSize.width + tickPadding + lineSpace;
          minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);
          me.paddingTop = firstLabelSize.height / 2;
          me.paddingBottom = lastLabelSize.height / 2;
        }
      }
      me._handleMargins();
      if (isHorizontal) {
        me.width = me._length = chart.width - me._margins.left - me._margins.right;
        me.height = minSize.height;
      } else {
        me.width = minSize.width;
        me.height = me._length = chart.height - me._margins.top - me._margins.bottom;
      }
    }
  }, {
    key: "_handleMargins",
    value: function _handleMargins() {
      var me = this;
      if (me._margins) {
        me._margins.left = Math.max(me.paddingLeft, me._margins.left);
        me._margins.top = Math.max(me.paddingTop, me._margins.top);
        me._margins.right = Math.max(me.paddingRight, me._margins.right);
        me._margins.bottom = Math.max(me.paddingBottom, me._margins.bottom);
      }
    }
  }, {
    key: "afterFit",
    value: function afterFit() {
      callback(this.options.afterFit, [this]);
    }
  }, {
    key: "isHorizontal",
    value: function isHorizontal() {
      var _this$options = this.options,
          axis = _this$options.axis,
          position = _this$options.position;
      return position === 'top' || position === 'bottom' || axis === 'x';
    }
  }, {
    key: "isFullWidth",
    value: function isFullWidth() {
      return this.options.fullWidth;
    }
  }, {
    key: "_convertTicksToLabels",
    value: function _convertTicksToLabels(ticks) {
      var me = this;
      me.beforeTickToLabelConversion();
      me.generateTickLabels(ticks);
      me.afterTickToLabelConversion();
    }
  }, {
    key: "_getLabelSizes",
    value: function _getLabelSizes() {
      var me = this;
      var labelSizes = me._labelSizes;
      if (!labelSizes) {
        me._labelSizes = labelSizes = me._computeLabelSizes();
      }
      return labelSizes;
    }
  }, {
    key: "_computeLabelSizes",
    value: function _computeLabelSizes() {
      var me = this;
      var ctx = me.ctx;
      var caches = me._longestTextCache;
      var sampleSize = me.options.ticks.sampleSize;
      var widths = [];
      var heights = [];
      var offsets = [];
      var ticks = me.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      var length = ticks.length;
      var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
      for (i = 0; i < length; ++i) {
        label = ticks[i].label;
        tickFont = me._resolveTickFontOptions(i);
        ctx.font = fontString = tickFont.string;
        cache = caches[fontString] = caches[fontString] || {
          data: {},
          gc: []
        };
        lineHeight = tickFont.lineHeight;
        width = height = 0;
        if (!isNullOrUndef(label) && !isArray(label)) {
          width = _measureText(ctx, cache.data, cache.gc, width, label);
          height = lineHeight;
        } else if (isArray(label)) {
          for (j = 0, jlen = label.length; j < jlen; ++j) {
            nestedLabel = label[j];
            if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
              width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
              height += lineHeight;
            }
          }
        }
        widths.push(width);
        heights.push(height);
        offsets.push(lineHeight / 2);
      }
      garbageCollect(caches, length);
      var widest = widths.indexOf(Math.max.apply(null, widths));
      var highest = heights.indexOf(Math.max.apply(null, heights));
      function valueAt(idx) {
        return {
          width: widths[idx] || 0,
          height: heights[idx] || 0,
          offset: offsets[idx] || 0
        };
      }
      return {
        first: valueAt(0),
        last: valueAt(length - 1),
        widest: valueAt(widest),
        highest: valueAt(highest)
      };
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(value) {
      return value;
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(value) {
      return NaN;
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(pixel) {}
  }, {
    key: "getPixelForTick",
    value: function getPixelForTick(index) {
      var ticks = this.ticks;
      if (index < 0 || index > ticks.length - 1) {
        return null;
      }
      return this.getPixelForValue(ticks[index].value);
    }
  }, {
    key: "getPixelForDecimal",
    value: function getPixelForDecimal(decimal) {
      var me = this;
      if (me._reversePixels) {
        decimal = 1 - decimal;
      }
      return me._startPixel + decimal * me._length;
    }
  }, {
    key: "getDecimalForPixel",
    value: function getDecimalForPixel(pixel) {
      var decimal = (pixel - this._startPixel) / this._length;
      return this._reversePixels ? 1 - decimal : decimal;
    }
  }, {
    key: "getBasePixel",
    value: function getBasePixel() {
      return this.getPixelForValue(this.getBaseValue());
    }
  }, {
    key: "getBaseValue",
    value: function getBaseValue() {
      var min = this.min,
          max = this.max;
      return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
    }
  }, {
    key: "_autoSkip",
    value: function _autoSkip(ticks) {
      var me = this;
      var tickOpts = me.options.ticks;
      var ticksLimit = tickOpts.maxTicksLimit || me._length / me._tickSize();
      var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
      var numMajorIndices = majorIndices.length;
      var first = majorIndices[0];
      var last = majorIndices[numMajorIndices - 1];
      var newTicks = [];
      if (numMajorIndices > ticksLimit) {
        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
        return newTicks;
      }
      var spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
      if (numMajorIndices > 0) {
        var i, ilen;
        var avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
        for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
          skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
        }
        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
        return newTicks;
      }
      skip(ticks, newTicks, spacing);
      return newTicks;
    }
  }, {
    key: "_tickSize",
    value: function _tickSize() {
      var me = this;
      var optionTicks = me.options.ticks;
      var rot = toRadians(me.labelRotation);
      var cos = Math.abs(Math.cos(rot));
      var sin = Math.abs(Math.sin(rot));
      var labelSizes = me._getLabelSizes();
      var padding = optionTicks.autoSkipPadding || 0;
      var w = labelSizes ? labelSizes.widest.width + padding : 0;
      var h = labelSizes ? labelSizes.highest.height + padding : 0;
      return me.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
    }
  }, {
    key: "_isVisible",
    value: function _isVisible() {
      var display = this.options.display;
      if (display !== 'auto') {
        return !!display;
      }
      return this.getMatchingVisibleMetas().length > 0;
    }
  }, {
    key: "_computeGridLineItems",
    value: function _computeGridLineItems(chartArea) {
      var me = this;
      var axis = me.axis;
      var chart = me.chart;
      var options = me.options;
      var gridLines = options.gridLines,
          position = options.position;
      var offsetGridLines = gridLines.offsetGridLines;
      var isHorizontal = me.isHorizontal();
      var ticks = me.ticks;
      var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);
      var tl = getTickMarkLength(gridLines);
      var items = [];
      var context = {
        scale: me,
        tick: ticks[0]
      };
      var axisWidth = gridLines.drawBorder ? resolve([gridLines.borderWidth, gridLines.lineWidth, 0], context, 0) : 0;
      var axisHalfWidth = axisWidth / 2;
      var alignBorderValue = function alignBorderValue(pixel) {
        return _alignPixel(chart, pixel, axisWidth);
      };
      var borderValue, i, lineValue, alignedLineValue;
      var tx1, ty1, tx2, ty2, x1, y1, x2, y2;
      if (position === 'top') {
        borderValue = alignBorderValue(me.bottom);
        ty1 = me.bottom - tl;
        ty2 = borderValue - axisHalfWidth;
        y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
        y2 = chartArea.bottom;
      } else if (position === 'bottom') {
        borderValue = alignBorderValue(me.top);
        y1 = chartArea.top;
        y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
        ty1 = borderValue + axisHalfWidth;
        ty2 = me.top + tl;
      } else if (position === 'left') {
        borderValue = alignBorderValue(me.right);
        tx1 = me.right - tl;
        tx2 = borderValue - axisHalfWidth;
        x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
        x2 = chartArea.right;
      } else if (position === 'right') {
        borderValue = alignBorderValue(me.left);
        x1 = chartArea.left;
        x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
        tx1 = borderValue + axisHalfWidth;
        tx2 = me.left + tl;
      } else if (axis === 'x') {
        if (position === 'center') {
          borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2);
        } else if (isObject(position)) {
          var positionAxisID = Object.keys(position)[0];
          var value = position[positionAxisID];
          borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));
        }
        y1 = chartArea.top;
        y2 = chartArea.bottom;
        ty1 = borderValue + axisHalfWidth;
        ty2 = ty1 + tl;
      } else if (axis === 'y') {
        if (position === 'center') {
          borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
        } else if (isObject(position)) {
          var _positionAxisID = Object.keys(position)[0];
          var _value = position[_positionAxisID];
          borderValue = alignBorderValue(me.chart.scales[_positionAxisID].getPixelForValue(_value));
        }
        tx1 = borderValue - axisHalfWidth;
        tx2 = tx1 - tl;
        x1 = chartArea.left;
        x2 = chartArea.right;
      }
      for (i = 0; i < ticksLength; ++i) {
        var tick = ticks[i] || {};
        context = {
          scale: me,
          tick: tick
        };
        var lineWidth = resolve([gridLines.lineWidth], context, i);
        var lineColor = resolve([gridLines.color], context, i);
        var borderDash = gridLines.borderDash || [];
        var borderDashOffset = resolve([gridLines.borderDashOffset], context, i);
        lineValue = getPixelForGridLine(me, i, offsetGridLines);
        if (lineValue === undefined) {
          continue;
        }
        alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
        if (isHorizontal) {
          tx1 = tx2 = x1 = x2 = alignedLineValue;
        } else {
          ty1 = ty2 = y1 = y2 = alignedLineValue;
        }
        items.push({
          tx1: tx1,
          ty1: ty1,
          tx2: tx2,
          ty2: ty2,
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2,
          width: lineWidth,
          color: lineColor,
          borderDash: borderDash,
          borderDashOffset: borderDashOffset
        });
      }
      me._ticksLength = ticksLength;
      me._borderValue = borderValue;
      return items;
    }
  }, {
    key: "_computeLabelItems",
    value: function _computeLabelItems(chartArea) {
      var me = this;
      var axis = me.axis;
      var options = me.options;
      var position = options.position,
          optionTicks = options.ticks;
      var isMirrored = optionTicks.mirror;
      var isHorizontal = me.isHorizontal();
      var ticks = me.ticks;
      var tickPadding = optionTicks.padding;
      var tl = getTickMarkLength(options.gridLines);
      var rotation = -toRadians(me.labelRotation);
      var items = [];
      var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
      if (position === 'top') {
        y = me.bottom - tl - tickPadding;
        textAlign = !rotation ? 'center' : 'left';
      } else if (position === 'bottom') {
        y = me.top + tl + tickPadding;
        textAlign = !rotation ? 'center' : 'right';
      } else if (position === 'left') {
        x = me.right - (isMirrored ? 0 : tl) - tickPadding;
        textAlign = isMirrored ? 'left' : 'right';
      } else if (position === 'right') {
        x = me.left + (isMirrored ? 0 : tl) + tickPadding;
        textAlign = isMirrored ? 'right' : 'left';
      } else if (axis === 'x') {
        if (position === 'center') {
          y = (chartArea.top + chartArea.bottom) / 2 + tl + tickPadding;
        } else if (isObject(position)) {
          var positionAxisID = Object.keys(position)[0];
          var value = position[positionAxisID];
          y = me.chart.scales[positionAxisID].getPixelForValue(value) + tl + tickPadding;
        }
        textAlign = !rotation ? 'center' : 'right';
      } else if (axis === 'y') {
        if (position === 'center') {
          x = (chartArea.left + chartArea.right) / 2 - tl - tickPadding;
        } else if (isObject(position)) {
          var _positionAxisID2 = Object.keys(position)[0];
          var _value2 = position[_positionAxisID2];
          x = me.chart.scales[_positionAxisID2].getPixelForValue(_value2);
        }
        textAlign = 'right';
      }
      for (i = 0, ilen = ticks.length; i < ilen; ++i) {
        tick = ticks[i];
        label = tick.label;
        pixel = me.getPixelForTick(i) + optionTicks.labelOffset;
        font = me._resolveTickFontOptions(i);
        lineHeight = font.lineHeight;
        lineCount = isArray(label) ? label.length : 1;
        if (isHorizontal) {
          x = pixel;
          if (position === 'top') {
            textOffset = (Math.sin(rotation) * (lineCount / 2) + 0.5) * lineHeight;
            textOffset -= (rotation === 0 ? lineCount - 0.5 : Math.cos(rotation) * (lineCount / 2)) * lineHeight;
          } else {
            textOffset = Math.sin(rotation) * (lineCount / 2) * lineHeight;
            textOffset += (rotation === 0 ? 0.5 : Math.cos(rotation) * (lineCount / 2)) * lineHeight;
          }
        } else {
          y = pixel;
          textOffset = (1 - lineCount) * lineHeight / 2;
        }
        items.push({
          x: x,
          y: y,
          rotation: rotation,
          label: label,
          font: font,
          textOffset: textOffset,
          textAlign: textAlign
        });
      }
      return items;
    }
  }, {
    key: "drawGrid",
    value: function drawGrid(chartArea) {
      var me = this;
      var gridLines = me.options.gridLines;
      var ctx = me.ctx;
      var chart = me.chart;
      var context = {
        scale: me,
        tick: me.ticks[0]
      };
      var axisWidth = gridLines.drawBorder ? resolve([gridLines.borderWidth, gridLines.lineWidth, 0], context, 0) : 0;
      var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
      var i, ilen;
      if (gridLines.display) {
        for (i = 0, ilen = items.length; i < ilen; ++i) {
          var item = items[i];
          var width = item.width;
          var color = item.color;
          if (width && color) {
            ctx.save();
            ctx.lineWidth = width;
            ctx.strokeStyle = color;
            if (ctx.setLineDash) {
              ctx.setLineDash(item.borderDash);
              ctx.lineDashOffset = item.borderDashOffset;
            }
            ctx.beginPath();
            if (gridLines.drawTicks) {
              ctx.moveTo(item.tx1, item.ty1);
              ctx.lineTo(item.tx2, item.ty2);
            }
            if (gridLines.drawOnChartArea) {
              ctx.moveTo(item.x1, item.y1);
              ctx.lineTo(item.x2, item.y2);
            }
            ctx.stroke();
            ctx.restore();
          }
        }
      }
      if (axisWidth) {
        var firstLineWidth = axisWidth;
        context = {
          scale: me,
          tick: me.ticks[me._ticksLength - 1]
        };
        var lastLineWidth = resolve([gridLines.lineWidth, 1], context, me._ticksLength - 1);
        var borderValue = me._borderValue;
        var x1, x2, y1, y2;
        if (me.isHorizontal()) {
          x1 = _alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
          x2 = _alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
          y1 = y2 = borderValue;
        } else {
          y1 = _alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
          y2 = _alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
          x1 = x2 = borderValue;
        }
        ctx.lineWidth = axisWidth;
        ctx.strokeStyle = resolve([gridLines.borderColor, gridLines.color], context, 0);
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
      }
    }
  }, {
    key: "drawLabels",
    value: function drawLabels(chartArea) {
      var me = this;
      var optionTicks = me.options.ticks;
      if (!optionTicks.display) {
        return;
      }
      var ctx = me.ctx;
      var items = me._labelItems || (me._labelItems = me._computeLabelItems(chartArea));
      var i, j, ilen, jlen;
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        var item = items[i];
        var tickFont = item.font;
        var useStroke = tickFont.lineWidth > 0 && tickFont.strokeStyle !== '';
        ctx.save();
        ctx.translate(item.x, item.y);
        ctx.rotate(item.rotation);
        ctx.font = tickFont.string;
        ctx.fillStyle = tickFont.color;
        ctx.textBaseline = 'middle';
        ctx.textAlign = item.textAlign;
        if (useStroke) {
          ctx.strokeStyle = tickFont.strokeStyle;
          ctx.lineWidth = tickFont.lineWidth;
        }
        var label = item.label;
        var y = item.textOffset;
        if (isArray(label)) {
          for (j = 0, jlen = label.length; j < jlen; ++j) {
            if (useStroke) {
              ctx.strokeText('' + label[j], 0, y);
            }
            ctx.fillText('' + label[j], 0, y);
            y += tickFont.lineHeight;
          }
        } else {
          if (useStroke) {
            ctx.strokeText(label, 0, y);
          }
          ctx.fillText(label, 0, y);
        }
        ctx.restore();
      }
    }
  }, {
    key: "drawTitle",
    value: function drawTitle(chartArea) {
      var me = this;
      var ctx = me.ctx;
      var options = me.options;
      var scaleLabel = options.scaleLabel;
      if (!scaleLabel.display) {
        return;
      }
      var scaleLabelFontColor = valueOrDefault(scaleLabel.fontColor, defaults.fontColor);
      var scaleLabelFont = _parseFont(scaleLabel);
      var scaleLabelPadding = toPadding(scaleLabel.padding);
      var halfLineHeight = scaleLabelFont.lineHeight / 2;
      var scaleLabelAlign = scaleLabel.align;
      var position = options.position;
      var isReverse = me.options.reverse;
      var rotation = 0;
      var textAlign;
      var scaleLabelX, scaleLabelY;
      if (me.isHorizontal()) {
        switch (scaleLabelAlign) {
          case 'start':
            scaleLabelX = me.left + (isReverse ? me.width : 0);
            textAlign = isReverse ? 'right' : 'left';
            break;
          case 'end':
            scaleLabelX = me.left + (isReverse ? 0 : me.width);
            textAlign = isReverse ? 'left' : 'right';
            break;
          default:
            scaleLabelX = me.left + me.width / 2;
            textAlign = 'center';
        }
        scaleLabelY = position === 'top' ? me.top + halfLineHeight + scaleLabelPadding.top : me.bottom - halfLineHeight - scaleLabelPadding.bottom;
      } else {
        var isLeft = position === 'left';
        scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;
        switch (scaleLabelAlign) {
          case 'start':
            scaleLabelY = me.top + (isReverse ? 0 : me.height);
            textAlign = isReverse === isLeft ? 'right' : 'left';
            break;
          case 'end':
            scaleLabelY = me.top + (isReverse ? me.height : 0);
            textAlign = isReverse === isLeft ? 'left' : 'right';
            break;
          default:
            scaleLabelY = me.top + me.height / 2;
            textAlign = 'center';
        }
        rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
      }
      ctx.save();
      ctx.translate(scaleLabelX, scaleLabelY);
      ctx.rotate(rotation);
      ctx.textAlign = textAlign;
      ctx.textBaseline = 'middle';
      ctx.fillStyle = scaleLabelFontColor;
      ctx.font = scaleLabelFont.string;
      ctx.fillText(scaleLabel.labelString, 0, 0);
      ctx.restore();
    }
  }, {
    key: "draw",
    value: function draw(chartArea) {
      var me = this;
      if (!me._isVisible()) {
        return;
      }
      me.drawGrid(chartArea);
      me.drawTitle();
      me.drawLabels(chartArea);
    }
  }, {
    key: "_layers",
    value: function _layers() {
      var me = this;
      var opts = me.options;
      var tz = opts.ticks && opts.ticks.z || 0;
      var gz = opts.gridLines && opts.gridLines.z || 0;
      if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
        return [{
          z: tz,
          draw: function draw(chartArea) {
            me.draw(chartArea);
          }
        }];
      }
      return [{
        z: gz,
        draw: function draw(chartArea) {
          me.drawGrid(chartArea);
          me.drawTitle();
        }
      }, {
        z: tz,
        draw: function draw(chartArea) {
          me.drawLabels(chartArea);
        }
      }];
    }
  }, {
    key: "getMatchingVisibleMetas",
    value: function getMatchingVisibleMetas(type) {
      var me = this;
      var metas = me.chart.getSortedVisibleDatasetMetas();
      var axisID = me.axis + 'AxisID';
      var result = [];
      var i, ilen;
      for (i = 0, ilen = metas.length; i < ilen; ++i) {
        var meta = metas[i];
        if (meta[axisID] === me.id && (!type || meta.type === type)) {
          result.push(meta);
        }
      }
      return result;
    }
  }, {
    key: "_resolveTickFontOptions",
    value: function _resolveTickFontOptions(index) {
      var me = this;
      var options = me.options.ticks;
      var context = {
        chart: me.chart,
        scale: me,
        tick: me.ticks[index],
        index: index
      };
      return _extends(_parseFont({
        fontFamily: resolve([options.fontFamily], context),
        fontSize: resolve([options.fontSize], context),
        fontStyle: resolve([options.fontStyle], context),
        lineHeight: resolve([options.lineHeight], context)
      }), {
        color: resolve([options.fontColor, defaults.fontColor], context),
        lineWidth: resolve([options.lineWidth], context),
        strokeStyle: resolve([options.strokeStyle], context)
      });
    }
  }]);
  return Scale;
}(Element$1);
Scale.prototype._draw = Scale.prototype.draw;

var defaultConfig = {};
var CategoryScale = function (_Scale) {
  _inherits(CategoryScale, _Scale);
  var _super = _createSuper(CategoryScale);
  function CategoryScale(cfg) {
    var _this;
    _classCallCheck(this, CategoryScale);
    _this = _super.call(this, cfg);
    _this._numLabels = 0;
    _this._startValue = undefined;
    _this._valueRange = 0;
    return _this;
  }
  _createClass(CategoryScale, [{
    key: "parse",
    value: function parse(raw, index) {
      var labels = this.getLabels();
      if (labels[index] === raw) {
        return index;
      }
      var first = labels.indexOf(raw);
      var last = labels.lastIndexOf(raw);
      return first === -1 || first !== last ? index : first;
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var me = this;
      var max = me.getLabels().length - 1;
      me.min = Math.max(me._userMin || 0, 0);
      me.max = Math.min(me._userMax || max, max);
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      var me = this;
      var min = me.min;
      var max = me.max;
      var offset = me.options.offset;
      var labels = me.getLabels();
      labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
      me._numLabels = labels.length;
      me._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
      me._startValue = me.min - (offset ? 0.5 : 0);
      return labels.map(function (l) {
        return {
          value: l
        };
      });
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(value) {
      var me = this;
      var labels = me.getLabels();
      if (value >= 0 && value < labels.length) {
        return labels[value];
      }
      return value;
    }
  }, {
    key: "configure",
    value: function configure() {
      var me = this;
      _get(_getPrototypeOf(CategoryScale.prototype), "configure", this).call(this);
      if (!me.isHorizontal()) {
        me._reversePixels = !me._reversePixels;
      }
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(value) {
      var me = this;
      if (typeof value !== 'number') {
        value = me.parse(value);
      }
      return me.getPixelForDecimal((value - me._startValue) / me._valueRange);
    }
  }, {
    key: "getPixelForTick",
    value: function getPixelForTick(index) {
      var me = this;
      var ticks = me.ticks;
      if (index < 0 || index > ticks.length - 1) {
        return null;
      }
      return me.getPixelForValue(index * me._numLabels / ticks.length + me.min);
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(pixel) {
      var me = this;
      var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
      return Math.min(Math.max(value, 0), me.ticks.length - 1);
    }
  }, {
    key: "getBasePixel",
    value: function getBasePixel() {
      return this.bottom;
    }
  }]);
  return CategoryScale;
}(Scale);
_defineProperty(CategoryScale, "id", 'category');
_defineProperty(CategoryScale, "defaults", defaultConfig);

function niceNum(range, round) {
  var exponent = Math.floor(log10(range));
  var fraction = range / Math.pow(10, exponent);
  var niceFraction;
  if (round) {
    if (fraction < 1.5) {
      niceFraction = 1;
    } else if (fraction < 3) {
      niceFraction = 2;
    } else if (fraction < 7) {
      niceFraction = 5;
    } else {
      niceFraction = 10;
    }
  } else if (fraction <= 1.0) {
    niceFraction = 1;
  } else if (fraction <= 2) {
    niceFraction = 2;
  } else if (fraction <= 5) {
    niceFraction = 5;
  } else {
    niceFraction = 10;
  }
  return niceFraction * Math.pow(10, exponent);
}
function generateTicks(generationOptions, dataRange) {
  var ticks = [];
  var MIN_SPACING = 1e-14;
  var stepSize = generationOptions.stepSize,
      min = generationOptions.min,
      max = generationOptions.max,
      precision = generationOptions.precision;
  var unit = stepSize || 1;
  var maxNumSpaces = generationOptions.maxTicks - 1;
  var rmin = dataRange.min,
      rmax = dataRange.max;
  var spacing = niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
  var factor, niceMin, niceMax, numSpaces;
  if (spacing < MIN_SPACING && isNullOrUndef(min) && isNullOrUndef(max)) {
    return [{
      value: rmin
    }, {
      value: rmax
    }];
  }
  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  if (numSpaces > maxNumSpaces) {
    spacing = niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
  }
  if (stepSize || isNullOrUndef(precision)) {
    factor = Math.pow(10, _decimalPlaces(spacing));
  } else {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }
  niceMin = Math.floor(rmin / spacing) * spacing;
  niceMax = Math.ceil(rmax / spacing) * spacing;
  if (stepSize && !isNullOrUndef(min) && !isNullOrUndef(max)) {
    if (almostWhole((max - min) / stepSize, spacing / 1000)) {
      niceMin = min;
      niceMax = max;
    }
  }
  numSpaces = (niceMax - niceMin) / spacing;
  if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
    numSpaces = Math.round(numSpaces);
  } else {
    numSpaces = Math.ceil(numSpaces);
  }
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  ticks.push({
    value: isNullOrUndef(min) ? niceMin : min
  });
  for (var j = 1; j < numSpaces; ++j) {
    ticks.push({
      value: Math.round((niceMin + j * spacing) * factor) / factor
    });
  }
  ticks.push({
    value: isNullOrUndef(max) ? niceMax : max
  });
  return ticks;
}
var LinearScaleBase = function (_Scale) {
  _inherits(LinearScaleBase, _Scale);
  var _super = _createSuper(LinearScaleBase);
  function LinearScaleBase(cfg) {
    var _this;
    _classCallCheck(this, LinearScaleBase);
    _this = _super.call(this, cfg);
    _this.start = undefined;
    _this.end = undefined;
    _this._startValue = undefined;
    _this._endValue = undefined;
    _this._valueRange = 0;
    return _this;
  }
  _createClass(LinearScaleBase, [{
    key: "parse",
    value: function parse(raw, index) {
      if (isNullOrUndef(raw)) {
        return NaN;
      }
      if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
        return NaN;
      }
      return +raw;
    }
  }, {
    key: "handleTickRangeOptions",
    value: function handleTickRangeOptions() {
      var me = this;
      var opts = me.options;
      if (opts.beginAtZero) {
        var minSign = sign(me.min);
        var maxSign = sign(me.max);
        if (minSign < 0 && maxSign < 0) {
          me.max = 0;
        } else if (minSign > 0 && maxSign > 0) {
          me.min = 0;
        }
      }
      var setMin = opts.min !== undefined || opts.suggestedMin !== undefined;
      var setMax = opts.max !== undefined || opts.suggestedMax !== undefined;
      if (opts.min !== undefined) {
        me.min = opts.min;
      } else if (opts.suggestedMin !== undefined) {
        if (me.min === null) {
          me.min = opts.suggestedMin;
        } else {
          me.min = Math.min(me.min, opts.suggestedMin);
        }
      }
      if (opts.max !== undefined) {
        me.max = opts.max;
      } else if (opts.suggestedMax !== undefined) {
        if (me.max === null) {
          me.max = opts.suggestedMax;
        } else {
          me.max = Math.max(me.max, opts.suggestedMax);
        }
      }
      if (setMin !== setMax) {
        if (me.min >= me.max) {
          if (setMin) {
            me.max = me.min + 1;
          } else {
            me.min = me.max - 1;
          }
        }
      }
      if (me.min === me.max) {
        me.max++;
        if (!opts.beginAtZero) {
          me.min--;
        }
      }
    }
  }, {
    key: "getTickLimit",
    value: function getTickLimit() {
      var me = this;
      var tickOpts = me.options.ticks;
      var maxTicksLimit = tickOpts.maxTicksLimit,
          stepSize = tickOpts.stepSize;
      var maxTicks;
      if (stepSize) {
        maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
      } else {
        maxTicks = me.computeTickLimit();
        maxTicksLimit = maxTicksLimit || 11;
      }
      if (maxTicksLimit) {
        maxTicks = Math.min(maxTicksLimit, maxTicks);
      }
      return maxTicks;
    }
  }, {
    key: "computeTickLimit",
    value: function computeTickLimit() {
      return Number.POSITIVE_INFINITY;
    }
  }, {
    key: "handleDirectionalChanges",
    value: function handleDirectionalChanges(ticks) {
      return ticks;
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      var me = this;
      var opts = me.options;
      var tickOpts = opts.ticks;
      var maxTicks = me.getTickLimit();
      maxTicks = Math.max(2, maxTicks);
      var numericGeneratorOptions = {
        maxTicks: maxTicks,
        min: opts.min,
        max: opts.max,
        precision: tickOpts.precision,
        stepSize: valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
      };
      var ticks = generateTicks(numericGeneratorOptions, me);
      ticks = me.handleDirectionalChanges(ticks);
      _setMinAndMaxByKey(ticks, me, 'value');
      if (opts.reverse) {
        ticks.reverse();
        me.start = me.max;
        me.end = me.min;
      } else {
        me.start = me.min;
        me.end = me.max;
      }
      return ticks;
    }
  }, {
    key: "configure",
    value: function configure() {
      var me = this;
      var ticks = me.ticks;
      var start = me.min;
      var end = me.max;
      _get(_getPrototypeOf(LinearScaleBase.prototype), "configure", this).call(this);
      if (me.options.offset && ticks.length) {
        var offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
        start -= offset;
        end += offset;
      }
      me._startValue = start;
      me._endValue = end;
      me._valueRange = end - start;
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(value) {
      return new Intl.NumberFormat(this.options.locale).format(value);
    }
  }]);
  return LinearScaleBase;
}(Scale);

var defaultConfig$1 = {
  ticks: {
    callback: Ticks.formatters.numeric
  }
};
var LinearScale = function (_LinearScaleBase) {
  _inherits(LinearScale, _LinearScaleBase);
  var _super = _createSuper(LinearScale);
  function LinearScale() {
    _classCallCheck(this, LinearScale);
    return _super.apply(this, arguments);
  }
  _createClass(LinearScale, [{
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var me = this;
      var options = me.options;
      var minmax = me.getMinMax(true);
      var min = minmax.min;
      var max = minmax.max;
      me.min = isNumberFinite(min) ? min : valueOrDefault(options.suggestedMin, 0);
      me.max = isNumberFinite(max) ? max : valueOrDefault(options.suggestedMax, 1);
      if (options.stacked && min > 0) {
        me.min = 0;
      }
      me.handleTickRangeOptions();
    }
  }, {
    key: "computeTickLimit",
    value: function computeTickLimit() {
      var me = this;
      if (me.isHorizontal()) {
        return Math.ceil(me.width / 40);
      }
      var tickFont = _parseFont(me.options.ticks);
      return Math.ceil(me.height / tickFont.lineHeight);
    }
  }, {
    key: "handleDirectionalChanges",
    value: function handleDirectionalChanges(ticks) {
      return this.isHorizontal() ? ticks : ticks.reverse();
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(value) {
      var me = this;
      return me.getPixelForDecimal((value - me._startValue) / me._valueRange);
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(pixel) {
      return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    }
  }]);
  return LinearScale;
}(LinearScaleBase);
_defineProperty(LinearScale, "id", 'linear');
_defineProperty(LinearScale, "defaults", defaultConfig$1);

function isMajor(tickVal) {
  var remain = tickVal / Math.pow(10, Math.floor(log10(tickVal)));
  return remain === 1;
}
function finiteOrDefault(value, def) {
  return isNumberFinite(value) ? value : def;
}
function generateTicks$1(generationOptions, dataRange) {
  var endExp = Math.floor(log10(dataRange.max));
  var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
  var ticks = [];
  var tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));
  var exp = Math.floor(log10(tickVal));
  var significand = Math.floor(tickVal / Math.pow(10, exp));
  var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  do {
    ticks.push({
      value: tickVal,
      major: isMajor(tickVal)
    });
    ++significand;
    if (significand === 10) {
      significand = 1;
      ++exp;
      precision = exp >= 0 ? 1 : precision;
    }
    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
  } while (exp < endExp || exp === endExp && significand < endSignificand);
  var lastTick = finiteOrDefault(generationOptions.max, tickVal);
  ticks.push({
    value: lastTick,
    major: isMajor(tickVal)
  });
  return ticks;
}
var defaultConfig$2 = {
  ticks: {
    callback: Ticks.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
};
var LogarithmicScale = function (_Scale) {
  _inherits(LogarithmicScale, _Scale);
  var _super = _createSuper(LogarithmicScale);
  function LogarithmicScale(cfg) {
    var _this;
    _classCallCheck(this, LogarithmicScale);
    _this = _super.call(this, cfg);
    _this.start = undefined;
    _this.end = undefined;
    _this._startValue = undefined;
    _this._valueRange = 0;
    return _this;
  }
  _createClass(LogarithmicScale, [{
    key: "parse",
    value: function parse(raw, index) {
      var value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);
      if (value === 0) {
        return undefined;
      }
      return isNumberFinite(value) && value > 0 ? value : NaN;
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var me = this;
      var minmax = me.getMinMax(true);
      var min = minmax.min;
      var max = minmax.max;
      me.min = isNumberFinite(min) ? Math.max(0, min) : null;
      me.max = isNumberFinite(max) ? Math.max(0, max) : null;
      me.handleTickRangeOptions();
    }
  }, {
    key: "handleTickRangeOptions",
    value: function handleTickRangeOptions() {
      var me = this;
      var DEFAULT_MIN = 1;
      var DEFAULT_MAX = 10;
      var min = me.min;
      var max = me.max;
      if (min === max) {
        if (min <= 0) {
          min = DEFAULT_MIN;
          max = DEFAULT_MAX;
        } else {
          min = Math.pow(10, Math.floor(log10(min)) - 1);
          max = Math.pow(10, Math.floor(log10(max)) + 1);
        }
      }
      if (min <= 0) {
        min = Math.pow(10, Math.floor(log10(max)) - 1);
      }
      if (max <= 0) {
        max = Math.pow(10, Math.floor(log10(min)) + 1);
      }
      me.min = min;
      me.max = max;
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      var me = this;
      var opts = me.options;
      var generationOptions = {
        min: me._userMin,
        max: me._userMax
      };
      var ticks = generateTicks$1(generationOptions, me);
      var reverse = !me.isHorizontal();
      _setMinAndMaxByKey(ticks, me, 'value');
      if (opts.reverse) {
        reverse = !reverse;
        me.start = me.max;
        me.end = me.min;
      } else {
        me.start = me.min;
        me.end = me.max;
      }
      if (reverse) {
        ticks.reverse();
      }
      return ticks;
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(value) {
      return value === undefined ? '0' : new Intl.NumberFormat(this.options.locale).format(value);
    }
  }, {
    key: "configure",
    value: function configure() {
      var me = this;
      var start = me.min;
      _get(_getPrototypeOf(LogarithmicScale.prototype), "configure", this).call(this);
      me._startValue = log10(start);
      me._valueRange = log10(me.max) - log10(start);
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(value) {
      var me = this;
      if (value === undefined || value === 0) {
        value = me.min;
      }
      return me.getPixelForDecimal(value === me.min ? 0 : (log10(value) - me._startValue) / me._valueRange);
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(pixel) {
      var me = this;
      var decimal = me.getDecimalForPixel(pixel);
      return Math.pow(10, me._startValue + decimal * me._valueRange);
    }
  }]);
  return LogarithmicScale;
}(Scale);
_defineProperty(LogarithmicScale, "id", 'logarithmic');
_defineProperty(LogarithmicScale, "defaults", defaultConfig$2);

var valueOrDefault$2 = helpers.valueOrDefault;
var valueAtIndexOrDefault$1 = helpers.valueAtIndexOrDefault;
var resolve$2 = helpers.options.resolve;
var defaultConfig$3 = {
  display: true,
  animate: true,
  position: 'chartArea',
  angleLines: {
    display: true,
    color: 'rgba(0,0,0,0.1)',
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0.0
  },
  gridLines: {
    circular: false
  },
  ticks: {
    showLabelBackdrop: true,
    backdropColor: 'rgba(255,255,255,0.75)',
    backdropPaddingY: 2,
    backdropPaddingX: 2,
    callback: Ticks.formatters.numeric
  },
  pointLabels: {
    display: true,
    fontSize: 10,
    callback: function callback(label) {
      return label;
    }
  }
};
function getTickBackdropHeight(opts) {
  var tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    return valueOrDefault$2(tickOpts.fontSize, defaults.fontSize) + tickOpts.backdropPaddingY * 2;
  }
  return 0;
}
function measureLabelSize(ctx, lineHeight, label) {
  if (helpers.isArray(label)) {
    return {
      w: _longestText(ctx, ctx.font, label),
      h: label.length * lineHeight
    };
  }
  return {
    w: ctx.measureText(label).width,
    h: lineHeight
  };
}
function determineLimits(angle, pos, size, min, max) {
  if (angle === min || angle === max) {
    return {
      start: pos - size / 2,
      end: pos + size / 2
    };
  } else if (angle < min || angle > max) {
    return {
      start: pos - size,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size
  };
}
function fitWithPointLabels(scale) {
  var plFont = helpers.options._parseFont(scale.options.pointLabels);
  var furthestLimits = {
    l: 0,
    r: scale.width,
    t: 0,
    b: scale.height - scale.paddingTop
  };
  var furthestAngles = {};
  var i, textSize, pointPosition;
  scale.ctx.font = plFont.string;
  scale._pointLabelSizes = [];
  var valueCount = scale.chart.data.labels.length;
  for (i = 0; i < valueCount; i++) {
    pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
    textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
    scale._pointLabelSizes[i] = textSize;
    var angleRadians = scale.getIndexAngle(i);
    var angle = toDegrees(angleRadians);
    var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    if (hLimits.start < furthestLimits.l) {
      furthestLimits.l = hLimits.start;
      furthestAngles.l = angleRadians;
    }
    if (hLimits.end > furthestLimits.r) {
      furthestLimits.r = hLimits.end;
      furthestAngles.r = angleRadians;
    }
    if (vLimits.start < furthestLimits.t) {
      furthestLimits.t = vLimits.start;
      furthestAngles.t = angleRadians;
    }
    if (vLimits.end > furthestLimits.b) {
      furthestLimits.b = vLimits.end;
      furthestAngles.b = angleRadians;
    }
  }
  scale._setReductions(scale.drawingArea, furthestLimits, furthestAngles);
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return 'center';
  } else if (angle < 180) {
    return 'left';
  }
  return 'right';
}
function fillText(ctx, text, position, lineHeight) {
  var y = position.y + lineHeight / 2;
  var i, ilen;
  if (helpers.isArray(text)) {
    for (i = 0, ilen = text.length; i < ilen; ++i) {
      ctx.fillText(text[i], position.x, y);
      y += lineHeight;
    }
  } else {
    ctx.fillText(text, position.x, y);
  }
}
function adjustPointPositionForLabelHeight(angle, textSize, position) {
  if (angle === 90 || angle === 270) {
    position.y -= textSize.h / 2;
  } else if (angle > 270 || angle < 90) {
    position.y -= textSize.h;
  }
}
function drawPointLabels(scale) {
  var ctx = scale.ctx;
  var opts = scale.options;
  var pointLabelOpts = opts.pointLabels;
  var tickBackdropHeight = getTickBackdropHeight(opts);
  var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
  var plFont = helpers.options._parseFont(pointLabelOpts);
  ctx.save();
  ctx.font = plFont.string;
  ctx.textBaseline = 'middle';
  for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
    var extra = i === 0 ? tickBackdropHeight / 2 : 0;
    var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);
    var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, defaults.fontColor);
    ctx.fillStyle = pointLabelFontColor;
    var angleRadians = scale.getIndexAngle(i);
    var angle = toDegrees(angleRadians);
    ctx.textAlign = getTextAlignForAngle(angle);
    adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
    fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
  }
  ctx.restore();
}
function drawRadiusLine(scale, gridLineOpts, radius, index) {
  var ctx = scale.ctx;
  var circular = gridLineOpts.circular;
  var valueCount = scale.chart.data.labels.length;
  var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1, undefined);
  var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1, undefined);
  var pointPosition;
  if (!circular && !valueCount || !lineColor || !lineWidth) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = lineColor;
  ctx.lineWidth = lineWidth;
  if (ctx.setLineDash) {
    ctx.setLineDash(gridLineOpts.borderDash || []);
    ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
  }
  ctx.beginPath();
  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
  } else {
    pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (var i = 1; i < valueCount; i++) {
      pointPosition = scale.getPointPosition(i, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function numberOrZero(param) {
  return isNumber(param) ? param : 0;
}
var RadialLinearScale = function (_LinearScaleBase) {
  _inherits(RadialLinearScale, _LinearScaleBase);
  var _super = _createSuper(RadialLinearScale);
  function RadialLinearScale(cfg) {
    var _this;
    _classCallCheck(this, RadialLinearScale);
    _this = _super.call(this, cfg);
    _this.xCenter = undefined;
    _this.yCenter = undefined;
    _this.drawingArea = undefined;
    _this.pointLabels = [];
    return _this;
  }
  _createClass(RadialLinearScale, [{
    key: "setDimensions",
    value: function setDimensions() {
      var me = this;
      me.width = me.maxWidth;
      me.height = me.maxHeight;
      me.paddingTop = getTickBackdropHeight(me.options) / 2;
      me.xCenter = Math.floor(me.width / 2);
      me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
      me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var me = this;
      var minmax = me.getMinMax(false);
      var min = minmax.min;
      var max = minmax.max;
      me.min = helpers.isFinite(min) && !isNaN(min) ? min : 0;
      me.max = helpers.isFinite(max) && !isNaN(max) ? max : 0;
      me.handleTickRangeOptions();
    }
  }, {
    key: "computeTickLimit",
    value: function computeTickLimit() {
      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    }
  }, {
    key: "generateTickLabels",
    value: function generateTickLabels(ticks) {
      var me = this;
      LinearScaleBase.prototype.generateTickLabels.call(me, ticks);
      me.pointLabels = me.chart.data.labels.map(function (value, index) {
        var label = helpers.callback(me.options.pointLabels.callback, [value, index], me);
        return label || label === 0 ? label : '';
      });
    }
  }, {
    key: "fit",
    value: function fit() {
      var me = this;
      var opts = me.options;
      if (opts.display && opts.pointLabels.display) {
        fitWithPointLabels(me);
      } else {
        me.setCenterPoint(0, 0, 0, 0);
      }
    }
  }, {
    key: "_setReductions",
    value: function _setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {
      var me = this;
      var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
      var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
      var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
      var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);
      radiusReductionLeft = numberOrZero(radiusReductionLeft);
      radiusReductionRight = numberOrZero(radiusReductionRight);
      radiusReductionTop = numberOrZero(radiusReductionTop);
      radiusReductionBottom = numberOrZero(radiusReductionBottom);
      me.drawingArea = Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
      me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
    }
  }, {
    key: "setCenterPoint",
    value: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
      var me = this;
      var maxRight = me.width - rightMovement - me.drawingArea;
      var maxLeft = leftMovement + me.drawingArea;
      var maxTop = topMovement + me.drawingArea;
      var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;
      me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);
      me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);
    }
  }, {
    key: "getIndexAngle",
    value: function getIndexAngle(index) {
      var chart = this.chart;
      var angleMultiplier = Math.PI * 2 / chart.data.labels.length;
      var options = chart.options || {};
      var startAngle = options.startAngle || 0;
      return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));
    }
  }, {
    key: "getDistanceFromCenterForValue",
    value: function getDistanceFromCenterForValue(value) {
      var me = this;
      if (helpers.isNullOrUndef(value)) {
        return NaN;
      }
      var scalingFactor = me.drawingArea / (me.max - me.min);
      if (me.options.reverse) {
        return (me.max - value) * scalingFactor;
      }
      return (value - me.min) * scalingFactor;
    }
  }, {
    key: "getPointPosition",
    value: function getPointPosition(index, distanceFromCenter) {
      var me = this;
      var angle = me.getIndexAngle(index) - Math.PI / 2;
      return {
        x: Math.cos(angle) * distanceFromCenter + me.xCenter,
        y: Math.sin(angle) * distanceFromCenter + me.yCenter,
        angle: angle
      };
    }
  }, {
    key: "getPointPositionForValue",
    value: function getPointPositionForValue(index, value) {
      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    }
  }, {
    key: "getBasePosition",
    value: function getBasePosition(index) {
      return this.getPointPositionForValue(index || 0, this.getBaseValue());
    }
  }, {
    key: "drawGrid",
    value: function drawGrid() {
      var me = this;
      var ctx = me.ctx;
      var opts = me.options;
      var gridLineOpts = opts.gridLines;
      var angleLineOpts = opts.angleLines;
      var lineWidth = valueOrDefault$2(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
      var lineColor = valueOrDefault$2(angleLineOpts.color, gridLineOpts.color);
      var i, offset, position;
      if (opts.pointLabels.display) {
        drawPointLabels(me);
      }
      if (gridLineOpts.display) {
        me.ticks.forEach(function (tick, index) {
          if (index !== 0) {
            offset = me.getDistanceFromCenterForValue(me.ticks[index].value);
            drawRadiusLine(me, gridLineOpts, offset, index);
          }
        });
      }
      if (angleLineOpts.display && lineWidth && lineColor) {
        ctx.save();
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = lineColor;
        if (ctx.setLineDash) {
          ctx.setLineDash(resolve$2([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
          ctx.lineDashOffset = resolve$2([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
        }
        for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
          offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
          position = me.getPointPosition(i, offset);
          ctx.beginPath();
          ctx.moveTo(me.xCenter, me.yCenter);
          ctx.lineTo(position.x, position.y);
          ctx.stroke();
        }
        ctx.restore();
      }
    }
  }, {
    key: "drawLabels",
    value: function drawLabels() {
      var me = this;
      var ctx = me.ctx;
      var opts = me.options;
      var tickOpts = opts.ticks;
      if (!tickOpts.display) {
        return;
      }
      var startAngle = me.getIndexAngle(0);
      var tickFont = helpers.options._parseFont(tickOpts);
      var tickFontColor = valueOrDefault$2(tickOpts.fontColor, defaults.fontColor);
      var offset, width;
      ctx.save();
      ctx.font = tickFont.string;
      ctx.translate(me.xCenter, me.yCenter);
      ctx.rotate(startAngle);
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      me.ticks.forEach(function (tick, index) {
        if (index === 0 && !opts.reverse) {
          return;
        }
        offset = me.getDistanceFromCenterForValue(me.ticks[index].value);
        if (tickOpts.showLabelBackdrop) {
          width = ctx.measureText(tick.label).width;
          ctx.fillStyle = tickOpts.backdropColor;
          ctx.fillRect(-width / 2 - tickOpts.backdropPaddingX, -offset - tickFont.size / 2 - tickOpts.backdropPaddingY, width + tickOpts.backdropPaddingX * 2, tickFont.size + tickOpts.backdropPaddingY * 2);
        }
        ctx.fillStyle = tickFontColor;
        ctx.fillText(tick.label, 0, -offset);
      });
      ctx.restore();
    }
  }, {
    key: "drawTitle",
    value: function drawTitle() {}
  }]);
  return RadialLinearScale;
}(LinearScaleBase);
_defineProperty(RadialLinearScale, "id", 'radialLinear');
_defineProperty(RadialLinearScale, "defaults", defaultConfig$3);

var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
var INTERVALS = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1000
  },
  second: {
    common: true,
    size: 1000,
    steps: 60
  },
  minute: {
    common: true,
    size: 60000,
    steps: 60
  },
  hour: {
    common: true,
    size: 3600000,
    steps: 24
  },
  day: {
    common: true,
    size: 86400000,
    steps: 30
  },
  week: {
    common: false,
    size: 604800000,
    steps: 4
  },
  month: {
    common: true,
    size: 2.628e9,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7.884e9,
    steps: 4
  },
  year: {
    common: true,
    size: 3.154e10
  }
};
var UNITS =
Object.keys(INTERVALS);
function sorter(a, b) {
  return a - b;
}
function arrayUnique(items) {
  var set = new Set();
  var i, ilen;
  for (i = 0, ilen = items.length; i < ilen; ++i) {
    set.add(items[i]);
  }
  if (set.size === ilen) {
    return items;
  }
  return _toConsumableArray(set);
}
function _parse(scale, input) {
  if (isNullOrUndef(input)) {
    return null;
  }
  var adapter = scale._adapter;
  var options = scale.options.time;
  var parser = options.parser,
      round = options.round,
      isoWeekday = options.isoWeekday;
  var value = input;
  if (typeof parser === 'function') {
    value = parser(value);
  }
  if (!isNumberFinite(value)) {
    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);
  }
  if (value === null) {
    return value;
  }
  if (round) {
    value = round === 'week' && isoWeekday ? scale._adapter.startOf(value, 'isoWeek', isoWeekday) : scale._adapter.startOf(value, round);
  }
  return +value;
}
function getDataTimestamps(scale) {
  var isSeries = scale.options.distribution === 'series';
  var timestamps = scale._cache.data || [];
  var i, ilen;
  if (timestamps.length) {
    return timestamps;
  }
  var metas = scale.getMatchingVisibleMetas();
  if (isSeries && metas.length) {
    return metas[0].controller.getAllParsedValues(scale);
  }
  for (i = 0, ilen = metas.length; i < ilen; ++i) {
    timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(scale));
  }
  return scale._cache.data = arrayUnique(timestamps.sort(sorter));
}
function getLabelTimestamps(scale) {
  var isSeries = scale.options.distribution === 'series';
  var timestamps = scale._cache.labels || [];
  var i, ilen;
  if (timestamps.length) {
    return timestamps;
  }
  var labels = scale.getLabels();
  for (i = 0, ilen = labels.length; i < ilen; ++i) {
    timestamps.push(_parse(scale, labels[i]));
  }
  return scale._cache.labels = isSeries ? timestamps : arrayUnique(timestamps.sort(sorter));
}
function getAllTimestamps(scale) {
  var timestamps = scale._cache.all || [];
  if (timestamps.length) {
    return timestamps;
  }
  var data = getDataTimestamps(scale);
  var label = getLabelTimestamps(scale);
  if (data.length && label.length) {
    timestamps = arrayUnique(data.concat(label).sort(sorter));
  } else {
    timestamps = data.length ? data : label;
  }
  timestamps = scale._cache.all = timestamps;
  return timestamps;
}
function buildLookupTable(timestamps, min, max, distribution) {
  if (distribution === 'linear' || !timestamps.length) {
    return [{
      time: min,
      pos: 0
    }, {
      time: max,
      pos: 1
    }];
  }
  var table = [];
  var items = [min];
  var i, ilen, prev, curr, next;
  for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
    curr = timestamps[i];
    if (curr > min && curr < max) {
      items.push(curr);
    }
  }
  items.push(max);
  for (i = 0, ilen = items.length; i < ilen; ++i) {
    next = items[i + 1];
    prev = items[i - 1];
    curr = items[i];
    if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
      table.push({
        time: curr,
        pos: i / (ilen - 1)
      });
    }
  }
  return table;
}
function interpolate(table, skey, sval, tkey) {
  var _lookupByKey2 = _lookupByKey(table, skey, sval),
      lo = _lookupByKey2.lo,
      hi = _lookupByKey2.hi;
  var prev = table[lo];
  var next = table[hi];
  var span = next[skey] - prev[skey];
  var ratio = span ? (sval - prev[skey]) / span : 0;
  var offset = (next[tkey] - prev[tkey]) * ratio;
  return prev[tkey] + offset;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  var ilen = UNITS.length;
  for (var i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    var interval = INTERVALS[UNITS[i]];
    var factor = interval.steps ? interval.steps : MAX_INTEGER;
    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
  for (var i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    var unit = UNITS[i];
    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    if (INTERVALS[UNITS[i]].common) {
      return UNITS[i];
    }
  }
}
function addTick(timestamps, ticks, time) {
  if (!timestamps.length) {
    return;
  }
  var _lookup2 = _lookup(timestamps, time),
      lo = _lookup2.lo,
      hi = _lookup2.hi;
  var timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
  ticks.add(timestamp);
}
function generate(scale) {
  var adapter = scale._adapter;
  var min = scale.min;
  var max = scale.max;
  var options = scale.options;
  var timeOpts = options.time;
  var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, scale._getLabelCapacity(min));
  var stepSize = valueOrDefault(timeOpts.stepSize, 1);
  var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
  var ticks = new Set();
  var first = min;
  var time;
  if (weekday) {
    first = +adapter.startOf(first, 'isoWeek', weekday);
  }
  first = +adapter.startOf(first, weekday ? 'day' : minor);
  if (adapter.diff(max, min, minor) > 100000 * stepSize) {
    throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
  }
  if (scale.options.ticks.source === 'data') {
    var timestamps = getDataTimestamps(scale);
    for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
      addTick(timestamps, ticks, time);
    }
    if (time === max || options.bounds === 'ticks') {
      addTick(timestamps, ticks, time);
    }
  } else {
    for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
      ticks.add(time);
    }
    if (time === max || options.bounds === 'ticks') {
      ticks.add(time);
    }
  }
  return _toConsumableArray(ticks);
}
function computeOffsets(table, timestamps, min, max, options) {
  var start = 0;
  var end = 0;
  var first, last;
  if (options.offset && timestamps.length) {
    first = interpolate(table, 'time', timestamps[0], 'pos');
    if (timestamps.length === 1) {
      start = 1 - first;
    } else {
      start = (interpolate(table, 'time', timestamps[1], 'pos') - first) / 2;
    }
    last = interpolate(table, 'time', timestamps[timestamps.length - 1], 'pos');
    if (timestamps.length === 1) {
      end = last;
    } else {
      end = (last - interpolate(table, 'time', timestamps[timestamps.length - 2], 'pos')) / 2;
    }
  }
  return {
    start: start,
    end: end,
    factor: 1 / (start + 1 + end)
  };
}
function setMajorTicks(scale, ticks, map, majorUnit) {
  var adapter = scale._adapter;
  var first = +adapter.startOf(ticks[0].value, majorUnit);
  var last = ticks[ticks.length - 1].value;
  var major, index;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index = map[major];
    if (index >= 0) {
      ticks[index].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
  var ticks = [];
  var map = {};
  var ilen = values.length;
  var i, value;
  for (i = 0; i < ilen; ++i) {
    value = values[i];
    map[value] = i;
    ticks.push({
      value: value,
      major: false
    });
  }
  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}
function getTimestampsForTicks(scale) {
  if (scale.options.ticks.source === 'labels') {
    return getLabelTimestamps(scale);
  }
  return generate(scale);
}
function getTimestampsForTable(scale) {
  return scale.options.distribution === 'series' ? getAllTimestamps(scale) : [scale.min, scale.max];
}
function getLabelBounds(scale) {
  var arr = getLabelTimestamps(scale);
  var min = Number.POSITIVE_INFINITY;
  var max = Number.NEGATIVE_INFINITY;
  if (arr.length) {
    min = arr[0];
    max = arr[arr.length - 1];
  }
  return {
    min: min,
    max: max
  };
}
var defaultConfig$4 = {
  distribution: 'linear',
  bounds: 'data',
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: 'millisecond',
    displayFormats: {}
  },
  ticks: {
    autoSkip: false,
    source: 'auto',
    major: {
      enabled: false
    }
  }
};
var TimeScale = function (_Scale) {
  _inherits(TimeScale, _Scale);
  var _super = _createSuper(TimeScale);
  function TimeScale(props) {
    var _this;
    _classCallCheck(this, TimeScale);
    _this = _super.call(this, props);
    var options = _this.options;
    var time = options.time || (options.time = {});
    var adapter = _this._adapter = new _adapters._date(options.adapters.date);
    _this._cache = {
      data: [],
      labels: [],
      all: []
    };
    _this._unit = 'day';
    _this._majorUnit = undefined;
    _this._offsets = {};
    _this._table = [];
    mergeIf(time.displayFormats, adapter.formats());
    return _this;
  }
  _createClass(TimeScale, [{
    key: "parse",
    value: function parse(raw, index) {
      if (raw === undefined) {
        return NaN;
      }
      return _parse(this, raw);
    }
  }, {
    key: "parseObject",
    value: function parseObject(obj, axis, index) {
      if (obj && obj.t) {
        return this.parse(obj.t, index);
      }
      if (obj[axis] !== undefined) {
        return this.parse(obj[axis], index);
      }
      return null;
    }
  }, {
    key: "invalidateCaches",
    value: function invalidateCaches() {
      this._cache = {
        data: [],
        labels: [],
        all: []
      };
    }
  }, {
    key: "determineDataLimits",
    value: function determineDataLimits() {
      var me = this;
      var options = me.options;
      var adapter = me._adapter;
      var unit = options.time.unit || 'day';
      var _me$getUserBounds = me.getUserBounds(),
          min = _me$getUserBounds.min,
          max = _me$getUserBounds.max,
          minDefined = _me$getUserBounds.minDefined,
          maxDefined = _me$getUserBounds.maxDefined;
      function _applyBounds(bounds) {
        if (!minDefined && !isNaN(bounds.min)) {
          min = Math.min(min, bounds.min);
        }
        if (!maxDefined && !isNaN(bounds.max)) {
          max = Math.max(max, bounds.max);
        }
      }
      if (!minDefined || !maxDefined) {
        _applyBounds(getLabelBounds(me));
        if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
          _applyBounds(me.getMinMax(false));
        }
      }
      min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
      max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
      me.min = Math.min(min, max);
      me.max = Math.max(min + 1, max);
    }
  }, {
    key: "buildTicks",
    value: function buildTicks() {
      var me = this;
      var options = me.options;
      var timeOpts = options.time;
      var tickOpts = options.ticks;
      var distribution = options.distribution;
      var timestamps = getTimestampsForTicks(me);
      if (options.bounds === 'ticks' && timestamps.length) {
        me.min = me._userMin || timestamps[0];
        me.max = me._userMax || timestamps[timestamps.length - 1];
      }
      var min = me.min;
      var max = me.max;
      var ticks = _filterBetween(timestamps, min, max);
      me._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, me._getLabelCapacity(min)) : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
      me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined : determineMajorUnit(me._unit);
      me._table = buildLookupTable(getTimestampsForTable(me), min, max, distribution);
      me._offsets = computeOffsets(me._table, getDataTimestamps(me), min, max, options);
      if (options.reverse) {
        ticks.reverse();
      }
      return ticksFromTimestamps(me, ticks, me._majorUnit);
    }
  }, {
    key: "getLabelForValue",
    value: function getLabelForValue(value) {
      var me = this;
      var adapter = me._adapter;
      var timeOpts = me.options.time;
      if (timeOpts.tooltipFormat) {
        return adapter.format(value, timeOpts.tooltipFormat, me.options);
      }
      return adapter.format(value, timeOpts.displayFormats.datetime, me.options);
    }
  }, {
    key: "_tickFormatFunction",
    value: function _tickFormatFunction(time, index, ticks, format) {
      var me = this;
      var options = me.options;
      var formats = options.time.displayFormats;
      var unit = me._unit;
      var majorUnit = me._majorUnit;
      var minorFormat = unit && formats[unit];
      var majorFormat = majorUnit && formats[majorUnit];
      var tick = ticks[index];
      var major = majorUnit && majorFormat && tick && tick.major;
      var label = me._adapter.format(time, format || (major ? majorFormat : minorFormat), options);
      var formatter = options.ticks.callback;
      return formatter ? formatter(label, index, ticks) : label;
    }
  }, {
    key: "generateTickLabels",
    value: function generateTickLabels(ticks) {
      var i, ilen, tick;
      for (i = 0, ilen = ticks.length; i < ilen; ++i) {
        tick = ticks[i];
        tick.label = this._tickFormatFunction(tick.value, i, ticks);
      }
    }
  }, {
    key: "getPixelForValue",
    value: function getPixelForValue(value) {
      var me = this;
      var offsets = me._offsets;
      var pos = interpolate(me._table, 'time', value, 'pos');
      return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    }
  }, {
    key: "getValueForPixel",
    value: function getValueForPixel(pixel) {
      var me = this;
      var offsets = me._offsets;
      var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
      return interpolate(me._table, 'pos', pos, 'time');
    }
  }, {
    key: "_getLabelSize",
    value: function _getLabelSize(label) {
      var me = this;
      var ticksOpts = me.options.ticks;
      var tickLabelWidth = me.ctx.measureText(label).width;
      var angle = toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
      var cosRotation = Math.cos(angle);
      var sinRotation = Math.sin(angle);
      var tickFontSize = valueOrDefault(ticksOpts.fontSize, defaults.fontSize);
      return {
        w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
        h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
      };
    }
  }, {
    key: "_getLabelCapacity",
    value: function _getLabelCapacity(exampleTime) {
      var me = this;
      var timeOpts = me.options.time;
      var displayFormats = timeOpts.displayFormats;
      var format = displayFormats[timeOpts.unit] || displayFormats.millisecond || 'h:mm:ss.SSS a';
      var exampleLabel = me._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
      var size = me._getLabelSize(exampleLabel);
      var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h) - 1;
      return capacity > 0 ? capacity : 1;
    }
  }]);
  return TimeScale;
}(Scale);
_defineProperty(TimeScale, "id", 'time');
_defineProperty(TimeScale, "defaults", defaultConfig$4);

var scales = /*#__PURE__*/Object.freeze({
__proto__: null,
CategoryScale: CategoryScale,
LinearScale: LinearScale,
LogarithmicScale: LogarithmicScale,
RadialLinearScale: RadialLinearScale,
TimeScale: TimeScale
});

defaults.set('plugins', {
  filler: {
    propagate: true
  }
});
function getLineByIndex(chart, index) {
  var meta = chart.getDatasetMeta(index);
  var visible = meta && chart.isDatasetVisible(index);
  return visible ? meta.dataset : null;
}
function parseFillOption(line) {
  var options = line.options;
  var fillOption = options.fill;
  var fill = valueOrDefault(fillOption && fillOption.target, fillOption);
  if (fill === undefined) {
    fill = !!options.backgroundColor;
  }
  if (fill === false || fill === null) {
    return false;
  }
  if (fill === true) {
    return 'origin';
  }
  return fill;
}
function decodeFill(line, index, count) {
  var fill = parseFillOption(line);
  var target = parseFloat(fill);
  if (isNumberFinite(target) && Math.floor(target) === target) {
    if (fill[0] === '-' || fill[0] === '+') {
      target = index + target;
    }
    if (target === index || target < 0 || target >= count) {
      return false;
    }
    return target;
  }
  return ['origin', 'start', 'end'].indexOf(fill) >= 0 ? fill : false;
}
function computeLinearBoundary(source) {
  var _source$scale = source.scale,
      scale = _source$scale === void 0 ? {} : _source$scale,
      fill = source.fill;
  var target = null;
  var horizontal;
  if (fill === 'start') {
    target = scale.bottom;
  } else if (fill === 'end') {
    target = scale.top;
  } else if (scale.getBasePixel) {
    target = scale.getBasePixel();
  }
  if (isNumberFinite(target)) {
    horizontal = scale.isHorizontal();
    return {
      x: horizontal ? target : null,
      y: horizontal ? null : target
    };
  }
  return null;
}
var simpleArc = function () {
  function simpleArc(opts) {
    _classCallCheck(this, simpleArc);
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }
  _createClass(simpleArc, [{
    key: "pathSegment",
    value: function pathSegment(ctx, bounds, opts) {
      var x = this.x,
          y = this.y,
          radius = this.radius;
      bounds = bounds || {
        start: 0,
        end: Math.PI * 2
      };
      if (opts.reverse) {
        ctx.arc(x, y, radius, bounds.end, bounds.start, true);
      } else {
        ctx.arc(x, y, radius, bounds.start, bounds.end);
      }
      return !opts.bounds;
    }
  }, {
    key: "interpolate",
    value: function interpolate(point, property) {
      var x = this.x,
          y = this.y,
          radius = this.radius;
      var angle = point.angle;
      if (property === 'angle') {
        return {
          x: x + Math.cos(angle) * radius,
          y: y + Math.sin(angle) * radius,
          angle: angle
        };
      }
    }
  }]);
  return simpleArc;
}();
function computeCircularBoundary(source) {
  var scale = source.scale,
      fill = source.fill;
  var options = scale.options;
  var length = scale.getLabels().length;
  var target = [];
  var start = options.reverse ? scale.max : scale.min;
  var end = options.reverse ? scale.min : scale.max;
  var value = fill === 'start' ? start : fill === 'end' ? end : scale.getBaseValue();
  var i, center;
  if (options.gridLines.circular) {
    center = scale.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale.getDistanceFromCenterForValue(value)
    });
  }
  for (i = 0; i < length; ++i) {
    target.push(scale.getPointPositionForValue(i, value));
  }
  return target;
}
function computeBoundary(source) {
  var scale = source.scale || {};
  if (scale.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function pointsFromSegments(boundary, line) {
  var _ref = boundary || {},
      _ref$x = _ref.x,
      x = _ref$x === void 0 ? null : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === void 0 ? null : _ref$y;
  var linePoints = line.points;
  var points = [];
  line.segments.forEach(function (segment) {
    var first = linePoints[segment.start];
    var last = linePoints[segment.end];
    if (y !== null) {
      points.push({
        x: first.x,
        y: y,
        _prop: 'x',
        _ref: first
      });
      points.push({
        x: last.x,
        y: y,
        _prop: 'x',
        _ref: last
      });
    } else if (x !== null) {
      points.push({
        x: x,
        y: first.y,
        _prop: 'y',
        _ref: first
      });
      points.push({
        x: x,
        y: last.y,
        _prop: 'y',
        _ref: last
      });
    }
  });
  return points;
}
function getTarget(source) {
  var chart = source.chart,
      fill = source.fill,
      line = source.line;
  if (isNumberFinite(fill)) {
    return getLineByIndex(chart, fill);
  }
  var boundary = computeBoundary(source);
  var points = [];
  var _loop = false;
  var _refPoints = false;
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  if (isArray(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = pointsFromSegments(boundary, line);
    _refPoints = true;
  }
  return points.length ? new Line({
    points: points,
    options: {
      tension: 0
    },
    _loop: _loop,
    _fullLoop: _loop,
    _refPoints: _refPoints
  }) : null;
}
function resolveTarget(sources, index, propagate) {
  var source = sources[index];
  var fill = source.fill;
  var visited = [index];
  var target;
  if (!propagate) {
    return fill;
  }
  while (fill !== false && visited.indexOf(fill) === -1) {
    if (!isNumberFinite(fill)) {
      return fill;
    }
    target = sources[fill];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill;
    }
    visited.push(fill);
    fill = target.fill;
  }
  return false;
}
function _clip(ctx, target, clipY) {
  ctx.beginPath();
  target.path(ctx);
  ctx.lineTo(target.last().x, clipY);
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function getBounds(property, first, last, loop) {
  if (loop) {
    return;
  }
  var start = first[property];
  var end = last[property];
  if (property === 'angle') {
    start = _normalizeAngle(start);
    end = _normalizeAngle(end);
  }
  return {
    property: property,
    start: start,
    end: end
  };
}
function _getEdge(a, b, prop, fn) {
  if (a && b) {
    return fn(a[prop], b[prop]);
  }
  return a ? a[prop] : b ? b[prop] : 0;
}
function _segments(line, target, property) {
  var segments = line.segments;
  var points = line.points;
  var tpoints = target.points;
  var parts = [];
  if (target._refPoints) {
    for (var i = 0, ilen = tpoints.length; i < ilen; ++i) {
      var point = tpoints[i];
      var prop = point._prop;
      if (prop) {
        point[prop] = point._ref[prop];
      }
    }
  }
  for (var _i = 0; _i < segments.length; _i++) {
    var segment = segments[_i];
    var bounds = getBounds(property, points[segment.start], points[segment.end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[segment.start],
        end: points[segment.end]
      });
      continue;
    }
    var subs = _boundSegments(target, bounds);
    for (var j = 0; j < subs.length; ++j) {
      var sub = subs[j];
      var subBounds = getBounds(property, tpoints[sub.start], tpoints[sub.end], sub.loop);
      var fillSources = _boundSegment(segment, points, subBounds);
      for (var k = 0; k < fillSources.length; k++) {
        parts.push({
          source: fillSources[k],
          target: sub,
          start: _defineProperty({}, property, _getEdge(bounds, subBounds, 'start', Math.max)),
          end: _defineProperty({}, property, _getEdge(bounds, subBounds, 'end', Math.min))
        });
      }
    }
  }
  return parts;
}
function clipBounds(ctx, scale, bounds) {
  var _scale$chart$chartAre = scale.chart.chartArea,
      top = _scale$chart$chartAre.top,
      bottom = _scale$chart$chartAre.bottom;
  var _ref2 = bounds || {},
      property = _ref2.property,
      start = _ref2.start,
      end = _ref2.end;
  if (property === 'x') {
    ctx.beginPath();
    ctx.rect(start, top, end - start, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  var interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}
function _fill(ctx, cfg) {
  var line = cfg.line,
      target = cfg.target,
      property = cfg.property,
      color = cfg.color,
      scale = cfg.scale;
  var segments = _segments(cfg.line, cfg.target, property);
  ctx.fillStyle = color;
  for (var i = 0, ilen = segments.length; i < ilen; ++i) {
    var _segments$i = segments[i],
        src = _segments$i.source,
        tgt = _segments$i.target,
        start = _segments$i.start,
        end = _segments$i.end;
    ctx.save();
    clipBounds(ctx, scale, getBounds(property, start, end));
    ctx.beginPath();
    var lineLoop = !!line.pathSegment(ctx, src);
    if (lineLoop) {
      ctx.closePath();
    } else {
      interpolatedLineTo(ctx, target, end, property);
    }
    var targetLoop = !!target.pathSegment(ctx, tgt, {
      move: lineLoop,
      reverse: true
    });
    var loop = lineLoop && targetLoop;
    if (!loop) {
      interpolatedLineTo(ctx, target, start, property);
    }
    ctx.closePath();
    ctx.fill(loop ? 'evenodd' : 'nonzero');
    ctx.restore();
  }
}
function doFill(ctx, cfg) {
  var line = cfg.line,
      target = cfg.target,
      above = cfg.above,
      below = cfg.below,
      area = cfg.area,
      scale = cfg.scale;
  var property = line._loop ? 'angle' : 'x';
  ctx.save();
  if (property === 'x' && below !== above) {
    _clip(ctx, target, area.top);
    _fill(ctx, {
      line: line,
      target: target,
      color: above,
      scale: scale,
      property: property
    });
    ctx.restore();
    ctx.save();
    _clip(ctx, target, area.bottom);
  }
  _fill(ctx, {
    line: line,
    target: target,
    color: below,
    scale: scale,
    property: property
  });
  ctx.restore();
}
var filler = {
  id: 'filler',
  afterDatasetsUpdate: function afterDatasetsUpdate(chart, options) {
    var count = (chart.data.datasets || []).length;
    var propagate = options.propagate;
    var sources = [];
    var meta, i, line, source;
    for (i = 0; i < count; ++i) {
      meta = chart.getDatasetMeta(i);
      line = meta.dataset;
      source = null;
      if (line && line.options && line instanceof Line) {
        source = {
          visible: chart.isDatasetVisible(i),
          fill: decodeFill(line, i, count),
          chart: chart,
          scale: meta.vScale,
          line: line,
          target: undefined
        };
      }
      meta.$filler = source;
      sources.push(source);
    }
    for (i = 0; i < count; ++i) {
      source = sources[i];
      if (!source || source.fill === false) {
        continue;
      }
      source.fill = resolveTarget(sources, i, propagate);
      source.target = source.fill !== false && getTarget(source);
    }
  },
  beforeDatasetsDraw: function beforeDatasetsDraw(chart) {
    var metasets = chart.getSortedVisibleDatasetMetas();
    var area = chart.chartArea;
    var i, meta;
    for (i = metasets.length - 1; i >= 0; --i) {
      meta = metasets[i].$filler;
      if (meta) {
        meta.line.updateControlPoints(area);
      }
    }
  },
  beforeDatasetDraw: function beforeDatasetDraw(chart, args) {
    var area = chart.chartArea;
    var ctx = chart.ctx;
    var meta = args.meta.$filler;
    if (!meta || meta.fill === false) {
      return;
    }
    var line = meta.line,
        target = meta.target,
        scale = meta.scale;
    var lineOpts = line.options;
    var fillOption = lineOpts.fill;
    var color = lineOpts.backgroundColor || defaults.color;
    var _ref3 = fillOption || {},
        _ref3$above = _ref3.above,
        above = _ref3$above === void 0 ? color : _ref3$above,
        _ref3$below = _ref3.below,
        below = _ref3$below === void 0 ? color : _ref3$below;
    if (target && line.points.length) {
      clipArea(ctx, area);
      doFill(ctx, {
        line: line,
        target: target,
        above: above,
        below: below,
        area: area,
        scale: scale
      });
      unclipArea(ctx);
    }
  }
};

defaults.set('legend', {
  display: true,
  position: 'top',
  align: 'center',
  fullWidth: true,
  reverse: false,
  weight: 1000,
  onClick: function onClick(e, legendItem) {
    var index = legendItem.datasetIndex;
    var ci = this.chart;
    if (ci.isDatasetVisible(index)) {
      ci.hide(index);
      legendItem.hidden = true;
    } else {
      ci.show(index);
      legendItem.hidden = false;
    }
  },
  onHover: null,
  onLeave: null,
  labels: {
    boxWidth: 40,
    padding: 10,
    generateLabels: function generateLabels(chart) {
      var datasets = chart.data.datasets;
      var options = chart.options.legend || {};
      var type = chart.config.type;
      var usePointStyle = options.labels && options.labels.usePointStyle;
      return chart._getSortedDatasetMetas().map(function (meta) {
        var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
        return {
          text: datasets[meta.index].label,
          fillStyle: style.backgroundColor,
          hidden: !meta.visible,
          lineCap: style.borderCapStyle,
          lineDash: style.borderDash,
          lineDashOffset: style.borderDashOffset,
          lineJoin: style.borderJoinStyle,
          lineWidth: style.borderWidth,
          strokeStyle: style.borderColor,
          pointStyle: style.pointStyle,
          rotation: style.rotation,
          legendIcon: datasets[meta.index].legendIcon,
          type: type,
          datasetIndex: meta.index
        };
      }, this);
    }
  },
  title: {
    display: false,
    position: 'center',
    text: ''
  }
});
function getBoxWidth(labelOpts, fontSize) {
  return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;
}
var Legend = function (_Element) {
  _inherits(Legend, _Element);
  var _super = _createSuper(Legend);
  function Legend(config) {
    var _this;
    _classCallCheck(this, Legend);
    _this = _super.call(this);
    _extends(_assertThisInitialized(_this), config);
    _this.legendHitBoxes = [];
    _this._hoveredItem = null;
    _this.doughnutMode = false;
    _this.chart = config.chart;
    _this.options = config.options;
    _this.ctx = config.ctx;
    _this.legendItems = undefined;
    _this.columnWidths = undefined;
    _this.columnHeights = undefined;
    _this.lineWidths = undefined;
    _this._minSize = undefined;
    _this.maxHeight = undefined;
    _this.maxWidth = undefined;
    _this.top = undefined;
    _this.bottom = undefined;
    _this.left = undefined;
    _this.right = undefined;
    _this.height = undefined;
    _this.width = undefined;
    _this._margins = undefined;
    _this.paddingTop = undefined;
    _this.paddingBottom = undefined;
    _this.paddingLeft = undefined;
    _this.paddingRight = undefined;
    _this.position = undefined;
    _this.weight = undefined;
    _this.fullWidth = undefined;
    return _this;
  }
  _createClass(Legend, [{
    key: "beforeUpdate",
    value: function beforeUpdate() {}
  }, {
    key: "update",
    value: function update(maxWidth, maxHeight, margins) {
      var me = this;
      me.beforeUpdate();
      me.maxWidth = maxWidth;
      me.maxHeight = maxHeight;
      me._margins = margins;
      me.beforeSetDimensions();
      me.setDimensions();
      me.afterSetDimensions();
      me.beforeBuildLabels();
      me.buildLabels();
      me.afterBuildLabels();
      me.beforeFit();
      me.fit();
      me.afterFit();
      me.afterUpdate();
    }
  }, {
    key: "afterUpdate",
    value: function afterUpdate() {}
  }, {
    key: "beforeSetDimensions",
    value: function beforeSetDimensions() {}
  }, {
    key: "setDimensions",
    value: function setDimensions() {
      var me = this;
      if (me.isHorizontal()) {
        me.width = me.maxWidth;
        me.left = 0;
        me.right = me.width;
      } else {
        me.height = me.maxHeight;
        me.top = 0;
        me.bottom = me.height;
      }
      me.paddingLeft = 0;
      me.paddingTop = 0;
      me.paddingRight = 0;
      me.paddingBottom = 0;
      me._minSize = {
        width: 0,
        height: 0
      };
    }
  }, {
    key: "afterSetDimensions",
    value: function afterSetDimensions() {}
  }, {
    key: "beforeBuildLabels",
    value: function beforeBuildLabels() {}
  }, {
    key: "buildLabels",
    value: function buildLabels() {
      var me = this;
      var labelOpts = me.options.labels || {};
      var legendItems = callback(labelOpts.generateLabels, [me.chart], me) || [];
      if (labelOpts.filter) {
        legendItems = legendItems.filter(function (item) {
          return labelOpts.filter(item, me.chart.data);
        });
      }
      if (me.options.reverse) {
        legendItems.reverse();
      }
      me.legendItems = legendItems;
    }
  }, {
    key: "afterBuildLabels",
    value: function afterBuildLabels() {}
  }, {
    key: "beforeFit",
    value: function beforeFit() {}
  }, {
    key: "fit",
    value: function fit() {
      var me = this;
      var opts = me.options;
      var labelOpts = opts.labels;
      var display = opts.display;
      var ctx = me.ctx;
      var labelFont = _parseFont(labelOpts);
      var fontSize = labelFont.size;
      var hitboxes = me.legendHitBoxes = [];
      var minSize = me._minSize;
      var isHorizontal = me.isHorizontal();
      var titleHeight = me._computeTitleHeight();
      if (isHorizontal) {
        minSize.width = me.maxWidth;
        minSize.height = display ? 10 : 0;
      } else {
        minSize.width = display ? 10 : 0;
        minSize.height = me.maxHeight;
      }
      if (!display) {
        me.width = minSize.width = me.height = minSize.height = 0;
        return;
      }
      ctx.font = labelFont.string;
      if (isHorizontal) {
        var lineWidths = me.lineWidths = [0];
        var totalHeight = titleHeight;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        me.legendItems.forEach(function (legendItem, i) {
          var boxWidth = getBoxWidth(labelOpts, fontSize);
          var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
          if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
            totalHeight += fontSize + labelOpts.padding;
            lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
          }
          hitboxes[i] = {
            left: 0,
            top: 0,
            width: width,
            height: fontSize
          };
          lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
        });
        minSize.height += totalHeight;
      } else {
        var vPadding = labelOpts.padding;
        var columnWidths = me.columnWidths = [];
        var columnHeights = me.columnHeights = [];
        var totalWidth = labelOpts.padding;
        var currentColWidth = 0;
        var currentColHeight = 0;
        var heightLimit = minSize.height - titleHeight;
        me.legendItems.forEach(function (legendItem, i) {
          var boxWidth = getBoxWidth(labelOpts, fontSize);
          var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
          if (i > 0 && currentColHeight + fontSize + 2 * vPadding > heightLimit) {
            totalWidth += currentColWidth + labelOpts.padding;
            columnWidths.push(currentColWidth);
            columnHeights.push(currentColHeight);
            currentColWidth = 0;
            currentColHeight = 0;
          }
          currentColWidth = Math.max(currentColWidth, itemWidth);
          currentColHeight += fontSize + vPadding;
          hitboxes[i] = {
            left: 0,
            top: 0,
            width: itemWidth,
            height: fontSize
          };
        });
        totalWidth += currentColWidth;
        columnWidths.push(currentColWidth);
        columnHeights.push(currentColHeight);
        minSize.width += totalWidth;
      }
      me.width = minSize.width;
      me.height = minSize.height;
    }
  }, {
    key: "afterFit",
    value: function afterFit() {}
  }, {
    key: "isHorizontal",
    value: function isHorizontal() {
      return this.options.position === 'top' || this.options.position === 'bottom';
    }
  }, {
    key: "draw",
    value: function draw() {
      var me = this;
      var opts = me.options;
      var labelOpts = opts.labels;
      var defaultColor = defaults.color;
      var lineDefault = defaults.elements.line;
      var legendHeight = me.height;
      var columnHeights = me.columnHeights;
      var legendWidth = me.width;
      var lineWidths = me.lineWidths;
      if (!opts.display) {
        return;
      }
      me.drawTitle();
      var rtlHelper = getRtlAdapter(opts.rtl, me.left, me._minSize.width);
      var ctx = me.ctx;
      var fontColor = valueOrDefault(labelOpts.fontColor, defaults.fontColor);
      var labelFont = _parseFont(labelOpts);
      var fontSize = labelFont.size;
      var cursor;
      ctx.textAlign = rtlHelper.textAlign('left');
      ctx.textBaseline = 'middle';
      ctx.lineWidth = 0.5;
      ctx.strokeStyle = fontColor;
      ctx.fillStyle = fontColor;
      ctx.font = labelFont.string;
      var boxWidth = getBoxWidth(labelOpts, fontSize);
      var hitboxes = me.legendHitBoxes;
      var drawLegendBox = function drawLegendBox(x, y, legendItem) {
        if (isNaN(boxWidth) || boxWidth <= 0) {
          return;
        }
        ctx.save();
        var lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
        var legendIcon = legendItem.legendIcon || legendItem.type || 'rect';
        ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
        ctx.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
        ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
        ctx.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
        if (ctx.setLineDash) {
          ctx.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));
        }
        if (labelOpts && labelOpts.usePointStyle) {
          var drawOptions = {
            radius: boxWidth * Math.SQRT2 / 3,
            pointStyle: legendItem.pointStyle,
            rotation: legendItem.rotation,
            borderWidth: lineWidth
          };
          var centerX = rtlHelper.xPlus(x, boxWidth / 2);
          var centerY = y + fontSize / 2;
          drawPoint(ctx, drawOptions, centerX, centerY);
        } else {
          ctx.beginPath();
          var _centerX = rtlHelper.xPlus(x, boxWidth) - 5;
          var _centerY = y + fontSize / 2;
          if (legendIcon === 'arc') {
            ctx.arc(_centerX, _centerY, 5, 0, 2 * Math.PI);
          } else if (legendIcon === 'bar') {
            ctx.rect(_centerX - 5, _centerY - 4, 3, fontSize / 2 + 3);
            ctx.rect(_centerX, _centerY - 1, 3, fontSize / 2);
          } else if (legendIcon === 'line') {
            ctx.rect(_centerX - 10, _centerY - 2, 16, 2);
            ctx.arc(_centerX - 2, _centerY - 1, 3, 0, 2 * Math.PI);
          } else {
            ctx.rect(rtlHelper.leftForLtr(x, boxWidth) + boxWidth / 2, y, boxWidth / 2, fontSize);
          }
          ctx.fill();
          ctx.stroke();
        }
        ctx.restore();
      };
      var fillText = function fillText(x, y, legendItem, textWidth) {
        ctx.save();
        var halfFontSize = fontSize / 2;
        var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
        var yMiddle = y + halfFontSize;
        if (legendItem.hidden) {
          ctx.strokeStyle = "#afafaf";
          ctx.fillStyle = "#afafaf";
          ctx.fill();
          ctx.stroke();
        }
        ctx.fillText(legendItem.text, xLeft, yMiddle);
        ctx.restore();
      };
      var alignmentOffset = function alignmentOffset(dimension, blockSize) {
        switch (opts.align) {
          case 'start':
            return labelOpts.padding;
          case 'end':
            return dimension - blockSize;
          default:
            return (dimension - blockSize + labelOpts.padding) / 2;
        }
      };
      var isHorizontal = me.isHorizontal();
      var titleHeight = this._computeTitleHeight();
      if (isHorizontal) {
        cursor = {
          x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
          y: me.top + labelOpts.padding + titleHeight,
          line: 0
        };
      } else {
        cursor = {
          x: me.left + labelOpts.padding,
          y: me.top + alignmentOffset(legendHeight, columnHeights[0]) + titleHeight,
          line: 0
        };
      }
      overrideTextDirection(me.ctx, opts.textDirection);
      var itemHeight = fontSize + labelOpts.padding;
      me.legendItems.forEach(function (legendItem, i) {
        var textWidth = ctx.measureText(legendItem.text).width;
        var width = boxWidth + fontSize / 2 + textWidth;
        var x = cursor.x;
        var y = cursor.y;
        rtlHelper.setWidth(me._minSize.width);
        if (isHorizontal) {
          if (i > 0 && x + width + labelOpts.padding > me.left + me._minSize.width) {
            y = cursor.y += itemHeight;
            cursor.line++;
            x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
          }
        } else if (i > 0 && y + itemHeight > me.top + me._minSize.height) {
          x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
          cursor.line++;
          y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
        }
        var realX = rtlHelper.x(x);
        drawLegendBox(realX, y, legendItem);
        hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
        hitboxes[i].top = y;
        fillText(realX, y, legendItem);
        if (isHorizontal) {
          cursor.x += width + labelOpts.padding;
        } else {
          cursor.y += itemHeight;
        }
      });
      restoreTextDirection(me.ctx, opts.textDirection);
    }
  }, {
    key: "drawTitle",
    value: function drawTitle() {
      var me = this;
      var opts = me.options;
      var titleOpts = opts.title;
      var titleFont = _parseFont(titleOpts);
      var titlePadding = toPadding(titleOpts.padding);
      if (!titleOpts.display) {
        return;
      }
      var rtlHelper = getRtlAdapter(opts.rtl, me.left, me._minSize.width);
      var ctx = me.ctx;
      var fontColor = valueOrDefault(titleOpts.fontColor, defaults.fontColor);
      var position = titleOpts.position;
      var x, textAlign;
      var halfFontSize = titleFont.size / 2;
      var y = me.top + titlePadding.top + halfFontSize;
      var left = me.left;
      var maxWidth = me.width;
      if (this.isHorizontal()) {
        maxWidth = Math.max.apply(Math, _toConsumableArray(me.lineWidths));
        switch (opts.align) {
          case 'start':
            break;
          case 'end':
            left = me.right - maxWidth;
            break;
          default:
            left = (me.left + me.right) / 2 - maxWidth / 2;
            break;
        }
      } else {
        var maxHeight = Math.max.apply(Math, _toConsumableArray(me.columnHeights));
        switch (opts.align) {
          case 'start':
            break;
          case 'end':
            y += me.height - maxHeight;
            break;
          default:
            y += (me.height - maxHeight) / 2;
            break;
        }
      }
      switch (position) {
        case 'start':
          x = left;
          textAlign = 'left';
          break;
        case 'end':
          x = left + maxWidth;
          textAlign = 'right';
          break;
        default:
          x = left + maxWidth / 2;
          textAlign = 'center';
          break;
      }
      ctx.textAlign = rtlHelper.textAlign(textAlign);
      ctx.textBaseline = 'middle';
      ctx.strokeStyle = fontColor;
      ctx.fillStyle = fontColor;
      ctx.font = titleFont.string;
      ctx.fillText(titleOpts.text, x, y);
    }
  }, {
    key: "_computeTitleHeight",
    value: function _computeTitleHeight() {
      var titleOpts = this.options.title;
      var titleFont = _parseFont(titleOpts);
      var titlePadding = toPadding(titleOpts.padding);
      return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
    }
  }, {
    key: "_getLegendItemAt",
    value: function _getLegendItemAt(x, y) {
      var me = this;
      var i, hitBox, lh;
      if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
        lh = me.legendHitBoxes;
        for (i = 0; i < lh.length; ++i) {
          hitBox = lh[i];
          if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
            return me.legendItems[i];
          }
        }
      }
      return null;
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(e) {
      var me = this;
      var opts = me.options;
      var type = e.type === 'mouseup' ? 'click' : e.type;
      if (type === 'mousemove') {
        if (!opts.onHover && !opts.onLeave) {
          return;
        }
      } else if (type === 'click') {
        if (!opts.onClick) {
          return;
        }
      } else {
        return;
      }
      var hoveredItem = me._getLegendItemAt(e.x, e.y);
      if (type === 'click') {
        if (hoveredItem && opts.onClick) {
          opts.onClick.call(me, e.native, hoveredItem);
        }
      } else {
        if (opts.onLeave && hoveredItem !== me._hoveredItem) {
          if (me._hoveredItem) {
            opts.onLeave.call(me, e.native, me._hoveredItem);
          }
          me._hoveredItem = hoveredItem;
        }
        if (opts.onHover && hoveredItem) {
          opts.onHover.call(me, e.native, hoveredItem);
        }
      }
    }
  }]);
  return Legend;
}(Element$1);
function createNewLegendAndAttach(chart, legendOpts) {
  var legend = new Legend({
    ctx: chart.ctx,
    options: legendOpts,
    chart: chart
  });
  layouts.configure(chart, legend, legendOpts);
  layouts.addBox(chart, legend);
  chart.legend = legend;
}
var legend = {
  id: 'legend',
  _element: Legend,
  beforeInit: function beforeInit(chart) {
    var legendOpts = chart.options.legend;
    if (legendOpts) {
      createNewLegendAndAttach(chart, legendOpts);
    }
  },
  afterUpdate: function afterUpdate(chart) {
    var legendOpts = chart.options.legend;
    var legend = chart.legend;
    if (legendOpts) {
      mergeIf(legendOpts, defaults.legend);
      if (legend) {
        layouts.configure(chart, legend, legendOpts);
        legend.options = legendOpts;
        legend.buildLabels();
      } else {
        createNewLegendAndAttach(chart, legendOpts);
      }
    } else if (legend) {
      layouts.removeBox(chart, legend);
      delete chart.legend;
    }
  },
  afterEvent: function afterEvent(chart, e) {
    var legend = chart.legend;
    if (legend) {
      legend.handleEvent(e);
    }
  }
};

defaults.set('title', {
  align: 'center',
  display: false,
  fontStyle: 'bold',
  fullWidth: true,
  padding: 10,
  position: 'top',
  text: '',
  weight: 2000
});
var Title = function (_Element) {
  _inherits(Title, _Element);
  var _super = _createSuper(Title);
  function Title(config) {
    var _this;
    _classCallCheck(this, Title);
    _this = _super.call(this);
    _extends(_assertThisInitialized(_this), config);
    _this.chart = config.chart;
    _this.options = config.options;
    _this.ctx = config.ctx;
    _this._margins = undefined;
    _this._padding = undefined;
    _this.legendHitBoxes = [];
    _this.top = undefined;
    _this.bottom = undefined;
    _this.left = undefined;
    _this.right = undefined;
    _this.width = undefined;
    _this.height = undefined;
    _this.maxWidth = undefined;
    _this.maxHeight = undefined;
    _this.position = undefined;
    _this.weight = undefined;
    _this.fullWidth = undefined;
    return _this;
  }
  _createClass(Title, [{
    key: "beforeUpdate",
    value: function beforeUpdate() {}
  }, {
    key: "update",
    value: function update(maxWidth, maxHeight, margins) {
      var me = this;
      me.beforeUpdate();
      me.maxWidth = maxWidth;
      me.maxHeight = maxHeight;
      me._margins = margins;
      me.beforeSetDimensions();
      me.setDimensions();
      me.afterSetDimensions();
      me.beforeBuildLabels();
      me.buildLabels();
      me.afterBuildLabels();
      me.beforeFit();
      me.fit();
      me.afterFit();
      me.afterUpdate();
    }
  }, {
    key: "afterUpdate",
    value: function afterUpdate() {}
  }, {
    key: "beforeSetDimensions",
    value: function beforeSetDimensions() {}
  }, {
    key: "setDimensions",
    value: function setDimensions() {
      var me = this;
      if (me.isHorizontal()) {
        me.width = me.maxWidth;
        me.left = 0;
        me.right = me.width;
      } else {
        me.height = me.maxHeight;
        me.top = 0;
        me.bottom = me.height;
      }
    }
  }, {
    key: "afterSetDimensions",
    value: function afterSetDimensions() {}
  }, {
    key: "beforeBuildLabels",
    value: function beforeBuildLabels() {}
  }, {
    key: "buildLabels",
    value: function buildLabels() {}
  }, {
    key: "afterBuildLabels",
    value: function afterBuildLabels() {}
  }, {
    key: "beforeFit",
    value: function beforeFit() {}
  }, {
    key: "fit",
    value: function fit() {
      var me = this;
      var opts = me.options;
      var minSize = {};
      var isHorizontal = me.isHorizontal();
      if (!opts.display) {
        me.width = minSize.width = me.height = minSize.height = 0;
        return;
      }
      var lineCount = helpers.isArray(opts.text) ? opts.text.length : 1;
      me._padding = helpers.options.toPadding(opts.padding);
      var textSize = lineCount * helpers.options._parseFont(opts).lineHeight + me._padding.height;
      me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
      me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
    }
  }, {
    key: "afterFit",
    value: function afterFit() {}
  }, {
    key: "isHorizontal",
    value: function isHorizontal() {
      var pos = this.options.position;
      return pos === 'top' || pos === 'bottom';
    }
  }, {
    key: "draw",
    value: function draw() {
      var me = this;
      var ctx = me.ctx;
      var opts = me.options;
      if (!opts.display) {
        return;
      }
      var fontOpts = helpers.options._parseFont(opts);
      var lineHeight = fontOpts.lineHeight;
      var offset = lineHeight / 2 + me._padding.top;
      var rotation = 0;
      var top = me.top;
      var left = me.left;
      var bottom = me.bottom;
      var right = me.right;
      var maxWidth, titleX, titleY;
      var align;
      if (me.isHorizontal()) {
        switch (opts.align) {
          case 'start':
            titleX = left;
            align = 'left';
            break;
          case 'end':
            titleX = right;
            align = 'right';
            break;
          default:
            titleX = left + (right - left) / 2;
            align = 'center';
            break;
        }
        titleY = top + offset;
        maxWidth = right - left;
      } else {
        titleX = opts.position === 'left' ? left + offset : right - offset;
        switch (opts.align) {
          case 'start':
            titleY = opts.position === 'left' ? bottom : top;
            align = 'left';
            break;
          case 'end':
            titleY = opts.position === 'left' ? top : bottom;
            align = 'right';
            break;
          default:
            titleY = top + (bottom - top) / 2;
            align = 'center';
            break;
        }
        maxWidth = bottom - top;
        rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
      }
      ctx.save();
      ctx.fillStyle = helpers.valueOrDefault(opts.fontColor, defaults.fontColor);
      ctx.font = fontOpts.string;
      ctx.translate(titleX, titleY);
      ctx.rotate(rotation);
      ctx.textAlign = align;
      ctx.textBaseline = 'middle';
      var text = opts.text;
      if (helpers.isArray(text)) {
        var y = 0;
        for (var i = 0; i < text.length; ++i) {
          ctx.fillText(text[i], 0, y, maxWidth);
          y += lineHeight;
        }
      } else {
        ctx.fillText(text, 0, 0, maxWidth);
      }
      ctx.restore();
    }
  }]);
  return Title;
}(Element$1);
function createNewTitleBlockAndAttach(chart, titleOpts) {
  var title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart: chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var title = {
  id: 'title',
  _element: Title,
  beforeInit: function beforeInit(chart) {
    var titleOpts = chart.options.title;
    if (titleOpts) {
      createNewTitleBlockAndAttach(chart, titleOpts);
    }
  },
  beforeUpdate: function beforeUpdate(chart) {
    var titleOpts = chart.options.title;
    var titleBlock = chart.titleBlock;
    if (titleOpts) {
      helpers.mergeIf(titleOpts, defaults.title);
      if (titleBlock) {
        layouts.configure(chart, titleBlock, titleOpts);
        titleBlock.options = titleOpts;
      } else {
        createNewTitleBlockAndAttach(chart, titleOpts);
      }
    } else if (titleBlock) {
      layouts.removeBox(chart, titleBlock);
      delete chart.titleBlock;
    }
  }
};

var valueOrDefault$3 = helpers.valueOrDefault;
var getRtlHelper = helpers.rtl.getRtlAdapter;
function getDataYValue(current) {
  var value = 0;
  if (Object.prototype.hasOwnProperty.call(current, 'y') && typeof current.y === 'number') {
    value = current.y;
  }
  if (typeof current === 'number') {
    value = current;
  }
  if (Array.isArray(current) && current.length > 0) {
    value = current.slice(-1)[0];
  }
  return value;
}
defaults.set('tooltips', {
  enabled: true,
  custom: null,
  mode: 'nearest',
  position: 'average',
  intersect: true,
  backgroundColor: 'rgba(0,0,0,0.8)',
  titleFontStyle: 'bold',
  titleSpacing: 2,
  titleMarginBottom: 6,
  titleFontColor: '#fff',
  titleAlign: 'left',
  bodySpacing: 2,
  bodyFontColor: '#fff',
  bodyAlign: 'left',
  footerFontStyle: 'bold',
  footerSpacing: 2,
  footerMarginTop: 6,
  footerFontColor: '#fff',
  footerAlign: 'left',
  yPadding: 6,
  xPadding: 6,
  caretPadding: 2,
  caretSize: 5,
  cornerRadius: 6,
  multiKeyBackground: '#fff',
  displayColors: true,
  borderColor: 'rgba(0,0,0,0)',
  borderWidth: 0,
  percentage: false,
  animation: {
    duration: 400,
    easing: 'easeOutQuart',
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']
    },
    opacity: {
      easing: 'linear',
      duration: 200
    }
  },
  callbacks: {
    beforeTitle: helpers.noop,
    title: function title(tooltipItems, data) {
      var title = '';
      var labels = data.labels;
      var labelCount = labels ? labels.length : 0;
      if (tooltipItems.length > 0) {
        var item = tooltipItems[0];
        if (item.label) {
          title = item.label;
        } else if (labelCount > 0 && item.index < labelCount) {
          title = labels[item.index];
        }
      }
      return title;
    },
    afterTitle: helpers.noop,
    beforeBody: helpers.noop,
    beforeLabel: helpers.noop,
    label: function label(tooltipItem, data) {
      var label = data.datasets[tooltipItem.datasetIndex].label || '';
      if (label) {
        label += ': ';
      }
      var value = tooltipItem.value;
      if (!helpers.isNullOrUndef(value)) {
        label += value;
      }
      if (this.options.percentage) {
        var totoalData = data.datasets[tooltipItem.datasetIndex].data;
        var sum = totoalData.reduce(function (pre, current) {
          pre += getDataYValue(current);
          return pre;
        }, 0);
        if (typeof sum === 'number' && sum !== 0) {
          var _value = getDataYValue(totoalData[tooltipItem.index]) / sum * 100000;
          label += " (".concat(Math.round(_value) / 1000, "%)");
        }
      }
      return label;
    },
    labelColor: function labelColor(tooltipItem, chart) {
      var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
      var options = meta.controller.getStyle(tooltipItem.index);
      return {
        borderColor: options.borderColor,
        backgroundColor: options.backgroundColor
      };
    },
    labelTextColor: function labelTextColor() {
      return this.options.bodyFontColor;
    },
    afterLabel: helpers.noop,
    afterBody: helpers.noop,
    beforeFooter: helpers.noop,
    footer: helpers.noop,
    afterFooter: helpers.noop
  },
  zIndex: 1,
  pointerEvents: 'none',
  enableArrow: false
});
var positioners = {
  average: function average(items) {
    if (!items.length) {
      return false;
    }
    var i, len;
    var x = 0;
    var y = 0;
    var count = 0;
    for (i = 0, len = items.length; i < len; ++i) {
      var el = items[i].element;
      if (el && el.hasValue()) {
        var pos = el.tooltipPosition();
        x += pos.x;
        y += pos.y;
        ++count;
      }
    }
    return {
      x: x / count,
      y: y / count
    };
  },
  nearest: function nearest(items, eventPosition) {
    var x = eventPosition.x;
    var y = eventPosition.y;
    var minDistance = Number.POSITIVE_INFINITY;
    var i, len, nearestElement;
    for (i = 0, len = items.length; i < len; ++i) {
      var el = items[i].element;
      if (el && el.hasValue()) {
        var center = el.getCenterPoint();
        var d = helpers.math.distanceBetweenPoints(eventPosition, center);
        if (d < minDistance) {
          minDistance = d;
          nearestElement = el;
        }
      }
    }
    if (nearestElement) {
      var tp = nearestElement.tooltipPosition();
      x = tp.x;
      y = tp.y;
    }
    return {
      x: x,
      y: y
    };
  }
};
function pushOrConcat(base, toPush) {
  if (toPush) {
    if (helpers.isArray(toPush)) {
      Array.prototype.push.apply(base, toPush);
    } else {
      base.push(toPush);
    }
  }
  return base;
}
function splitNewlines(str) {
  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
    return str.split('\n');
  }
  return str;
}
function createTooltipItem(chart, item) {
  var datasetIndex = item.datasetIndex,
      index = item.index;
  var _chart$getDatasetMeta = chart.getDatasetMeta(datasetIndex).controller.getLabelAndValue(index),
      label = _chart$getDatasetMeta.label,
      value = _chart$getDatasetMeta.value;
  return {
    label: label,
    value: value,
    index: index,
    datasetIndex: datasetIndex
  };
}
function resolveOptions(options) {
  options = _extends({}, defaults.tooltips, options);
  options.bodyFontFamily = valueOrDefault$3(options.bodyFontFamily, defaults.fontFamily);
  options.bodyFontStyle = valueOrDefault$3(options.bodyFontStyle, defaults.fontStyle);
  options.bodyFontSize = valueOrDefault$3(options.bodyFontSize, defaults.fontSize);
  options.boxHeight = valueOrDefault$3(options.boxHeight, options.bodyFontSize);
  options.boxWidth = valueOrDefault$3(options.boxWidth, options.bodyFontSize);
  options.titleFontFamily = valueOrDefault$3(options.titleFontFamily, defaults.fontFamily);
  options.titleFontStyle = valueOrDefault$3(options.titleFontStyle, defaults.fontStyle);
  options.titleFontSize = valueOrDefault$3(options.titleFontSize, defaults.fontSize);
  options.footerFontFamily = valueOrDefault$3(options.footerFontFamily, defaults.fontFamily);
  options.footerFontStyle = valueOrDefault$3(options.footerFontStyle, defaults.fontStyle);
  options.footerFontSize = valueOrDefault$3(options.footerFontSize, defaults.fontSize);
  return options;
}
function getTooltipSize(tooltip) {
  var ctx = tooltip._chart.ctx;
  var body = tooltip.body,
      footer = tooltip.footer,
      options = tooltip.options,
      title = tooltip.title;
  var bodyFontSize = options.bodyFontSize,
      footerFontSize = options.footerFontSize,
      titleFontSize = options.titleFontSize,
      boxWidth = options.boxWidth,
      boxHeight = options.boxHeight;
  var titleLineCount = title.length;
  var footerLineCount = footer.length;
  var bodyLineItemCount = body.length;
  var height = options.yPadding * 2;
  var width = 0;
  var combinedBodyLength = body.reduce(function (count, bodyItem) {
    return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
  }, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFontSize + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
  }
  if (combinedBodyLength) {
    var bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFontSize) : bodyFontSize;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFontSize + (combinedBodyLength - 1) * options.bodySpacing;
  }
  if (footerLineCount) {
    height += options.footerMarginTop + footerLineCount * footerFontSize + (footerLineCount - 1) * options.footerSpacing;
  }
  var widthPadding = 0;
  var maxLineWidth = function maxLineWidth(line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };
  ctx.save();
  ctx.font = helpers.fontString(titleFontSize, options.titleFontStyle, options.titleFontFamily);
  helpers.each(tooltip.title, maxLineWidth);
  ctx.font = helpers.fontString(bodyFontSize, options.bodyFontStyle, options.bodyFontFamily);
  helpers.each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? boxWidth + 2 : 0;
  helpers.each(body, function (bodyItem) {
    helpers.each(bodyItem.before, maxLineWidth);
    helpers.each(bodyItem.lines, maxLineWidth);
    helpers.each(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = helpers.fontString(footerFontSize, options.footerFontStyle, options.footerFontFamily);
  helpers.each(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += 2 * options.xPadding;
  return {
    width: width,
    height: height
  };
}
function determineAlignment(chart, options, size) {
  var x = size.x,
      y = size.y,
      width = size.width,
      height = size.height;
  var chartArea = chart.chartArea;
  var xAlign = 'center';
  var yAlign = 'center';
  if (y < height) {
    yAlign = 'top';
  } else if (y > chart.height - height) {
    yAlign = 'bottom';
  }
  var lf, rf;
  var midX = (chartArea.left + chartArea.right) / 2;
  var midY = (chartArea.top + chartArea.bottom) / 2;
  if (yAlign === 'center') {
    lf = function lf(value) {
      return value <= midX;
    };
    rf = function rf(value) {
      return value > midX;
    };
  } else {
    lf = function lf(value) {
      return value <= width / 2;
    };
    rf = function rf(value) {
      return value >= chart.width - width / 2;
    };
  }
  var olf = function olf(value) {
    return value + width + options.caretSize + options.caretPadding > chart.width;
  };
  var orf = function orf(value) {
    return value - width - options.caretSize - options.caretPadding < 0;
  };
  var yf = function yf(value) {
    return value <= midY ? 'top' : 'bottom';
  };
  if (lf(x)) {
    xAlign = 'left';
    if (olf(x)) {
      xAlign = 'center';
      yAlign = yf(y);
    }
  } else if (rf(x)) {
    xAlign = 'right';
    if (orf(x)) {
      xAlign = 'center';
      yAlign = yf(y);
    }
  }
  return {
    xAlign: options.xAlign ? options.xAlign : xAlign,
    yAlign: options.yAlign ? options.yAlign : yAlign
  };
}
function alignX(size, xAlign, chartWidth) {
  var x = size.x,
      width = size.width;
  if (xAlign === 'right') {
    x -= width;
  } else if (xAlign === 'center') {
    x -= width / 2;
    if (x + width > chartWidth) {
      x = chartWidth - width;
    }
    if (x < 0) {
      x = 0;
    }
  }
  return x;
}
function alignY(size, yAlign, paddingAndSize) {
  var y = size.y,
      height = size.height;
  if (yAlign === 'top') {
    y += paddingAndSize;
  } else if (yAlign === 'bottom') {
    y -= height + paddingAndSize;
  } else {
    y -= height / 2;
  }
  return y;
}
function getBackgroundPoint(options, size, alignment, chart) {
  var caretSize = options.caretSize,
      caretPadding = options.caretPadding,
      cornerRadius = options.cornerRadius;
  var xAlign = alignment.xAlign,
      yAlign = alignment.yAlign;
  var paddingAndSize = caretSize + caretPadding;
  var radiusAndPadding = cornerRadius + caretPadding;
  var x = alignX(size, xAlign, chart.width);
  var y = alignY(size, yAlign, paddingAndSize);
  if (yAlign === 'center') {
    if (xAlign === 'left') {
      x += paddingAndSize;
    } else if (xAlign === 'right') {
      x -= paddingAndSize;
    }
  } else if (xAlign === 'left') {
    x -= radiusAndPadding;
  } else if (xAlign === 'right') {
    x += radiusAndPadding;
  }
  return {
    x: x,
    y: y
  };
}
function getAlignedX(tooltip, align) {
  var options = tooltip.options;
  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - options.xPadding : tooltip.x + options.xPadding;
}
function getBeforeAfterBodyLines(callback) {
  return pushOrConcat([], splitNewlines(callback));
}
var Tooltip = function (_Element) {
  _inherits(Tooltip, _Element);
  var _super = _createSuper(Tooltip);
  function Tooltip(config) {
    var _this;
    _classCallCheck(this, Tooltip);
    _this = _super.call(this);
    _this.opacity = 0;
    _this._active = [];
    _this._chart = config._chart;
    _this._eventPosition = undefined;
    _this._size = undefined;
    _this._cachedAnimations = undefined;
    _this._tooltips = undefined;
    _this.$animations = undefined;
    _this.options = undefined;
    _this.dataPoints = undefined;
    _this.title = undefined;
    _this.beforeBody = undefined;
    _this.body = undefined;
    _this.afterBody = undefined;
    _this.footer = undefined;
    _this.xAlign = undefined;
    _this.yAlign = undefined;
    _this.x = undefined;
    _this.y = undefined;
    _this.height = undefined;
    _this.width = undefined;
    _this.caretX = undefined;
    _this.caretY = undefined;
    _this.labelColors = undefined;
    _this.labelTextColors = undefined;
    _this.initialize();
    return _this;
  }
  _createClass(Tooltip, [{
    key: "initialize",
    value: function initialize() {
      var me = this;
      me.options = resolveOptions(me._chart.options.tooltips);
      me._createTooltipContainer(me._chart);
    }
  }, {
    key: "_createTooltipContainer",
    value: function _createTooltipContainer(chart) {
      var me = this;
      var tipsContainer = chart.container.querySelector('[data-bkcharts-tooltips]');
      var timestamp = new Date().getTime();
      if (!me._tooltips) {
        me._tooltips = {};
      }
      if (!tipsContainer) {
        tipsContainer = document.createElement('div');
        tipsContainer.setAttribute('style', 'position: absolute;');
        tipsContainer.setAttribute('data-bkcharts-tooltips', "".concat(timestamp));
        chart.container.append(tipsContainer);
      }
      tipsContainer.style['z-index'] = me.options.zIndex;
      tipsContainer.style['pointer-events'] = me.options.pointerEvents;
      me._tooltips.Container = tipsContainer;
      me._tooltips['timestamp'] = timestamp;
      ['title', 'body', 'footer', 'arrow'].forEach(function (section) {
        return me._createTooltipsSection(tipsContainer, section, timestamp);
      });
    }
  }, {
    key: "_createTooltipsSection",
    value: function _createTooltipsSection(tipsContainer) {
      var section = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var timestamp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var me = this;
      if (tipsContainer && section) {
        var sectionDiv = tipsContainer.querySelector("[data-tooltips-".concat(section, "]"));
        if (!sectionDiv) {
          sectionDiv = document.createElement('div');
          sectionDiv.setAttribute("data-tooltips-".concat(section), "".concat(timestamp));
          tipsContainer.append(sectionDiv);
        }
        me._tooltips[section] = sectionDiv;
      }
    }
  }, {
    key: "_resolveAnimations",
    value: function _resolveAnimations() {
      var me = this;
      var cached = me._cachedAnimations;
      if (cached) {
        return cached;
      }
      var chart = me._chart;
      var opts = chart.options.animation && me.options.animation;
      var animations = new Animations(me._chart, opts);
      me._cachedAnimations = Object.freeze(animations);
      return animations;
    }
  }, {
    key: "getTitle",
    value: function getTitle(tooltipitem, data) {
      var me = this;
      var opts = me.options;
      var callbacks = opts.callbacks;
      var beforeTitle = callbacks.beforeTitle.apply(me, [tooltipitem, data]);
      var title = callbacks.title.apply(me, [tooltipitem, data]);
      var afterTitle = callbacks.afterTitle.apply(me, [tooltipitem, data]);
      var lines = [];
      lines = pushOrConcat(lines, splitNewlines(beforeTitle));
      lines = pushOrConcat(lines, splitNewlines(title));
      lines = pushOrConcat(lines, splitNewlines(afterTitle));
      return lines;
    }
  }, {
    key: "getBeforeBody",
    value: function getBeforeBody(tooltipitem, data) {
      return getBeforeAfterBodyLines(this.options.callbacks.beforeBody.apply(this, [tooltipitem, data]));
    }
  }, {
    key: "getBody",
    value: function getBody(tooltipItems, data) {
      var me = this;
      var callbacks = me.options.callbacks;
      var bodyItems = [];
      helpers.each(tooltipItems, function (tooltipItem) {
        var bodyItem = {
          before: [],
          lines: [],
          after: []
        };
        pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
        pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
        pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));
        bodyItems.push(bodyItem);
      });
      return bodyItems;
    }
  }, {
    key: "getAfterBody",
    value: function getAfterBody(tooltipitem, data) {
      return getBeforeAfterBodyLines(this.options.callbacks.afterBody.apply(this, [tooltipitem, data]));
    }
  }, {
    key: "getFooter",
    value: function getFooter(tooltipitem, data) {
      var me = this;
      var callbacks = me.options.callbacks;
      var beforeFooter = callbacks.beforeFooter.apply(me, [tooltipitem, data]);
      var footer = callbacks.footer.apply(me, [tooltipitem, data]);
      var afterFooter = callbacks.afterFooter.apply(me, [tooltipitem, data]);
      var lines = [];
      lines = pushOrConcat(lines, splitNewlines(beforeFooter));
      lines = pushOrConcat(lines, splitNewlines(footer));
      lines = pushOrConcat(lines, splitNewlines(afterFooter));
      return lines;
    }
  }, {
    key: "_createItems",
    value: function _createItems() {
      var me = this;
      var active = me._active;
      var options = me.options;
      var data = me._chart.data;
      var labelColors = [];
      var labelTextColors = [];
      var tooltipItems = [];
      var i, len;
      for (i = 0, len = active.length; i < len; ++i) {
        tooltipItems.push(createTooltipItem(me._chart, active[i]));
      }
      if (options.filter) {
        tooltipItems = tooltipItems.filter(function (a) {
          return options.filter(a, data);
        });
      }
      if (options.itemSort) {
        tooltipItems = tooltipItems.sort(function (a, b) {
          return options.itemSort(a, b, data);
        });
      }
      helpers.each(tooltipItems, function (tooltipItem) {
        labelColors.push(options.callbacks.labelColor.call(me, tooltipItem, me._chart));
        labelTextColors.push(options.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
      });
      me.labelColors = labelColors;
      me.labelTextColors = labelTextColors;
      me.dataPoints = tooltipItems;
      return tooltipItems;
    }
  }, {
    key: "update",
    value: function update(changed) {
      var me = this;
      var options = me.options;
      var active = me._active;
      var properties;
      if (!active.length) {
        if (me.opacity !== 0) {
          properties = {
            opacity: 0
          };
        }
      } else {
        var data = me._chart.data;
        var position = positioners[options.position].call(me, active, me._eventPosition);
        var tooltipItems = me._createItems();
        me.title = me.getTitle(tooltipItems, data);
        me.beforeBody = me.getBeforeBody(tooltipItems, data);
        me.body = me.getBody(tooltipItems, data);
        me.afterBody = me.getAfterBody(tooltipItems, data);
        me.footer = me.getFooter(tooltipItems, data);
        var size = me._size = getTooltipSize(me);
        var positionAndSize = _extends({}, position, size);
        var alignment = determineAlignment(me._chart, options, positionAndSize);
        var backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, me._chart);
        me.xAlign = alignment.xAlign;
        me.yAlign = alignment.yAlign;
        properties = {
          opacity: 1,
          x: backgroundPoint.x,
          y: backgroundPoint.y,
          width: size.width,
          height: size.height,
          caretX: position.x,
          caretY: position.y
        };
      }
      if (properties) {
        me._resolveAnimations().update(me, properties);
      }
      if (changed && options.custom) {
        options.custom.call(me, me._tooltips.Container, me._tooltips);
      }
    }
  }, {
    key: "drawCaret",
    value: function drawCaret(tooltipPoint, ctx, size) {
      var caretPosition = this.getCaretPosition(tooltipPoint, size);
      var x1 = caretPosition.x1,
          x2 = caretPosition.x2,
          x3 = caretPosition.x3,
          y1 = caretPosition.y1,
          y2 = caretPosition.y2,
          y3 = caretPosition.y3;
      var me = this;
      var height = Math.abs(x1 - x2);
      var color = me.options.backgroundColor;
      me._tooltips.arrow.style['position'] = 'absolute';
      me._tooltips.arrow.style['top'] = '50%';
      me._tooltips.arrow.style['display'] = 'inline-block';
      me._tooltips.arrow.style['border-left'] = "solid ".concat(height, "px ").concat(color);
      me._tooltips.arrow.style['border-top'] = "solid ".concat(height, "px ").concat(color);
      me._tooltips.arrow.style['border-right'] = "solid ".concat(height, "px transparent");
      me._tooltips.arrow.style['border-bottom'] = "solid ".concat(height, "px transparent");
      me._tooltips.arrow.style['transform'] = "translate(-100%, -50%) rotate(-45deg)";
    }
  }, {
    key: "getCaretPosition",
    value: function getCaretPosition(tooltipPoint, size) {
      var xAlign = this.xAlign,
          yAlign = this.yAlign,
          options = this.options;
      var cornerRadius = options.cornerRadius,
          caretSize = options.caretSize;
      var ptX = tooltipPoint.x,
          ptY = tooltipPoint.y;
      var width = size.width,
          height = size.height;
      var x1, x2, x3, y1, y2, y3;
      if (yAlign === 'center') {
        y2 = ptY + height / 2;
        if (xAlign === 'left') {
          x1 = ptX;
          x2 = x1 - caretSize;
        } else {
          x1 = ptX + width;
          x2 = x1 + caretSize;
        }
        x3 = x1;
        y1 = y2 + caretSize;
        y3 = y2 - caretSize;
      } else {
        if (xAlign === 'left') {
          x2 = ptX + cornerRadius + caretSize;
        } else if (xAlign === 'right') {
          x2 = ptX + width - cornerRadius - caretSize;
        } else {
          x2 = this.caretX;
        }
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
        if (yAlign === 'top') {
          y1 = ptY;
          y2 = y1 - caretSize;
        } else {
          y1 = ptY + height;
          y2 = y1 + caretSize;
        }
        y3 = y1;
      }
      return {
        x1: x1,
        x2: x2,
        x3: x3,
        y1: y1,
        y2: y2,
        y3: y3
      };
    }
  }, {
    key: "drawTitle",
    value: function drawTitle(pt, ctx) {
      var me = this;
      var options = me.options;
      var title = me.title;
      var length = title.length;
      var titleFontSize, titleSpacing, i;
      if (length) {
        var rtlHelper = getRtlHelper(options.rtl, me.x, me.width);
        pt.x = getAlignedX(me, options.titleAlign);
        me._tooltips.title.style['text-align'] = rtlHelper.textAlign(options.titleAlign);
        me._tooltips.title.style['font-size'] = options.titleFontSize;
        me._tooltips.title.style['color'] = options.titleFontColor;
        me._tooltips.title.style['font'] = helpers.fontString(titleFontSize, options.titleFontStyle, options.titleFontFamily);
        titleFontSize = options.titleFontSize;
        titleSpacing = options.titleSpacing;
        var fragment = document.createDocumentFragment();
        for (i = 0; i < length; ++i) {
          var titleLine = document.createElement('div');
          titleLine.innerText = title[i];
          titleLine.style['margin-bottom'] = "".concat(options.titleMarginBottom, "px");
          fragment.append(titleLine);
        }
        me._tooltips.title.innerHTML = null;
        me._tooltips.title.append(fragment);
      }
    }
  }, {
    key: "_drawColorBox",
    value: function _drawColorBox(ctx, pt, i, rtlHelper) {
      var me = this;
      var options = me.options;
      var labelColors = me.labelColors[i];
      var boxHeight = options.boxHeight,
          boxWidth = options.boxWidth,
          bodyFontSize = options.bodyFontSize;
      var colorX = getAlignedX(me, 'left');
      var rtlColorX = rtlHelper.x(colorX);
      var yOffSet = boxHeight < bodyFontSize ? (bodyFontSize - boxHeight) / 2 : 0;
      var colorY = pt.y + yOffSet;
      var colorIcon = document.createElement('span');
      colorIcon.style['background'] = labelColors.backgroundColor;
      colorIcon.style['display'] = 'inline-block';
      colorIcon.style['width'] = "".concat(boxWidth - 2, "px");
      colorIcon.style['height'] = "".concat(boxHeight - 2, "px");
      colorIcon.style['border'] = "solid 1px ".concat(labelColors.borderColor, "px");
      colorIcon.style['margin-right'] = "5px";
      return colorIcon;
    }
  }, {
    key: "drawBody",
    value: function drawBody(pt, ctx) {
      var me = this;
      var body = me.body,
          options = me.options;
      var bodyFontSize = options.bodyFontSize,
          bodySpacing = options.bodySpacing,
          bodyAlign = options.bodyAlign,
          displayColors = options.displayColors,
          boxHeight = options.boxHeight,
          boxWidth = options.boxWidth;
      var rtlHelper = getRtlHelper(options.rtl, me.x, me.width);
      var fillLineOfText = function fillLineOfText(line, parent) {
        var text = document.createElement('span');
        text.innerText = line;
        parent && parent.append(text);
      };
      var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
      var bodyItem, textColor, lines, i, j, ilen, jlen;
      me._tooltips.body.style['text-align'] = bodyAlign;
      me._tooltips.body.style['font'] = helpers.fontString(bodyFontSize, options.bodyFontStyle, options.bodyFontFamily);
      me._tooltips.body.style['color'] = options.bodyFontColor;
      helpers.each(me.beforeBody, function (line) {
        return fillLineOfText(line, me._tooltips.body);
      });
      var bodyFragment = document.createDocumentFragment();
      var _loop = function _loop() {
        bodyItem = body[i];
        textColor = me.labelTextColors[i];
        var row = document.createElement('div');
        row.style['color'] = textColor;
        helpers.each(bodyItem.before, function (line) {
          return fillLineOfText(line, row);
        });
        lines = bodyItem.lines;
        for (j = 0, jlen = lines.length; j < jlen; ++j) {
          var line = document.createElement('div');
          if (displayColors) {
            line.append(me._drawColorBox(ctx, pt, i, rtlHelper));
          }
          fillLineOfText(lines[j], line);
          row.append(line);
        }
        helpers.each(bodyItem.after, function (line) {
          return fillLineOfText(line, row);
        });
        bodyFragment.append(row);
      };
      for (i = 0, ilen = body.length; i < ilen; ++i) {
        _loop();
      }
      helpers.each(me.afterBody, function (line) {
        return fillLineOfText(line, bodyFragment);
      });
      pt.y -= bodySpacing;
      me._tooltips.body.innerHTML = null;
      me._tooltips.body.append(bodyFragment);
    }
  }, {
    key: "drawFooter",
    value: function drawFooter(pt, ctx) {
      var me = this;
      var options = me.options;
      var footer = me.footer;
      var length = footer.length;
      var footerFontSize, i;
      if (length) {
        var rtlHelper = getRtlHelper(options.rtl, me.x, me.width);
        pt.x = getAlignedX(me, options.footerAlign);
        pt.y += options.footerMarginTop;
        me._tooltips.footer.style['text-align'] = rtlHelper.textAlign(options.footerAlign);
        footerFontSize = options.footerFontSize;
        me._tooltips.footer.style['font'] = helpers.fontString(footerFontSize, options.footerFontStyle, options.footerFontFamily);
        var fragment = document.createDocumentFragment();
        for (i = 0; i < length; ++i) {
          var footerText = document.createElement('div');
          fragment.append(footerText);
        }
        me._tooltips.innerHTML = null;
        me._tooltips.append(fragment);
      }
    }
  }, {
    key: "drawBackground",
    value: function drawBackground(pt, ctx, tooltipSize, opacity) {
      var xAlign = this.xAlign,
          yAlign = this.yAlign,
          options = this.options;
      var x = pt.x,
          y = pt.y;
      var width = tooltipSize.width,
          height = tooltipSize.height;
      var radius = options.cornerRadius;
      var me = this;
      me._tooltips.Container.style['border-radius'] = "".concat(radius, "px");
      me._tooltips.Container.style['border-radius'] = "".concat(radius, "px");
      me._tooltips.Container.style['left'] = "".concat(x, "px");
      me._tooltips.Container.style['top'] = "".concat(y, "px");
      me._tooltips.Container.style['opacity'] = opacity;
      me._tooltips.Container.style['background'] = options.backgroundColor;
      me._tooltips.Container.style['border'] = "solid ".concat(options.borderWidth, "px ").concat(options.borderColor);
      me._tooltips.Container.style['padding'] = '5px';
      me.options.enableArrow && me.drawCaret(pt, ctx, tooltipSize);
    }
  }, {
    key: "_updateAnimationTarget",
    value: function _updateAnimationTarget() {
      var me = this;
      var chart = me._chart;
      var options = me.options;
      var anims = me.$animations;
      var animX = anims && anims.x;
      var animY = anims && anims.y;
      if (animX || animY) {
        var position = positioners[options.position].call(me, me._active, me._eventPosition);
        if (!position) {
          return;
        }
        var size = me._size = getTooltipSize(me);
        var positionAndSize = _extends({}, position, me._size);
        var alignment = determineAlignment(chart, options, positionAndSize);
        var point = getBackgroundPoint(options, positionAndSize, alignment, chart);
        if (animX._to !== point.x || animY._to !== point.y) {
          me.xAlign = alignment.xAlign;
          me.yAlign = alignment.yAlign;
          me.width = size.width;
          me.height = size.height;
          me.caretX = position.x;
          me.caretY = position.y;
          me._resolveAnimations().update(me, point);
        }
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx) {
      var me = this;
      var options = me.options;
      var opacity = me.opacity;
      if (!opacity) {
        if (me._tooltips.Container) {
          me._tooltips.Container.style['opacity'] = 0;
          me._tooltips.Container.style['left'] = '-9999px';
        }
        return;
      }
      me._updateAnimationTarget();
      var tooltipSize = {
        width: me.width,
        height: me.height
      };
      var pt = {
        x: me.x,
        y: me.y
      };
      opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
      var hasTooltipContent = me.title.length || me.beforeBody.length || me.body.length || me.afterBody.length || me.footer.length;
      if (options.enabled && hasTooltipContent) {
        me.drawBackground(pt, ctx, tooltipSize, opacity);
        pt.y += options.yPadding;
        if (!me.options.custom) {
          me.drawTitle(pt, ctx);
          me.drawBody(pt, ctx);
          me.drawFooter(pt, ctx);
        }
      }
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(e, replay) {
      var me = this;
      var options = me.options;
      var lastActive = me._active || [];
      var changed = false;
      var active = [];
      if (e.type !== 'mouseout') {
        active = me._chart.getElementsAtEventForMode(e, options.mode, options, replay);
        if (options.reverse) {
          active.reverse();
        }
      } else {
        if (me._chart.options.speedMode) {
          me._tooltips.Container.style['opacity'] = 0;
          me._tooltips.Container.style['left'] = '-9999px';
          return;
        }
      }
      changed = replay || !helpers._elementsEqual(active, lastActive);
      if (changed) {
        me._active = active;
        if (options.enabled || options.custom) {
          me._eventPosition = {
            x: e.x,
            y: e.y
          };
          me.update(true);
          me.draw();
        }
      }
      return changed;
    }
  }]);
  return Tooltip;
}(Element$1);
Tooltip.positioners = positioners;
var tooltip = {
  id: 'tooltip',
  _element: Tooltip,
  positioners: positioners,
  afterInit: function afterInit(chart) {
    var tooltipOpts = chart.options.tooltips;
    if (tooltipOpts) {
      chart.tooltip = new Tooltip({
        _chart: chart
      });
    }
  },
  beforeUpdate: function beforeUpdate(chart) {
    if (chart.tooltip) {
      chart.tooltip.initialize();
    }
  },
  reset: function reset(chart) {
    if (chart.tooltip) {
      chart.tooltip.initialize();
    }
  },
  afterDraw: function afterDraw(chart) {
    var tooltip = chart.tooltip;
    var args = {
      tooltip: tooltip
    };
    if (pluginsCore.notify(chart, 'beforeTooltipDraw', [args]) === false) {
      return;
    }
    tooltip.draw(chart.ctx);
    pluginsCore.notify(chart, 'afterTooltipDraw', [args]);
  },
  afterEvent: function afterEvent(chart, e, replay) {
    if (chart.tooltip) {
      var useFinalPosition = replay;
      chart.tooltip.handleEvent(e, useFinalPosition);
    }
  }
};

defaults.set('crosshair', {
  enabled: false,
  line: {
    color: '#fe6673',
    width: 1,
    dashPattern: []
  },
  fillRect: {
    enabled: false,
    background: 'rgba(225, 0, 0, 0.05)',
    position: 'right'
  },
  sync: {
    enabled: true,
    group: 1
  },
  lineSets: []
});
var Crosshair = function (_Element) {
  _inherits(Crosshair, _Element);
  var _super = _createSuper(Crosshair);
  function Crosshair(config) {
    var _this;
    _classCallCheck(this, Crosshair);
    _this = _super.call(this);
    _extends(_assertThisInitialized(_this), config);
    _this.chart = config.chart;
    _this.options = config.options;
    _this.ctx = config.ctx;
    _this.enabled = undefined;
    _this.line = undefined;
    _this.fillRect = undefined;
    _this.sync = undefined;
    _this.initialize();
    return _this;
  }
  _createClass(Crosshair, [{
    key: "initialize",
    value: function initialize() {
      var me = this;
      me.options = resolveOptions$1(me._chart.options.crosshair);
    }
  }]);
  return Crosshair;
}(Element$1);
function resolveOptions$1(options) {
  options = _extends({}, defaults.crosshair, options);
  return options;
}
var getXScale = function getXScale(chart) {
  return chart.data.datasets.length ? chart.scales[chart.getDatasetMeta(0).xAxisID] : null;
};
var getYScale = function getYScale(chart) {
  return chart.data.datasets.length ? chart.scales[chart.getDatasetMeta(0).yAxisID] : null;
};
var drawTraceLine = function drawTraceLine(chart, item) {
  var isDraw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var ctx = chart.ctx;
  var crosshair = chart.options.crosshair;
  var _crosshair$line = crosshair.line,
      color = _crosshair$line.color,
      dashPattern = _crosshair$line.dashPattern,
      width = _crosshair$line.width;
  var _crosshair$fillRect = crosshair.fillRect,
      background = _crosshair$fillRect.background,
      position = _crosshair$fillRect.position;
  var yScale = getYScale(chart);
  var xScale = getXScale(chart);
  if (!yScale) {
    return;
  }
  var labels = chart.data.labels;
  var _chart$chartArea = chart.chartArea,
      left = _chart$chartArea.left,
      right = _chart$chartArea.right;
  var diff = right - left;
  var nowX;
  var lineX;
  if (isDraw) {
    var isArr = labels.some(function (item) {
      return Number(item) === NaN;
    });
    if (!!Number(item.data) && !isArr) {
      var newLabels = labels.map(function (item) {
        return Number(item);
      });
      var max = Math.max.apply(Math, _toConsumableArray(newLabels));
      var min = Math.min.apply(Math, _toConsumableArray(newLabels));
      var evt = max - min;
      if (item.data > max || item.data < min) {
        return;
      }
      nowX = diff / evt * Number(item.data) + left;
    } else {
      var index = labels.findIndex(function (ele) {
        return item.data === ele;
      });
      if (index !== -1) {
        var _evt = diff / (labels.length - 1);
        nowX = _evt * index + left;
      }
    }
  }
  lineX = isDraw ? nowX : crosshair.x;
  if (isDraw) {
    ctx.beginPath();
    ctx.lineWidth = 3;
    ctx.strokeStyle = item.triangleColor || item.color;
    ctx.fillStyle = item.triangleColor || item.color;
    ctx.moveTo(lineX, yScale.getPixelForValue(yScale.min) + 2);
    ctx.lineTo(lineX - 3, yScale.getPixelForValue(yScale.min) + 6);
    ctx.lineTo(lineX + 3, yScale.getPixelForValue(yScale.min) + 6);
    ctx.closePath();
    ctx.stroke();
  }
  ctx.beginPath();
  ctx.setLineDash(dashPattern);
  ctx.lineWidth = item ? item.width : width;
  ctx.strokeStyle = item ? item.color : color;
  ctx.moveTo(lineX, yScale.getPixelForValue(yScale.max));
  ctx.lineTo(lineX, yScale.getPixelForValue(yScale.min));
  ctx.stroke();
  ctx.setLineDash([]);
  if (crosshair.fillRect.enabled) {
    chart.ctx.fillStyle = background;
    var fillHeight = yScale.getPixelForValue(yScale.min) - yScale.getPixelForValue(yScale.max);
    var leftWidth = yScale.getPixelForValue(yScale.max) - lineX;
    var rightWidth = xScale.getPixelForValue(xScale.max) - lineX;
    var fillWidth = position === 'right' ? rightWidth : leftWidth;
    ctx.fillRect(lineX, yScale.getPixelForValue(yScale.max), fillWidth, fillHeight);
    ctx.stroke();
  }
};
var handleSyncEvent = function handleSyncEvent(chart, e) {
  var syncGroup = chart.options.crosshair.sync.group;
  if (e.chartId === chart.id) {
    return;
  }
  if (e.syncGroup !== syncGroup) {
    return;
  }
  var xScale = getXScale(chart);
  if (!xScale) {
    return;
  }
  var buttons = e.original.native.buttons === undefined ? e.original.native.which : e.original.native.buttons;
  if (e.original.type === 'mouseup') {
    buttons = 0;
  }
  var newEvent = {
    type: e.original.type,
    chart: chart,
    x: xScale.getPixelForValue(e.xValue),
    y: e.original.y,
    native: {
      buttons: buttons
    },
    stop: true
  };
  chart._eventHandler(newEvent);
};
var crosshair = {
  id: 'crosshair',
  _element: Crosshair,
  afterInit: function afterInit(chart) {
    var crosshairOpts = chart.options.crosshair;
    if (crosshairOpts) {
      chart.crosshair = new Crosshair({
        _chart: chart
      });
    }
    var crosshair = chart.options.crosshair;
    if (!chart.config.options.scales.x || chart.config.options.scales.x.length == 0) {
      return;
    }
    var syncEnabled = crosshair.sync.enabled;
    if (syncEnabled) {
      crosshair.syncEventHandler = function (e) {
        handleSyncEvent(chart, e);
      }.bind(this);
    }
    typeof window !== "undefined" && window.addEventListener('sync-event', crosshair.syncEventHandler);
  },
  afterEvent: function afterEvent(chart, e) {
    var crosshair = chart.options.crosshair;
    if (crosshair.enabled) {
      var xScale = getXScale(chart);
      var yScale = getYScale(chart);
      if (!xScale) {
        return;
      }
      var syncEnabled = crosshair.sync.enabled;
      var syncGroup = crosshair.sync.group;
      if (!e.stop && syncEnabled) {
        var event = new CustomEvent('sync-event');
        event.chartId = chart.id;
        event.syncGroup = syncGroup;
        event.original = e;
        event.xValue = xScale.getValueForPixel(e.x);
        typeof window !== "undefined" && window.dispatchEvent(event);
      }
      var overflowX = e.type !== 'mouseout' && e.x > xScale.getPixelForValue(xScale.min) && e.x < xScale.getPixelForValue(xScale.max);
      var overflowY = e.type !== 'mouseout' && e.y < yScale.getPixelForValue(yScale.min) && e.y > yScale.getPixelForValue(yScale.max);
      crosshair.showLine = overflowX && overflowY;
      crosshair.x = e.x;
      crosshair.y = e.y;
      chart.draw();
    }
  },
  afterDraw: function afterDraw(chart) {
    var crosshair = chart.options.crosshair;
    var isDrawLine = crosshair.lineSets.length > 0;
    if (crosshair.enabled && crosshair.showLine && !isDrawLine) {
      drawTraceLine(chart);
    }
    if (isDrawLine) {
      crosshair.lineSets.forEach(function (item) {
        drawTraceLine(chart, item, isDrawLine);
      });
    }
    return true;
  },
  destroy: function destroy(chart) {
    var crosshair = chart.options.crosshair;
    var syncEnabled = crosshair.sync.enabled;
    if (syncEnabled) {
      typeof window !== "undefined" && window.removeEventListener('sync-event', crosshair.syncEventHandler);
    }
  }
};

defaults.set('dataZoom', {
  enabled: false,
  fullWidth: true,
  position: "bottom",
  weight: 1,
  slider: [{
    show: true,
    start: 0,
    end: 100,
    startValue: '',
    endValue: '',
    fullWidth: true,
    position: "bottom",
    mode: 'x',
    height: 35,
    inside: {
      show: true,
      showLine: true,
      dataSource: undefined,
      start: 10,
      end: 30,
      startValue: undefined,
      endValue: undefined,
      minWidth: 5
    }
  }]
});
var DataZoom = function (_Element) {
  _inherits(DataZoom, _Element);
  var _super = _createSuper(DataZoom);
  function DataZoom(config, index) {
    var _this;
    _classCallCheck(this, DataZoom);
    _this = _super.call(this);
    _extends(_assertThisInitialized(_this), config);
    _this.chart = config.chart;
    _this.options = config.options;
    _this.ctx = config.assistCtx;
    _this._margins = undefined;
    _this._padding = undefined;
    _this._insideBox = undefined;
    _this._pointer = 'inherit';
    _this._zoomIndex = index;
    _this._cachedAnimations = undefined;
    _this._cachedTicks = undefined;
    _this._cachedData = undefined;
    _this._insideOffsetX = 0;
    _this._isInZoomArea = false;
    _this._isInDropArea = false;
    _this._isInHandleArea = false;
    _this._isMousedown = false;
    _this._zoomArea = undefined;
    _this._mousedown = undefined;
    _this.top = undefined;
    _this.bottom = undefined;
    _this.left = undefined;
    _this.right = undefined;
    _this.width = undefined;
    _this.height = undefined;
    _this.innerWidth = undefined;
    _this.maxWidth = undefined;
    _this.maxHeight = undefined;
    _this.position = undefined;
    _this.weight = 1;
    _this.fullWidth = undefined;
    _this.position = undefined;
    return _this;
  }
  _createClass(DataZoom, [{
    key: "isHorizontal",
    value: function isHorizontal() {
      return ['top', 'bottom'].includes(this.options.position);
    }
  }, {
    key: "resolveOptions",
    value: function resolveOptions(option) {
      var me = this;
      if (me.options.inside) {
        var _me$options$inside = me.options.inside,
            startValue = _me$options$inside.startValue,
            endValue = _me$options$inside.endValue;
        me.height = option.height;
        if (!helpers.isEmpty(startValue) && !helpers.isEmpty(endValue)) {
          helpers.mergeIf(me.chart.options.scales.x, {
            min: startValue,
            max: endValue
          });
        } else {
          var labels = me.chart.data.labels;
          var _me$options$inside2 = me.options.inside,
              _me$options$inside2$s = _me$options$inside2.start,
              start = _me$options$inside2$s === void 0 ? 0 : _me$options$inside2$s,
              _me$options$inside2$e = _me$options$inside2.end,
              end = _me$options$inside2$e === void 0 ? 100 : _me$options$inside2$e;
          var len = labels.length;
          var startIndex = Math.floor(start * len / 100);
          var endIndex = Math.ceil(end * len / 100);
          helpers.merge(me.chart.options.scales.x, {
            min: labels[startIndex],
            max: labels[endIndex]
          });
        }
      }
    }
  }, {
    key: "update",
    value: function update(maxWidth, maxHeight, margins) {
      var me = this;
      me.maxWidth = maxWidth;
      me.maxHeight = maxHeight;
      me._margins = margins;
    }
  }, {
    key: "updateLayout",
    value: function updateLayout(chart) {
      var me = this;
      var chartArea = chart.chartArea;
      me._zoomArea = {
        left: chartArea.left,
        right: chartArea.right,
        top: me.top,
        bottom: me.bottom,
        innerWidth: chartArea.right - chartArea.left
      };
    }
  }, {
    key: "cacheTicks",
    value: function cacheTicks() {
      var me = this;
      var labels = me.chart.data.labels || [];
      var stepSize = me._zoomArea.innerWidth / (labels.length || 1);
      me._cachedTicks = (me.chart.data.labels || []).map(function (label, index) {
        return _extends({}, {
          label: label
        }, {
          left: me._zoomArea.left + stepSize * index
        });
      });
      return me._cachedTicks;
    }
  }, {
    key: "draw",
    value: function draw() {
      var me = this;
      var show = me.options.show;
      if (!show) {
        return;
      }
      me.drawDataZoom();
    }
  }, {
    key: "drawDataZoom",
    value: function drawDataZoom() {
      var me = this;
      var ctx = me.ctx;
      var box = me._zoomArea;
      ctx.save();
      me._insideBox = me.options.inside.show ? me._getInsidePosition(me.options.inside, box) : null;
      helpers.dataZoom.drawZoomArea(ctx, {
        box: box,
        zoomdatas: me.options.inside.showLine ? me._getZoomData() : [],
        height: me.chart.height,
        inside: me._insideBox
      });
      ctx.restore();
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(e) {
      var me = this;
      if (e.type === 'mousemove') {
        if (me._isMousedown) {
          me._handleZoomArea(e);
          me._renderZoomedChart();
        } else {
          me._isInZoomArea = me._isMouseInZoomBox(e);
          if (me._isInZoomArea) {
            me._isInHandleArea = me._isMouseInZoomMoveBox(e);
            me._isInDropArea = me._isMouseInZoomDropBox(e) || me._isInHandleArea;
            if (me._isInDropArea) {
              me._updatePointer('e-resize');
            } else {
              me._updatePointer('pointer');
            }
          } else {
            me._removeActiveZoomArea();
            me._updatePointer('inherit');
          }
        }
      }
      if (e.type === 'mousedown') {
        if (me._isInZoomArea) {
          me._isMousedown = true;
          me._mousedown = {
            x: e.x,
            y: e.y,
            handleSider: undefined
          };
          if (me._isInHandleArea) {
            me._mousedown.handleSider = me._getHandlehandleSider(me.options.inside, e);
          }
        }
      }
      if (e.type === 'mouseup') {
        if (!me._isClickEvent(e)) {
          if (me.options.inside) {
            var _me$_getCurrentZoomOf = me._getCurrentZoomOffset(),
                leftOffset = _me$_getCurrentZoomOf.leftOffset,
                rightOffset = _me$_getCurrentZoomOf.rightOffset;
            me.options.inside.left += leftOffset;
            me.options.inside.right += rightOffset;
          }
          me._removeActiveZoomArea();
          me._resetZoomStatus(e);
        }
      }
      if (e.type === 'click') {
        if (me._isClickEvent(e)) {
          if (me._isMouseInZoomBox(e) && !me._isMouseInZoomDropBox(e)) {
            if (me.options.inside) {
              var _me$options$inside3 = me.options.inside,
                  left = _me$options$inside3.left,
                  right = _me$options$inside3.right;
              var width = right - left;
              var offsetWidth = width / 2;
              var offsetX = e.x > right ? e.x - right + offsetWidth : e.x - left - offsetWidth;
              if (e.x > right && offsetX + right > me._zoomArea.right) {
                offsetX = me._zoomArea.right - right;
              }
              if (e.x < left && offsetX + left < me._zoomArea.left) {
                offsetX = me._zoomArea.left - left;
              }
              me._updateInsideOffsetX(offsetX);
              var inside = me.options.inside;
              var _me$_getCurrentZoomOf2 = me._getCurrentZoomOffset(),
                  _leftOffset = _me$_getCurrentZoomOf2.leftOffset,
                  _rightOffset = _me$_getCurrentZoomOf2.rightOffset;
              inside.left += _leftOffset;
              inside.right += _rightOffset;
              me._removeActiveZoomArea();
              me._resetZoomStatus(e);
              me._renderZoomedChart();
            }
          }
        }
        me._mousedown = undefined;
      }
    }
  }, {
    key: "_getTicks",
    value: function _getTicks() {
      var me = this;
      return me._cachedTicks ? me._cachedTicks : me.cacheTicks();
    }
  }, {
    key: "_resetZoomStatus",
    value: function _resetZoomStatus(e) {
      var me = this;
      me._isInZoomArea = me._isMouseInZoomBox(e);
      me._isInHandleArea = me._isMouseInZoomMoveBox(e);
      me._isInDropArea = me._isMouseInZoomDropBox(e) || me._isInHandleArea;
      me._updatePointer(me._isInDropArea ? me._isInZoomArea ? 'pointer' : 'e-resize' : 'inherit');
    }
  }, {
    key: "_getHandlehandleSider",
    value: function _getHandlehandleSider(inside, e) {
      var left = inside.left,
          right = inside.right;
      var leftDiff = Math.abs(left - e.x);
      var rightDiff = Math.abs(right - e.x);
      return leftDiff < rightDiff ? 'left' : 'right';
    }
  }, {
    key: "_isClickEvent",
    value: function _isClickEvent(e) {
      var me = this;
      if (!me._mousedown) {
        return true;
      }
      return e.x === me._mousedown.x && e.y === me._mousedown.y;
    }
  }, {
    key: "_handleZoomArea",
    value: function _handleZoomArea(e) {
      var me = this;
      if (me._isInHandleArea || me._isInDropArea) {
        var x = e.x;
        if (me._mousedown) {
          var startX = me._mousedown.x;
          var offsetX = x - startX;
          me._updateInsideOffsetX(offsetX);
        }
      }
    }
  }, {
    key: "_updatePointer",
    value: function _updatePointer(pointer) {
      var me = this;
      if (me._pointer !== pointer) {
        me._pointer = pointer;
        helpers.style.setContainerStyle(me.chart, {
          cursor: me._pointer
        });
      }
    }
  }, {
    key: "_getCurrentZoomOffset",
    value: function _getCurrentZoomOffset() {
      var offsetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var me = this;
      var _offset = offsetX === undefined ? me._insideOffsetX : offsetX;
      var handleSider = (me._mousedown || {}).handleSider;
      var leftOffset = handleSider !== 'right' ? _offset : 0;
      var rightOffset = handleSider !== 'left' ? _offset : 0;
      return {
        leftOffset: leftOffset,
        rightOffset: rightOffset
      };
    }
  }, {
    key: "_getInsidePosition",
    value: function _getInsidePosition(inside, box) {
      var me = this;
      var position = {
        left: 10,
        right: 30
      };
      var _me$_getCurrentZoomOf3 = me._getCurrentZoomOffset(),
          leftOffset = _me$_getCurrentZoomOf3.leftOffset,
          rightOffset = _me$_getCurrentZoomOf3.rightOffset;
      if (inside.left !== undefined && inside.right !== undefined) {
        var left = inside.left + leftOffset;
        var right = inside.right + rightOffset;
        position.left = left;
        position.right = right;
      } else {
        if (inside.startValue && inside.endValue) {
          var cachedTicks = me.cacheTicks();
          var leftItem = cachedTicks.find(function (item) {
            return item.label === inside.startValue;
          });
          var rightItem = cachedTicks.find(function (item) {
            return item.label === inside.endValue;
          });
          if (leftItem && rightItem) {
            position.left = leftItem.left;
            position.right = rightItem.left;
          }
        } else {
          if (/\d+/.test(inside.start)) {
            position.left = box.innerWidth * Number(inside.start) / 100 + box.left + leftOffset;
          }
          if (/\d+/.test(inside.end)) {
            position.right = box.innerWidth * Number(inside.end) / 100 + box.left + rightOffset;
          }
        }
        _extends(inside, position);
      }
      return position;
    }
  }, {
    key: "_isOuterOfZoomBox",
    value: function _isOuterOfZoomBox(position) {
      var paddingX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
      var me = this;
      return position && (position.left <= me._zoomArea.left - paddingX || position.right >= me._zoomArea.right + paddingX);
    }
  }, {
    key: "_updateInsideOffsetX",
    value: function _updateInsideOffsetX(offsetX) {
      var me = this;
      var _me$options$inside4 = me.options.inside,
          _me$options$inside4$l = _me$options$inside4.left,
          left = _me$options$inside4$l === void 0 ? 0 : _me$options$inside4$l,
          _me$options$inside4$r = _me$options$inside4.right,
          right = _me$options$inside4$r === void 0 ? 0 : _me$options$inside4$r,
          _me$options$inside4$m = _me$options$inside4.minWidth,
          minWidth = _me$options$inside4$m === void 0 ? 0 : _me$options$inside4$m;
      var _me$_getCurrentZoomOf4 = me._getCurrentZoomOffset(offsetX),
          leftOffset = _me$_getCurrentZoomOf4.leftOffset,
          rightOffset = _me$_getCurrentZoomOf4.rightOffset;
      var position = {
        left: left + leftOffset,
        right: right + rightOffset
      };
      if (!me._isOuterOfZoomBox(position) && position.left + minWidth < position.right) {
        me._insideOffsetX = offsetX;
      }
    }
  }, {
    key: "_getActiveZoomAreaIndex",
    value: function _getActiveZoomAreaIndex(event) {
      var me = this;
      var x = event.x;
      return me._insideBox;
    }
  }, {
    key: "_removeActiveZoomArea",
    value: function _removeActiveZoomArea() {
      var me = this;
      me._isInZoomArea = false;
      me._insideOffsetX = 0;
      me._isMousedown = false;
    }
  }, {
    key: "_isMouseInZoomBox",
    value: function _isMouseInZoomBox(event) {
      var me = this;
      var x = event.x,
          y = event.y;
      var zoomBox = me._zoomArea;
      return x > zoomBox.left && x < zoomBox.right && y > zoomBox.top && y < zoomBox.bottom;
    }
  }, {
    key: "_isMouseInZoomDropBox",
    value: function _isMouseInZoomDropBox(event) {
      var me = this;
      var x = event.x - me._insideOffsetX;
      return me._isMouseInZoomBox(event) && me._insideBox && me._insideBox.left < x && me._insideBox.right > x;
    }
  }, {
    key: "_isMouseInZoomMoveBox",
    value: function _isMouseInZoomMoveBox(event) {
      var me = this;
      var x = event.x - me._insideOffsetX;
      return me._isMouseInZoomBox(event) && me._insideBox && (me._insideBox.left - 10 < x && me._insideBox.left + 10 > x || me._insideBox.right - 10 < x && me._insideBox.right + 10 > x);
    }
  }, {
    key: "_getZoomData",
    value: function _getZoomData() {
      var me = this;
      if (!me._cachedData) {
        var datasets = me.chart.data && me.chart.data.datasets || [];
        var dataSource = me.options.inside.dataSource;
        var copyDatasets = me._getZoomDatasource(dataSource, datasets);
        var maxLengh = Math.max.apply(Math, _toConsumableArray(copyDatasets.map(function (dataset) {
          return (dataset || []).length;
        })));
        var sumData = new Array(maxLengh).fill(0);
        var _loop = function _loop(i) {
          sumData[i] = copyDatasets.reduce(function (pre, current) {
            return pre += me._getDatasetsYValueByIndex(i, current);
          }, 0);
        };
        for (var i = 0; i < maxLengh; i++) {
          _loop(i);
        }
        me._cachedData = sumData;
      }
      return me._cachedData;
    }
  }, {
    key: "_getZoomDatasource",
    value: function _getZoomDatasource(dataSource, datasets) {
      var me = this;
      if (helpers.isNullOrUndef(dataSource)) {
        return datasets.map(function (d) {
          return d.data;
        });
      }
      if (typeof dataSource === 'function') {
        return dataSource.call(me, datasets);
      }
      if (Array.isArray(dataSource)) {
        return dataSource.map(function (d) {
          return datasets[d];
        });
      }
      if (typeof dataSource === 'number') {
        return datasets[dataSource] && [datasets[dataSource].data];
      }
    }
  }, {
    key: "_getDatasetsYValueByIndex",
    value: function _getDatasetsYValueByIndex(index, dataset) {
      var target = (dataset || [])[index];
      if (target === undefined) {
        return 0;
      }
      if (typeof target === 'number') {
        return target;
      }
      if (_typeof(target) === 'object') {
        var value = 0;
        if (Array.isArray(target)) {
          value = target.slice(-1)[0];
        }
        value = target.y;
        return typeof value === 'number' ? value : 0;
      }
      return 0;
    }
  }, {
    key: "_renderZoomedChart",
    value: function _renderZoomedChart() {
      var me = this;
      var _me$_getZoomAreaLable = me._getZoomAreaLables(),
          leftValue = _me$_getZoomAreaLable.leftValue,
          rightValue = _me$_getZoomAreaLable.rightValue;
      helpers.merge(me.chart.options.scales.x, {
        min: leftValue,
        max: rightValue
      });
      me.chart._lastEvent = null;
      me.chart.update();
    }
  }, {
    key: "_getZoomAreaLables",
    value: function _getZoomAreaLables() {
      var me = this;
      var zoomBox = me._zoomArea;
      var _ref = me._insideBox || me._getInsidePosition(me.options.inside, me),
          left = _ref.left,
          right = _ref.right;
      if (left < zoomBox.left) {
        left = zoomBox.left;
      }
      if (right > zoomBox.right) {
        right = zoomBox.right;
      }
      var cachedTicks = me._getTicks() || [];
      var leftItem = cachedTicks.find(function (item, index) {
        return item.left <= left && cachedTicks[index + 1].left >= left;
      }) || {};
      var rightItem = cachedTicks.find(function (item, index) {
        return item.left <= right && (!cachedTicks[index + 1] || cachedTicks[index + 1].left >= right);
      }) || {};
      return {
        leftValue: leftItem.label,
        rightValue: rightItem.label
      };
    }
  }]);
  return DataZoom;
}(Element$1);
var dataZoom$1 = {
  id: 'dataZoom',
  _element: DataZoom,
  beforeInit: function beforeInit(chart) {
    var opts = chart.options.dataZoom;
    if (opts && opts.enabled) {
      opts = helpers.merge(opts, defaults.dataZoom, {
        merger: helpers.dataZoom.mergerConfig
      });
      var dataZoom = [];
      (opts.slider || []).forEach(function (opt, index) {
        var instance = new DataZoom({
          ctx: chart.ctx,
          options: opt,
          assistCtx: chart.assistCtx,
          chart: chart
        }, index);
        instance.resolveOptions(opt);
        dataZoom.push(instance);
        layouts.configure(chart, instance, opt);
        layouts.addBox(chart, instance);
      });
      chart.dataZoom = dataZoom;
      helpers.dataZoom.updateEvents(chart.config.options, ['mousedown', 'mouseup']);
    }
  },
  afterUpdate: function afterUpdate(chart) {
    var dataZoom = chart.dataZoom;
    var dataZoomOpts = chart.options.dataZoom;
    if (dataZoomOpts) {
      if (dataZoom && dataZoom.length) {
        dataZoom.forEach(function (zoom) {
          zoom.updateLayout(chart);
          zoom.drawDataZoom();
        });
      }
    }
  },
  afterEvent: function afterEvent(chart, e) {
    var dataZoom = chart.dataZoom;
    if (dataZoom && dataZoom.length) {
      dataZoom.forEach(function (zoom) {
        zoom.handleEvent(e);
      });
    }
  }
};

var defaultGradient = {
  '1.0': 'rgba(219,37,32,1)',
  '0.8': 'rgba(242,186,56,1)',
  '0.4': 'rgba(10,120,175,1)',
  '0': 'rgba(12,54,133,1)'
};
defaults.set('colorBar', {
  enabled: false,
  colors: 'default',
  bindValue: 'y',
  weight: 1,
  position: 'right',
  padding: 10,
  title: {
    content: '',
    fontColor: '#000',
    fontConfig: ''
  }
});
var colorBar = function (_Element) {
  _inherits(colorBar, _Element);
  var _super = _createSuper(colorBar);
  function colorBar(config) {
    var _this;
    _classCallCheck(this, colorBar);
    _this = _super.call(this);
    _extends(_assertThisInitialized(_this), config);
    _this.chart = config.chart;
    _this.options = config.options;
    _this.datasets = _this.chart.data.datasets;
    _this.ctx = config.assistCtx;
    _this._margins = undefined;
    _this._padding = undefined;
    _this._insideBox = undefined;
    _this._pointer = 'inherit';
    _this.bindValue = undefined;
    _this.top = 10;
    _this.bottom = undefined;
    _this.left = 1000;
    _this.right = 0;
    _this.width = _this.options.width || 40;
    _this.height = _this.options.height || 50;
    _this.innerWidth = undefined;
    _this.maxWidth = undefined;
    _this.maxHeight = undefined;
    _this.position = undefined;
    _this.weight = 1;
    _this.fullWidth = undefined;
    _this.position = 'right';
    _this.title = 'title';
    _this.gradientConfig = undefined;
    return _this;
  }
  _createClass(colorBar, [{
    key: "isHorizontal",
    value: function isHorizontal() {
      return ['top', 'bottom'].includes(this.options.position);
    }
  }, {
    key: "resolveOptions",
    value: function resolveOptions(option) {
      var _this2 = this;
      this.bindValue = option.bindValue || 'y';
      this.gradientConfig = option.gradientConfig || defaultGradient;
      this.colorData = this.getColorPaintData();
      if (this.datasets.length === 1) {
        var dataArray = this.datasets[0].data.map(function (item) {
          return item[_this2.bindValue];
        });
        var max = option.max ? option.max : Math.max.apply(Math, _toConsumableArray(dataArray));
        var min = option.min ? option.min : Math.min.apply(Math, _toConsumableArray(dataArray));
        var scale = max - min;
        var offset = 4;
        this.chart.data.datasets = this.datasets[0].data.map(function (item, idx) {
          var ratio = Math.floor((item[_this2.bindValue] - min) * 255 / scale);
          var index = ratio * offset;
          var color = "rgba(".concat(_this2.colorData[index], ", ").concat(_this2.colorData[index + 1], ", ").concat(_this2.colorData[index + 2], ", 0.9)");
          return {
            label: _this2.chart.data.labels[idx],
            data: [item],
            backgroundColor: color
          };
        });
      }
    }
  }, {
    key: "getColorPaintData",
    value: function getColorPaintData() {
      var paletteCanvas = document.createElement('canvas');
      var paletteCtx = paletteCanvas.getContext('2d');
      paletteCanvas.width = 256;
      paletteCanvas.height = 1;
      var gradient = paletteCtx.createLinearGradient(0, 0, 256, 1);
      for (var key in this.gradientConfig) {
        gradient.addColorStop(+key, this.gradientConfig[key]);
      }
      paletteCtx.fillStyle = gradient;
      paletteCtx.fillRect(0, 0, 256, 1);
      return paletteCtx.getImageData(0, 0, 256, 1).data;
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this3 = this;
      var me = this;
      var ctx = me.ctx;
      var titleConfig = me.options.title;
      var chartArea = me.chart.chartArea;
      var padding = me.options.padding;
      ctx.clearRect(me.left, 0, me.width, me.height);
      var textYPos = titleConfig.content ? 12 : 0;
      var titleMargin = titleConfig.content ? 8 : chartArea && chartArea.top || 0;
      var chartHeight = me.height - textYPos;
      var chartWidth = me.width - padding * 2;
      ctx.fillStyle = titleConfig.fontColor;
      ctx.font = titleConfig.fontConfig || "14px Arial";
      ctx.textAlign = "center";
      ctx.fillText(titleConfig.content, me.left + me.width / 2, textYPos, me.width);
      var gradient = ctx.createLinearGradient(0, chartHeight, 0, textYPos + titleMargin);
      var drawArr = Object.keys(this.gradientConfig).sort(function (a, b) {
        return +a - +b;
      });
      drawArr.forEach(function (item) {
        gradient.addColorStop(+item, _this3.gradientConfig[item]);
      });
      ctx.fillStyle = gradient;
      ctx.fillRect(me.left + padding, textYPos + titleMargin, chartWidth, chartHeight);
    }
  }, {
    key: "update",
    value: function update() {
      this.draw();
    }
  }]);
  return colorBar;
}(Element$1);
var colorBar$1 = {
  id: 'colorBar',
  _element: colorBar,
  beforeInit: function beforeInit(chart) {
    var opts = chart.options.colorBar;
    if (opts && opts.enabled) {
      var instance = new colorBar({
        ctx: chart.ctx,
        options: opts,
        assistCtx: chart.assistCtx,
        chart: chart
      });
      instance.resolveOptions(opts);
      layouts.configure(chart, instance, opts);
      layouts.addBox(chart, instance);
      chart.colorBar = colorBar;
    }
  },
  beforeUpdate: function beforeUpdate(chart) {},
  afterUpdate: function afterUpdate(chart) {
  },
  afterEvent: function afterEvent(chart, e) {
  }
};

function noop$1() {}
function elements$1(chartInstance) {
  var els = chartInstance.annotation.elements;
  return Object.keys(els).map(function (id) {
    return els[id];
  });
}
function objectId() {
  return Math.random().toString(36).substr(2, 6);
}
function isValid(rawValue) {
  if (rawValue === null || typeof rawValue === 'undefined') {
    return false;
  } else if (typeof rawValue === 'number') {
    return isFinite(rawValue);
  }
  return !!rawValue;
}
function decorate(obj, prop, func) {
  var prefix = '$';
  if (!obj[prefix + prop]) {
    if (obj[prop]) {
      obj[prefix + prop] = obj[prop].bind(obj);
      obj[prop] = function () {
        var args = [obj[prefix + prop]].concat(Array.prototype.slice.call(arguments));
        return func.apply(obj, args);
      };
    } else {
      obj[prop] = function () {
        var args = [undefined].concat(Array.prototype.slice.call(arguments));
        return func.apply(obj, args);
      };
    }
  }
}
function callEach(fns, method) {
  fns.forEach(function (fn) {
    (method ? fn[method] : fn)();
  });
}
function getEventHandlerName(eventName) {
  return 'on' + eventName[0].toUpperCase() + eventName.substring(1);
}
function createMouseEvent(type, previousEvent) {
  try {
    return new MouseEvent(type, previousEvent);
  } catch (exception) {
    try {
      var m = document.createEvent('MouseEvent');
      m.initMouseEvent(type, previousEvent.canBubble, previousEvent.cancelable, previousEvent.view, previousEvent.detail, previousEvent.screenX, previousEvent.screenY, previousEvent.clientX, previousEvent.clientY, previousEvent.ctrlKey, previousEvent.altKey, previousEvent.shiftKey, previousEvent.metaKey, previousEvent.button, previousEvent.relatedTarget);
      return m;
    } catch (exception2) {
      var e = document.createEvent('Event');
      e.initEvent(type, previousEvent.canBubble, previousEvent.cancelable);
      return e;
    }
  }
}
function helper () {
  var chartHelpers = helpers;
  function initConfig(config) {
    var options = chartHelpers.clone(defaults.annotation);
    config = chartHelpers.merge(options, config);
    if (chartHelpers.isArray(config.annotations)) {
      config.annotations.forEach(function (annotation) {
        if (annotation.type !== 'label') {
          var label = chartHelpers.clone(defaults.annotation.label);
          annotation.label = chartHelpers.merge(label, annotation.label);
        }
      });
    }
    return config;
  }
  function getScaleLimits(scaleId, annotations, scaleMin, scaleMax) {
    var ranges = annotations.filter(function (annotation) {
      return !!annotation._model.ranges[scaleId];
    }).map(function (annotation) {
      return annotation._model.ranges[scaleId];
    });
    var min = ranges.map(function (range) {
      return Number(range.min);
    }).reduce(function (a, b) {
      return isFinite(b) && !isNaN(b) && b < a ? b : a;
    }, scaleMin);
    var max = ranges.map(function (range) {
      return Number(range.max);
    }).reduce(function (a, b) {
      return isFinite(b) && !isNaN(b) && b > a ? b : a;
    }, scaleMax);
    return {
      min: min,
      max: max
    };
  }
  function adjustScaleRange(scale) {
    var range = getScaleLimits(scale.id, elements$1(scale.chart), scale.min, scale.max);
    if (typeof scale.options.ticks.min === 'undefined' && typeof scale.options.ticks.suggestedMin === 'undefined') {
      scale.min = range.min;
    }
    if (typeof scale.options.ticks.max === 'undefined' && typeof scale.options.ticks.suggestedMax === 'undefined') {
      scale.max = range.max;
    }
    if (scale.handleTickRangeOptions) {
      scale.handleTickRangeOptions();
    }
  }
  function getNearestItems(annotations, position) {
    var minDistance = Number.POSITIVE_INFINITY;
    return annotations.filter(function (element) {
      return element.inRange(position.x, position.y);
    }).reduce(function (nearestItems, element) {
      var center = element.getCenterPoint();
      var distance = chartHelpers.math.distanceBetweenPoints(position, center);
      if (distance < minDistance) {
        nearestItems = [element];
        minDistance = distance;
      } else if (distance === minDistance) {
        nearestItems.push(element);
      }
      return nearestItems;
    }, []).sort(function (a, b) {
      var sizeA = a.getArea();
      var sizeB = b.getArea();
      return sizeA > sizeB || sizeA < sizeB ? sizeA - sizeB : a._index - b._index;
    }).slice(0, 1)[0];
  }
  function _getOffset(matchedTicks, value, matchType, stepLength) {
    var offset = 0;
    if (matchedTicks.length === 2) {
      if (matchType === 'left') {
        offset = (value - matchedTicks[0].value) / (matchedTicks[1].value - matchedTicks[0].value) * stepLength;
      }
      if (matchType === 'right') {
        offset = -(matchedTicks[1].value - value) / (matchedTicks[1].value - matchedTicks[0].value) * stepLength;
      }
    }
    return offset;
  }
  function _getClosetTick(ticks, matchKey, matchValue) {
    var length = ticks.length;
    if (length <= 2) {
      return ticks;
    }
    var middleIndex = Math.floor(length / 2);
    if (ticks[middleIndex][matchKey] > matchValue) {
      if (ticks[middleIndex - 1][matchKey] < matchValue) {
        return [ticks[middleIndex - 1], ticks[middleIndex]];
      } else {
        return _getClosetTick(ticks.slice(0, middleIndex + 1), matchKey, matchValue);
      }
    } else {
      if (ticks[middleIndex + 1][matchKey] > matchValue) {
        return [ticks[middleIndex], ticks[middleIndex + 1]];
      } else {
        return _getClosetTick(ticks.slice(middleIndex + 1, length), matchKey, matchValue);
      }
    }
  }
  function _getPixelByCfg(cfg, scale, matchValue) {
    var result = null;
    switch (cfg) {
      case 'value':
        result = scale.getPixelForValue(matchValue);
        break;
      case 'label':
        var labelTick = scale.ticks.find(function (item) {
          return item.label === matchValue;
        });
        result = labelTick ? scale.getPixelForValue(labelTick.value) : null;
        break;
      case 'index':
        var indexTick = scale.ticks[matchValue];
        result = indexTick ? scale.getPixelForValue(indexTick.value) : null;
        break;
      case 'position':
        result = cfg;
        break;
      default:
        result = scale.getPixelForValue(matchValue);
        break;
    }
    return result;
  }
  function getPixelPosition(cfg, scale, matchValue, prefix) {
    var result = null;
    if (cfg) {
      if (typeof cfg === 'string') {
        result = _getPixelByCfg(cfg, scale, matchValue);
      }
      if (_typeof(cfg) === 'object') {
        var _cfg$search = cfg.search,
            search = _cfg$search === void 0 ? 'value' : _cfg$search,
            _cfg$match = cfg.match,
            match = _cfg$match === void 0 ? 'left' : _cfg$match;
        if (Array.isArray(match)) {
          if (match.length > 0) {
            match = prefix === 'min' ? match[0] : match.slice(-1)[0];
          } else {
            match = 'left';
          }
        }
        if (['value', 'label'].includes(search)) {
          var needClosetTicks = true;
          if (scale.ticks[0][search] > matchValue) {
            result = scale.left;
            needClosetTicks = false;
          }
          var length = scale.ticks.length;
          if (scale.ticks[length - 1][search] < matchValue) {
            result = scale.right;
            needClosetTicks = false;
          }
          if (needClosetTicks) {
            var closetTicks = _getClosetTick(scale.ticks, search, matchValue);
            if (closetTicks.length === 2) {
              var tick = match === 'left' ? closetTicks[0] : closetTicks[1];
              var index = scale.ticks.findIndex(function (item) {
                return item.value === tick.value;
              });
              result = scale.getPixelForTick(index);
              var _ticksLength = scale._ticksLength,
                  _length = scale._length,
                  ticks = scale.ticks;
              var stepLen = _length / (_ticksLength || ticks.length);
              result += _getOffset(closetTicks, matchValue, match, stepLen);
            }
            if (closetTicks.length === 1) {
              var _index = scale.ticks.findIndex(function (item) {
                return item.value === closetTicks[0].value;
              });
              result = scale.getPixelForTick(_index);
            }
          }
        }
      }
      if (typeof cfg === 'function') {
        result = cfg.call(this, this.options, this.chartInstance);
      }
    }
    return result;
  }
  return {
    initConfig: initConfig,
    elements: elements$1,
    callEach: callEach,
    noop: noop$1,
    objectId: objectId,
    isValid: isValid,
    decorate: decorate,
    adjustScaleRange: adjustScaleRange,
    getNearestItems: getNearestItems,
    getEventHandlerName: getEventHandlerName,
    createMouseEvent: createMouseEvent,
    scale: {
      _getOffset: _getOffset,
      _getClosetTick: _getClosetTick,
      _getPixelByCfg: _getPixelByCfg
    },
    getPixelPosition: getPixelPosition
  };
}

var AnnotationElement = function (_Element) {
  _inherits(AnnotationElement, _Element);
  var _super = _createSuper(AnnotationElement);
  function AnnotationElement(cfgs) {
    var _this;
    _classCallCheck(this, AnnotationElement);
    _this = _super.call(this);
    _this.chartHelpers = helpers;
    _this.chartInstance = undefined;
    _this.id = undefined;
    _this.options = undefined;
    _this._helpers = helper();
    _extends(_assertThisInitialized(_this), cfgs);
    return _this;
  }
  _createClass(AnnotationElement, [{
    key: "initialize",
    value: function initialize() {
      this.hidden = false;
      this.hovering = false;
      this._model = this.chartHelpers.clone(this._model) || {};
      this.setDataLimits();
    }
  }, {
    key: "destroy",
    value: function destroy() {}
  }, {
    key: "setDataLimits",
    value: function setDataLimits() {}
  }, {
    key: "configure",
    value: function configure() {}
  }, {
    key: "inRange",
    value: function inRange() {}
  }, {
    key: "getCenterPoint",
    value: function getCenterPoint() {}
  }, {
    key: "getWidth",
    value: function getWidth() {}
  }, {
    key: "getHeight",
    value: function getHeight() {}
  }, {
    key: "getArea",
    value: function getArea() {}
  }, {
    key: "draw",
    value: function draw() {}
  }]);
  return AnnotationElement;
}(Element$1);

var annHelpers = helper();
var MatchMode = function () {
  function MatchMode() {
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var chartInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    _classCallCheck(this, MatchMode);
    if (!cfg) {
      cfg = {
        x: 'value',
        y: 'value'
      };
    }
    this.x = cfg.x;
    this.y = cfg.y;
    this.chartInstance = chartInstance;
    this.options = options;
  }
  _createClass(MatchMode, [{
    key: "getPixelPosition",
    value: function getPixelPosition(scale, scaleId, matchValue, prefix) {
      var cfg = this[scaleId];
      return annHelpers.getPixelPosition(cfg, scale, matchValue, prefix);
    }
  }]);
  return MatchMode;
}();
var BoxAnnotation = function (_AnnotationElement) {
  _inherits(BoxAnnotation, _AnnotationElement);
  var _super = _createSuper(BoxAnnotation);
  function BoxAnnotation() {
    var _this;
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, BoxAnnotation);
    _this = _super.call(this, cfg);
    _this.matchMode = new MatchMode(cfg.options.matchMode, _this.chartInstance);
    return _this;
  }
  _createClass(BoxAnnotation, [{
    key: "setDataLimits",
    value: function setDataLimits() {
      var model = this._model;
      var options = this.options;
      var chartInstance = this.chartInstance;
      var xScale = chartInstance.scales[options.xScaleID];
      var yScale = chartInstance.scales[options.yScaleID];
      var chartArea = chartInstance.chartArea;
      model.ranges = {};
      if (!chartArea) {
        return;
      }
      var min = 0;
      var max = 0;
      if (xScale) {
        min = this._helpers.isValid(options.xMin) ? options.xMin : xScale.getValueForPixel(chartArea.left);
        max = this._helpers.isValid(options.xMax) ? options.xMax : xScale.getValueForPixel(chartArea.right);
        model.ranges[options.xScaleID] = {
          min: Math.min(min, max),
          max: Math.max(min, max)
        };
      }
      if (yScale) {
        min = this._helpers.isValid(options.yMin) ? options.yMin : yScale.getValueForPixel(chartArea.bottom);
        max = this._helpers.isValid(options.yMax) ? options.yMax : yScale.getValueForPixel(chartArea.top);
        model.ranges[options.yScaleID] = {
          min: Math.min(min, max),
          max: Math.max(min, max)
        };
      }
    }
  }, {
    key: "configure",
    value: function configure() {
      var model = this._model;
      var options = this.options;
      var chartInstance = this.chartInstance;
      var xScale = chartInstance.scales[options.xScaleID];
      var yScale = chartInstance.scales[options.yScaleID];
      var chartArea = chartInstance.chartArea;
      model.clip = {
        x1: chartArea.left,
        x2: chartArea.right,
        y1: chartArea.top,
        y2: chartArea.bottom
      };
      var left = chartArea.left;
      var top = chartArea.top;
      var right = chartArea.right;
      var bottom = chartArea.bottom;
      var min, max;
      if (xScale) {
        min = this._helpers.isValid(options.xMin) ? this.matchMode.getPixelPosition(xScale, 'x', options.xMin, 'min') : chartArea.left;
        max = this._helpers.isValid(options.xMax) ? this.matchMode.getPixelPosition(xScale, 'x', options.xMax, 'max') : chartArea.right;
        left = Math.min(min, max);
        right = Math.max(min, max);
      }
      if (yScale) {
        min = this._helpers.isValid(options.yMin) ? this.matchMode.getPixelPosition(yScale, 'y', options.yMin, 'min') : chartArea.bottom;
        max = this._helpers.isValid(options.yMax) ? this.matchMode.getPixelPosition(yScale, 'y', options.yMax, 'max') : chartArea.top;
        top = Math.min(min, max);
        bottom = Math.max(min, max);
      }
      model.left = left;
      model.top = top;
      model.right = right;
      model.bottom = bottom;
      model.borderColor = options.borderColor;
      model.borderWidth = options.borderWidth;
      model.backgroundColor = options.backgroundColor;
    }
  }, {
    key: "inRange",
    value: function inRange(mouseX, mouseY) {
      var model = this._model;
      return model && mouseX >= model.left && mouseX <= model.right && mouseY >= model.top && mouseY <= model.bottom;
    }
  }, {
    key: "getCenterPoint",
    value: function getCenterPoint() {
      var model = this._model;
      return {
        x: (model.right + model.left) / 2,
        y: (model.bottom + model.top) / 2
      };
    }
  }, {
    key: "getWidth",
    value: function getWidth() {
      var model = this._model;
      return Math.abs(model.right - model.left);
    }
  }, {
    key: "getHeight",
    value: function getHeight() {
      var model = this._model;
      return Math.abs(model.bottom - model.top);
    }
  }, {
    key: "getArea",
    value: function getArea() {
      return this.getWidth() * this.getHeight();
    }
  }, {
    key: "draw",
    value: function draw() {
      var ctx = this.chartInstance.assistCtx;
      var view = this._model;
      ctx.save();
      ctx.beginPath();
      ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);
      ctx.clip();
      ctx.lineWidth = view.borderWidth;
      ctx.strokeStyle = view.borderColor;
      ctx.fillStyle = view.backgroundColor;
      var width = view.right - view.left;
      var height = view.bottom - view.top;
      ctx.fillRect(view.left, view.top, width, height);
      ctx.strokeRect(view.left, view.top, width, height);
      ctx.restore();
    }
  }]);
  return BoxAnnotation;
}(AnnotationElement);

var LineAnnotation = function (_AnnotationElement) {
  _inherits(LineAnnotation, _AnnotationElement);
  var _super = _createSuper(LineAnnotation);
  function LineAnnotation() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, LineAnnotation);
    _this = _super.call(this, options);
    _this.horizontalKeyword = 'horizontal';
    _this.verticalKeyword = 'vertical';
    return _this;
  }
  _createClass(LineAnnotation, [{
    key: "LineFunction",
    value: function LineFunction(view) {
      var m = (view.x2 - view.x1) / (view.y2 - view.y1);
      var b = view.x1 || 0;
      this.m = m;
      this.b = b;
      this.getX = function (y) {
        return m * (y - view.y1) + b;
      };
      this.getY = function (x) {
        return (x - b) / m + view.y1;
      };
      this.intersects = function (x, y, epsilon) {
        epsilon = epsilon || 0.001;
        var dy = this.getY(x);
        var dx = this.getX(y);
        return (!isFinite(dy) || Math.abs(y - dy) < epsilon) && (!isFinite(dx) || Math.abs(x - dx) < epsilon);
      };
    }
  }, {
    key: "calculateLabelPosition",
    value: function calculateLabelPosition(view, width, height, padWidth, padHeight) {
      var line = view.line;
      var ret = {};
      var xa = 0;
      var ya = 0;
      switch (true) {
        case view.mode === this.verticalKeyword && view.labelPosition === 'top':
          ya = padHeight + view.labelYAdjust;
          xa = width / 2 + view.labelXAdjust;
          ret.y = view.y1 + ya;
          ret.x = (isFinite(line.m) ? line.getX(ret.y) : view.x1) - xa;
          break;
        case view.mode === this.verticalKeyword && view.labelPosition === 'bottom':
          ya = height + padHeight + view.labelYAdjust;
          xa = width / 2 + view.labelXAdjust;
          ret.y = view.y2 - ya;
          ret.x = (isFinite(line.m) ? line.getX(ret.y) : view.x1) - xa;
          break;
        case view.mode === this.horizontalKeyword && view.labelPosition === 'left':
          xa = padWidth + view.labelXAdjust;
          ya = -(height / 2) + view.labelYAdjust;
          ret.x = view.x1 + xa;
          ret.y = line.getY(ret.x) + ya;
          break;
        case view.mode === this.horizontalKeyword && view.labelPosition === 'right':
          xa = width + padWidth + view.labelXAdjust;
          ya = -(height / 2) + view.labelYAdjust;
          ret.x = view.x2 - xa;
          ret.y = line.getY(ret.x) + ya;
          break;
        default:
          ret.x = (view.x1 + view.x2 - width) / 2 + view.labelXAdjust;
          ret.y = (view.y1 + view.y2 - height) / 2 + view.labelYAdjust;
      }
      return ret;
    }
  }, {
    key: "setDataLimits",
    value: function setDataLimits() {
      var model = this._model;
      var options = this.options;
      model.ranges = {};
      model.ranges[options.scaleID] = {
        min: options.value,
        max: options.endValue || options.value
      };
    }
  }, {
    key: "configure",
    value: function configure() {
      var model = this._model;
      var options = this.options;
      var chartInstance = this.chartInstance;
      var ctx = chartInstance.ctx;
      var scale = chartInstance.scales[options.scaleID];
      var pixel, endPixel;
      if (scale) {
        pixel = this._helpers.isValid(options.value) ? scale.getPixelForValue(options.value, options.value.index) : NaN;
        endPixel = this._helpers.isValid(options.endValue) ? scale.getPixelForValue(options.endValue, options.value.index) : pixel;
      }
      if (isNaN(pixel)) {
        return;
      }
      var chartArea = chartInstance.chartArea;
      model.clip = {
        x1: chartArea.left,
        x2: chartArea.right,
        y1: chartArea.top,
        y2: chartArea.bottom
      };
      if (this.options.mode === this.horizontalKeyword) {
        model.x1 = chartArea.left;
        model.x2 = chartArea.right;
        model.y1 = pixel;
        model.y2 = endPixel;
      } else {
        model.y1 = chartArea.top;
        model.y2 = chartArea.bottom;
        model.x1 = pixel;
        model.x2 = endPixel;
      }
      model.line = new this.LineFunction(model);
      model.mode = options.mode;
      model.labelBackgroundColor = options.label.backgroundColor;
      model.labelFontFamily = options.label.fontFamily;
      model.labelFontSize = options.label.fontSize;
      model.labelFontStyle = options.label.fontStyle;
      model.labelFontColor = options.label.fontColor;
      model.labelXPadding = options.label.xPadding;
      model.labelYPadding = options.label.yPadding;
      model.labelCornerRadius = options.label.cornerRadius;
      model.labelPosition = options.label.position;
      model.labelXAdjust = options.label.xAdjust;
      model.labelYAdjust = options.label.yAdjust;
      model.labelEnabled = options.label.enabled;
      model.labelContent = options.label.content;
      model.labelRotation = options.label.rotation;
      ctx.font = this.chartHelpers.fontString(model.labelFontSize, model.labelFontStyle, model.labelFontFamily);
      var textWidth = ctx.measureText(model.labelContent).width;
      var textHeight = model.labelFontSize;
      model.labelHeight = textHeight + 2 * model.labelYPadding;
      if (model.labelContent && this.chartHelpers.isArray(model.labelContent)) {
        var labelContentArray = model.labelContent.slice(0);
        var longestLabel = labelContentArray.sort(function (a, b) {
          return b.length - a.length;
        })[0];
        textWidth = ctx.measureText(longestLabel).width;
        model.labelHeight = textHeight * model.labelContent.length + 2 * model.labelYPadding;
        model.labelHeight += model.labelYPadding * (model.labelContent.length - 1);
      }
      var labelPosition = this.calculateLabelPosition(model, textWidth, textHeight, model.labelXPadding, model.labelYPadding);
      model.labelX = labelPosition.x - model.labelXPadding;
      model.labelY = labelPosition.y - model.labelYPadding;
      model.labelWidth = textWidth + 2 * model.labelXPadding;
      model.borderColor = options.borderColor;
      model.borderWidth = options.borderWidth;
      model.borderDash = options.borderDash || [];
      model.borderDashOffset = options.borderDashOffset || 0;
    }
  }, {
    key: "inRange",
    value: function inRange(mouseX, mouseY) {
      var model = this._model;
      return (
        model.line && model.line.intersects(mouseX, mouseY, this.getHeight()) ||
        model.labelEnabled && model.labelContent && mouseX >= model.labelX && mouseX <= model.labelX + model.labelWidth && mouseY >= model.labelY && mouseY <= model.labelY + model.labelHeight
      );
    }
  }, {
    key: "getCenterPoint",
    value: function getCenterPoint() {
      return {
        x: (this._model.x2 + this._model.x1) / 2,
        y: (this._model.y2 + this._model.y1) / 2
      };
    }
  }, {
    key: "getWidth",
    value: function getWidth() {
      return Math.abs(this._model.right - this._model.left);
    }
  }, {
    key: "getHeight",
    value: function getHeight() {
      return this._model.borderWidth || 1;
    }
  }, {
    key: "getArea",
    value: function getArea() {
      return Math.sqrt(Math.pow(this.getWidth(), 2) + Math.pow(this.getHeight(), 2));
    }
  }, {
    key: "draw",
    value: function draw() {
      var ctx = this.chartInstance.assistCtx;
      var view = this._model;
      if (!view.clip) {
        return;
      }
      ctx.save();
      ctx.beginPath();
      ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);
      ctx.clip();
      ctx.lineWidth = view.borderWidth;
      ctx.strokeStyle = view.borderColor;
      if (ctx.setLineDash) {
        ctx.setLineDash(view.borderDash);
      }
      ctx.lineDashOffset = view.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(view.x1, view.y1);
      ctx.lineTo(view.x2, view.y2);
      ctx.stroke();
      if (view.labelEnabled && view.labelContent) {
        ctx.beginPath();
        ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);
        ctx.clip();
        ctx.translate(view.labelX + view.labelWidth / 2, view.labelY + view.labelHeight / 2);
        ctx.rotate(view.labelRotation * Math.PI / 180);
        ctx.fillStyle = view.labelBackgroundColor;
        this.chartHelpers.canvas.roundedRect(ctx, -(view.labelWidth / 2),
        -(view.labelHeight / 2),
        view.labelWidth,
        view.labelHeight,
        view.labelCornerRadius
        );
        ctx.fill();
        ctx.font = this.chartHelpers.fontString(view.labelFontSize, view.labelFontStyle, view.labelFontFamily);
        ctx.fillStyle = view.labelFontColor;
        ctx.textAlign = 'center';
        if (view.labelContent && this.chartHelpers.isArray(view.labelContent)) {
          var textYPosition = -(view.labelHeight / 2) + view.labelYPadding;
          for (var i = 0; i < view.labelContent.length; i++) {
            ctx.textBaseline = 'top';
            ctx.fillText(view.labelContent[i], -(view.labelWidth / 2) + view.labelWidth / 2, textYPosition);
            textYPosition += view.labelFontSize + view.labelYPadding;
          }
        } else {
          ctx.textBaseline = 'middle';
          ctx.fillText(view.labelContent, 0, 0);
        }
      }
      ctx.restore();
    }
  }]);
  return LineAnnotation;
}(AnnotationElement);

defaults.set('annotation', {
  enabled: false,
  drawTime: 'afterDatasetsDraw',
  dblClickSpeed: 350,
  events: [],
  annotations: [],
  label: {
    backgroundColor: 'rgba(0,0,0,0.8)',
    fontFamily: defaults.fontFamily,
    fontSize: defaults.fontSize,
    fontStyle: 'bold',
    fontColor: '#fff',
    xPadding: 6,
    yPadding: 6,
    cornerRadius: 6,
    position: 'center',
    xAdjust: 0,
    yAdjust: 0,
    enabled: false,
    content: null
  }
});
function boxAnnotationEvents(Chart, helpers$1) {
  function collapseHoverEvents(events) {
    var hover = false;
    var filteredEvents = events.filter(function (eventName) {
      switch (eventName) {
        case 'mouseenter':
        case 'mouseover':
        case 'mouseout':
        case 'mouseleave':
          hover = true;
          return false;
        default:
          return true;
      }
    });
    if (hover && filteredEvents.indexOf('mousemove') === -1) {
      filteredEvents.push('mousemove');
    }
    return filteredEvents;
  }
  function dispatcher(e) {
    var ns = this.annotation;
    var elements = helpers$1.elements(this);
    var position = helpers.dom.getRelativePosition(e, this);
    var element = helpers$1.getNearestItems(elements, position);
    var events = collapseHoverEvents(ns.options.events);
    var dblClickSpeed = ns.options.dblClickSpeed;
    var eventHandlers = [];
    var eventHandlerName = helpers$1.getEventHandlerName(e.type);
    var options = (element || {}).options;
    if (e.type === 'mousemove') {
      if (element && !element.hovering) {
        ['mouseenter', 'mouseover'].forEach(function (eventName) {
          var handlerName = helpers$1.getEventHandlerName(eventName);
          var hoverEvent = helpers$1.createMouseEvent(eventName, e);
          element.hovering = true;
          if (typeof options[handlerName] === 'function') {
            eventHandlers.push([options[handlerName], hoverEvent, element]);
          }
        });
      } else if (!element) {
        elements.forEach(function (el) {
          if (el.hovering) {
            el.hovering = false;
            var opt = el.options;
            ['mouseout', 'mouseleave'].forEach(function (eventName) {
              var handlerName = helpers$1.getEventHandlerName(eventName);
              var hoverEvent = helpers$1.createMouseEvent(eventName, e);
              if (typeof opt[handlerName] === 'function') {
                eventHandlers.push([opt[handlerName], hoverEvent, el]);
              }
            });
          }
        });
      }
    }
    if (element && events.indexOf('dblclick') > -1 && typeof options.onDblclick === 'function') {
      if (e.type === 'click' && typeof options.onClick === 'function') {
        clearTimeout(element.clickTimeout);
        element.clickTimeout = setTimeout(function () {
          delete element.clickTimeout;
          options.onClick.call(element, e);
        }, dblClickSpeed);
        e.stopImmediatePropagation();
        e.preventDefault();
        return;
      } else if (e.type === 'dblclick' && element.clickTimeout) {
        clearTimeout(element.clickTimeout);
        delete element.clickTimeout;
      }
    }
    if (element && typeof options[eventHandlerName] === 'function' && eventHandlers.length === 0) {
      eventHandlers.push([options[eventHandlerName], e, element]);
    }
    if (eventHandlers.length > 0) {
      e.stopImmediatePropagation();
      e.preventDefault();
      eventHandlers.forEach(function (eventHandler) {
        eventHandler[0].call(eventHandler[2], eventHandler[1]);
      });
    }
  }
  return {
    dispatcher: dispatcher,
    collapseHoverEvents: collapseHoverEvents
  };
}
var Annotation = function () {
  function Annotation(chart) {
    _classCallCheck(this, Annotation);
    this.helpers = helper();
    this.elements = {};
    this.options = this.helpers.initConfig(this.getAnnotationConfig(chart.options)), this.onDestroy = [];
    this.firstRun = true;
    this.supported = false;
    this._chart = chart;
    this.events = boxAnnotationEvents(chart, this.helpers);
    this.types = {
      line: LineAnnotation,
      box: BoxAnnotation
    };
  }
  _createClass(Annotation, [{
    key: "setAfterDataLimitsHook",
    value: function setAfterDataLimitsHook(axisOptions) {
      var me = this;
      me.helpers.decorate(axisOptions, 'afterDataLimits', function (previous, scale) {
        if (previous) {
          previous(scale);
        }
        me.helpers.adjustScaleRange(scale);
      });
    }
  }, {
    key: "draw",
    value: function draw(drawTime) {
      var me = this;
      return function (chartInstance) {
        var defaultDrawTime = chartInstance.annotation.options.drawTime;
        me.helpers.elements(chartInstance).filter(function (element) {
          return drawTime === 'afterUpdate' || drawTime === (element.options.drawTime || defaultDrawTime);
        }).forEach(function (element) {
          element.configure();
          element.draw(false);
        });
      };
    }
  }, {
    key: "getAnnotationConfig",
    value: function getAnnotationConfig(chartOptions) {
      var plugins = chartOptions.plugins;
      var pluginAnnotation = plugins && plugins.annotation ? plugins.annotation : null;
      return pluginAnnotation || chartOptions.annotation || {};
    }
  }]);
  return Annotation;
}();
function isAnnotationActive(chartInstance) {
  var ns = chartInstance.annotation;
  return ns && ns.options.enabled && ns.supported;
}
var annotation = {
  id: 'annotation',
  beforeInit: function beforeInit(chart) {
    var chartOptions = chart.options;
    if (chartOptions.annotation.enabled) {
      var ns = chart.annotation = new Annotation(chart);
      chart.ensureScalesHaveIDs();
      if (chartOptions.scales) {
        ns.supported = true;
        helpers.each(chartOptions.scales.xAxes, ns.setAfterDataLimitsHook);
        helpers.each(chartOptions.scales.yAxes, ns.setAfterDataLimitsHook);
      }
    }
  },
  beforeUpdate: function beforeUpdate(chartInstance) {
    var ns = chartInstance.annotation;
    if (!isAnnotationActive(chartInstance)) {
      return;
    }
    if (!ns.firstRun) {
      ns.options = ns.helpers.initConfig(ns.getAnnotationConfig(chartInstance.options));
    } else {
      ns.firstRun = false;
    }
    var elementIds = [];
    var annotationTypes = chartInstance.annotation.types;
    ns.options.annotations.forEach(function (annotation) {
      var id = annotation.id || ns.helpers.objectId();
      if (!ns.elements[id] && annotationTypes[annotation.type]) {
        var cls = annotationTypes[annotation.type];
        var element = new cls({
          id: id,
          options: annotation,
          chartInstance: chartInstance
        });
        element.initialize();
        ns.elements[id] = element;
        annotation.id = id;
        elementIds.push(id);
      } else if (ns.elements[id]) {
        elementIds.push(id);
      }
    });
    Object.keys(ns.elements).forEach(function (id) {
      if (elementIds.indexOf(id) === -1) {
        ns.elements[id].destroy();
        delete ns.elements[id];
      }
    });
  },
  afterUpdate: function afterUpdate(chart) {
    var _chart$annotation$dra;
    if (!isAnnotationActive(chart)) {
      return;
    }
    (_chart$annotation$dra = chart.annotation.draw('afterUpdate')).call.apply(_chart$annotation$dra, [this].concat(Array.prototype.slice.call(arguments)));
  },
  beforeDatasetsDraw: function beforeDatasetsDraw(chart) {
    var _chart$annotation$dra2;
    if (!isAnnotationActive(chart)) {
      return;
    }
    (_chart$annotation$dra2 = chart.annotation.draw('beforeDatasetsDraw')).call.apply(_chart$annotation$dra2, [this].concat(Array.prototype.slice.call(arguments)));
  },
  afterDatasetsDraw: function afterDatasetsDraw(chart) {
    var _chart$annotation$dra3;
    if (!isAnnotationActive(chart)) {
      return;
    }
    (_chart$annotation$dra3 = chart.annotation.draw('afterDatasetsDraw')).call.apply(_chart$annotation$dra3, [this].concat(Array.prototype.slice.call(arguments)));
  },
  afterDraw: function afterDraw(chart) {
    var _chart$annotation$dra4;
    if (!isAnnotationActive(chart)) {
      return;
    }
    (_chart$annotation$dra4 = chart.annotation.draw('afterDraw')).call.apply(_chart$annotation$dra4, [this].concat(Array.prototype.slice.call(arguments)));
  },
  afterInit: function afterInit(chart) {
    if (!isAnnotationActive(chart)) {
      return;
    }
    var watchFor = chart.annotation.options.events;
    if (helpers.isArray(watchFor) && watchFor.length > 0) {
      var canvas = chart.canvas;
      var eventHandler = chart.annotation.events.dispatcher.bind(chart);
      chart.annotation.events.collapseHoverEvents(watchFor).forEach(function (eventName) {
        canvas.addEventListener(eventName, eventHandler);
        chart.annotation.onDestroy.push(function () {
          canvas.removeEventListener(eventName, eventHandler);
        });
      });
    }
  },
  destroy: function destroy(chartInstance) {
    if (!isAnnotationActive(chartInstance)) {
      return;
    }
    var deregisterers = chartInstance.annotation.onDestroy;
    while (deregisterers.length > 0) {
      deregisterers.pop()();
    }
  }
};

var annHelpers$1 = helper();
var LabelMatchMode = function () {
  function LabelMatchMode() {
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var chartInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    _classCallCheck(this, LabelMatchMode);
    if (!cfg) {
      cfg = {};
    }
    this.match = cfg.match || null;
    this.search = cfg.search || 'value';
    this.chartInstance = chartInstance;
    this.options = options;
  }
  _createClass(LabelMatchMode, [{
    key: "getPixelPosition",
    value: function getPixelPosition(scale, matchValue, prefix) {
      var cfg = this;
      return annHelpers$1.getPixelPosition(cfg, scale, matchValue, prefix);
    }
  }]);
  return LabelMatchMode;
}();
var XLabel = function (_Element) {
  _inherits(XLabel, _Element);
  var _super = _createSuper(XLabel);
  function XLabel(config) {
    var _this;
    _classCallCheck(this, XLabel);
    _this = _super.call(this);
    _this.enabled = true;
    _this._model = {};
    _this.chart = config.chart;
    _this.ctx = config.chart.assistCtx;
    _this.maxHeight = undefined;
    _this.maxWidth = undefined;
    _this.top = undefined;
    _this.bottom = undefined;
    _this.left = undefined;
    _this.right = undefined;
    _this.height = 20;
    _this.width = undefined;
    _this._margins = undefined;
    _this.paddingTop = undefined;
    _this.paddingBottom = undefined;
    _this.paddingLeft = undefined;
    _this.paddingRight = undefined;
    _this.position = undefined;
    _this.weight = undefined;
    _this.text = undefined;
    _this.fullWidth = undefined;
    _this._labelsArea = undefined;
    _this.xScaleID = 'x';
    _this.data = undefined;
    _this.isConfigured = false;
    _this._helpers = annHelpers$1;
    _this.drawText = undefined;
    _extends(_assertThisInitialized(_this), config.options);
    return _this;
  }
  _createClass(XLabel, [{
    key: "isHorizontal",
    value: function isHorizontal() {
      return true;
    }
  }, {
    key: "update",
    value: function update(maxWidth, maxHeight, margins) {
      var me = this;
      me.maxWidth = maxWidth;
      me.maxHeight = maxHeight;
      me._margins = margins;
    }
  }, {
    key: "updateLayout",
    value: function updateLayout(chart) {
      var me = this;
      var chartArea = chart.chartArea;
      me._labelsArea = {
        left: chartArea.left,
        right: chartArea.right,
        top: me.top,
        bottom: me.bottom,
        innerWidth: chartArea.right - chartArea.left
      };
      me.configureLayout();
    }
  }, {
    key: "configureLayout",
    value: function configureLayout() {
      var _this2 = this;
      var me = this;
      var model = this._model;
      var options = this;
      var chartInstance = this.chart;
      var xScale = chartInstance.scales[this.xScaleID];
      var chartArea = chartInstance.chartArea;
      model.clip = {
        x1: chartArea.left,
        x2: chartArea.right,
        y1: me.top,
        y2: me.bottom
      };
      var left = chartArea.left;
      var top = me.top;
      var right = chartArea.right;
      var bottom = me.bottom;
      model.left = left;
      model.top = top;
      model.right = right;
      model.bottom = bottom;
      model.text = {
        left: 0,
        right: left,
        bottom: bottom,
        top: top
      };
      model.borderColor = options['borderColor'];
      model.borderWidth = options['borderWidth'];
      model.backgroundColor = options['backgroundColor'];
      model.data = [];
      if (me.data && me.data.length) {
        var _chartArea = me.chart.chartArea;
        me.data.forEach(function (d) {
          var defaultItem = helpers.clone(defaults.xLabels.defaultItem);
          var opt = helpers.merge(defaultItem, d);
          if (opt.enabled) {
            var instance = new LabelMatchMode(d.matchMode, me.chart, d);
            var _left = d.left,
                _right = d.right;
            if (!!_left) {
              d.start = xScale.getValueForPixel(_left);
              d.left = undefined;
            }
            if (!!_right) {
              d.end = xScale.getValueForPixel(_right);
              d.right = undefined;
            }
            var min = _this2._helpers.isValid(d.start) ? instance.getPixelPosition(xScale, d.start, 'min') : _chartArea.left;
            var max = _this2._helpers.isValid(d.end) ? instance.getPixelPosition(xScale, d.end, 'max') : _chartArea.right;
            var childLeft = Math.min(min, max);
            var childRight = Math.max(min, max);
            if (Math.abs(childRight - childLeft) > 0) {
              model.data.push({
                left: childLeft,
                top: top,
                bottom: bottom,
                right: childRight,
                borderColor: opt['borderColor'],
                borderWidth: opt['borderWidth'],
                backgroundColor: opt['backgroundColor']
              });
            }
          }
        });
      }
    }
  }, {
    key: "draw",
    value: function draw() {
      this.drawLabels();
    }
  }, {
    key: "drawLabels",
    value: function drawLabels() {
      var me = this;
      var ctx = me.chart.assistCtx;
      var view = me._model;
      ctx.save();
      ctx.beginPath();
      ctx.rect(view.text.left, view.text.top, view.clip.x2 - view.text.left, view.clip.y2 - view.clip.y1);
      ctx.clip();
      ctx.lineWidth = view.borderWidth;
      ctx.strokeStyle = view.borderColor;
      ctx.fillStyle = view.backgroundColor;
      if (!!me.drawText) {
        var _width = view.text.right - view.text.left;
        var _height = view.text.bottom - view.text.top;
        ctx.fillRect(view.text.left, view.text.top, _width, _height);
        ctx.strokeRect(view.text.left, view.text.top, _width, _height);
        ctx.textAlign = 'right';
        ctx.font = "bold serif";
        var y = (view.text.bottom - view.text.top) / 2 + view.text.top;
        ctx.fillText(me.text, view.text.left, y, _width);
      }
      ctx.lineWidth = view.borderWidth;
      ctx.strokeStyle = view.borderColor;
      ctx.fillStyle = view.backgroundColor;
      var width = view.right - view.left;
      var height = view.bottom - view.top;
      ctx.fillRect(view.left, view.top, width, height);
      ctx.strokeRect(view.left, view.top, width, height);
      if (view.data && view.data.length) {
        view.data.forEach(function (dview) {
          ctx.lineWidth = dview.borderWidth;
          ctx.strokeStyle = dview.borderColor;
          ctx.fillStyle = dview.backgroundColor;
          var dwidth = dview.right - dview.left;
          var dheight = dview.bottom - dview.top;
          ctx.fillRect(dview.left, dview.top, dwidth, dheight);
          ctx.strokeRect(dview.left, dview.top, dwidth, dheight);
        });
      }
      ctx.restore();
    }
  }]);
  return XLabel;
}(Element$1);

defaults.set('xLabels', {
  enabled: false,
  labels: [],
  defaultLabels: {
    enabled: true,
    fullWidth: true,
    position: "bottom",
    drawText: false,
    height: 20,
    weight: 1,
    data: []
  },
  defaultItem: {
    enabled: true,
    borderColor: "rgba(255,230,234,0.4)",
    backgroundColor: "rgba(255,230,234,0.5)",
    type: "label",
    xScaleID: "x",
    start: undefined,
    end: undefined,
    left: undefined,
    right: undefined,
    borderWidth: 1,
    matchMode: {
      "match": ["left", "right"],
      "search": "value"
    }
  }
});
var xLabels = {
  id: 'xLabels',
  _element: XLabel,
  beforeInit: function beforeInit(chart) {
    var opts = chart.options.xLabels;
    if (opts && opts.enabled) {
      var xLabels = [];
      (opts.labels || []).forEach(function (opt, index) {
        var cloneOpt = helpers.clone(defaults.xLabels.defaultLabels);
        var targetOpt = helpers.merge(cloneOpt, opt);
        if (targetOpt.enabled) {
          var instance = new XLabel({
            ctx: chart.ctx,
            options: targetOpt,
            assistCtx: chart.assistCtx,
            chart: chart
          });
          layouts.addBox(chart, instance);
          xLabels.push(instance);
        }
      });
      chart.xLabels = xLabels;
    }
  },
  afterUpdate: function afterUpdate(chart) {
    var xLabels = chart.xLabels;
    var xLabelsOpts = chart.options.xLabels;
    if (xLabelsOpts.enabled) {
      if (xLabels && xLabels.length) {
        xLabels.forEach(function (xlabel) {
          xlabel.updateLayout(chart);
          xlabel.drawLabels();
        });
      }
    }
  }
};

var Watermark = function (_Element) {
  _inherits(Watermark, _Element);
  var _super = _createSuper(Watermark);
  function Watermark(config) {
    var _this;
    _classCallCheck(this, Watermark);
    _this = _super.call(this);
    _extends(_assertThisInitialized(_this), config);
    var ctx = config.ctx,
        canvas = config.canvas,
        chart = config.chart,
        options = config.options;
    _this.chart = chart;
    _this.options = options;
    _this.ctx = ctx;
    _this.canvas = canvas;
    _this.imageObj = null;
    _this.initMark();
    return _this;
  }
  _createClass(Watermark, [{
    key: "initMark",
    value: function initMark() {
      var _this2 = this;
      var image = this.options.image;
      if (image) {
        var imageObj = typeof image === 'string' ? this.imageFromString(image) : image;
        imageObj.onload = function () {
          _this2.chart.update();
        };
        this.imageObj = imageObj;
      }
    }
  }, {
    key: "imageFromString",
    value: function imageFromString(imageSrc) {
      var imageObj = new Image();
      imageObj.src = imageSrc;
      return imageObj;
    }
  }]);
  return Watermark;
}(Element$1);
var watermark = {
  id: 'watermark',
  _element: Watermark,
  beforeInit: function beforeInit(chartInstance) {
    var watermark = chartInstance.options.watermark;
    if (watermark) {
      helpers.mergeIf(watermark, this.defaults);
      var ctx = chartInstance.ctx,
          canvas = chartInstance.canvas;
      chartInstance.watermark = new Watermark({
        ctx: ctx,
        canvas: canvas,
        options: watermark,
        chart: chartInstance
      });
    }
  },
  afterDraw: function afterDraw(chartInstance) {
    chartInstance.watermark && this.drawWatermark(chartInstance);
  },
  drawTextMark: function drawTextMark(position, ctx, options) {
    var text = options.text,
        rotate = options.rotate,
        fontColor = options.fontColor,
        fontSize = options.fontSize,
        fontFamily = options.fontFamily,
        repeat = options.repeat;
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    var radian = -Number(rotate) * Math.PI / 180;
    context.font = "".concat(fontSize, "px ").concat(fontFamily);
    var textMetrics = context.measureText(text);
    var safePadding = fontSize || 12;
    var height = Math.max(Math.abs(Math.sin(radian) * (textMetrics.width + safePadding * 2)), fontSize);
    var width = Math.max(Math.abs(Math.cos(radian) * (textMetrics.width + safePadding * 2)), textMetrics.width);
    canvas.height = height;
    canvas.width = width;
    var x = -Math.abs(Math.sin(radian) * height) + safePadding;
    var y = Math.abs(Math.cos(radian) * height);
    context.rotate(radian);
    context.translate(0, 0);
    context.font = "".concat(fontSize, "px ").concat(fontFamily);
    context.fillStyle = fontColor;
    context.fillText(text, x, y);
    context.setTransform(1, 0, 0, 1, 0, 0);
    var pattern = ctx.createPattern(canvas, repeat);
    ctx.fillStyle = pattern;
    ctx.fillRect(position.x, position.y, position.width, position.height);
  },
  drawTextMark2: function drawTextMark2(position, ctx, options) {
    var text = options.text,
        density = options.density,
        rotate = options.rotate;
    var cw = position.width,
        ch = position.height;
    var fwidth = Math.floor(cw / Number(density)),
        fheight = Math.floor(ch / Number(density));
    for (var hh = fheight; hh < ch; hh += fheight) {
      for (var ww = fwidth; ww < cw; ww += fwidth) {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.translate(ww, hh);
        ctx.rotate(-Number(rotate) * Math.PI / 180);
        ctx.fillText(text, -fwidth / 2, -fheight / 2);
      }
    }
  },
  drawImageMark: function drawImageMark(position, ctx, options, imageObj) {
    var repeat = options.repeat,
        height = options.height,
        width = options.width;
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    canvas.height = height || imageObj.height;
    canvas.width = width || imageObj.width;
    context.drawImage(imageObj, 0, 0);
    var pattern = ctx.createPattern(canvas, repeat);
    ctx.fillStyle = pattern;
    ctx.fillRect(position.x, position.y, position.width, position.height);
  },
  drawWatermark: function drawWatermark(chartInstance) {
    var _chartInstance$waterm = chartInstance.watermark,
        ctx = _chartInstance$waterm.ctx,
        canvas = _chartInstance$waterm.canvas,
        imageObj = _chartInstance$waterm.imageObj,
        options = _chartInstance$waterm.options;
    if (!options.display) return;
    ctx.save();
    ctx.globalAlpha = options.opacity;
    var cHeight,
        cWidth,
        offsetX = 0,
        offsetY = 0;
    if (options.alignToChartArea) {
      var chartArea = chartInstance.chartArea;
      cHeight = chartArea.bottom - chartArea.top;
      cWidth = chartArea.right - chartArea.left;
      offsetX = chartArea.left;
      offsetY = chartArea.top;
    } else {
      cHeight = canvas.clientHeight || canvas.height;
      cWidth = canvas.clientWidth || canvas.width;
    }
    var x = this.autoPercentage(options.x, cWidth);
    var y = this.autoPercentage(options.y, cHeight);
    var height = cHeight || options.height;
    height = this.autoPercentage(height, cHeight);
    var width = cWidth || options.width;
    width = this.autoPercentage(width, cWidth);
    if (options.repeat === 'no-repeat') {
      switch (options.alignX) {
        case "right":
          x = cWidth - x - width;
          break;
        case "middle":
          x = cWidth / 2 - width / 2 - x;
          break;
      }
      switch (options.alignY) {
        case "bottom":
          y = cHeight - y - height;
          break;
        case "middle":
          y = cHeight / 2 - height / 2 - y;
          break;
      }
    }
    var position = {
      x: offsetX + x,
      y: offsetY + y,
      width: width,
      height: height
    };
    if (options.text) {
      this.drawTextMark(position, ctx, options);
    }
    if (imageObj) {
      this.drawImageMark(position, ctx, options, imageObj);
    }
    ctx.restore();
  },
  isPercentage: function isPercentage(value) {
    return typeof value == "string" && value.charAt(value.length - 1) == "%";
  },
  calcPercentage: function calcPercentage(percentage, max) {
    var value = percentage.substr(0, percentage.length - 1);
    value = parseFloat(value);
    return max * (value / 100);
  },
  autoPercentage: function autoPercentage(value, maxIfPercentage) {
    if (this.isPercentage(value)) {
      value = this.calcPercentage(value, maxIfPercentage);
    }
    return value;
  },
  defaults: {
    display: true,
    x: 0,
    y: 0,
    alignToChartArea: false,
    opacity: 0.05,
    density: 4,
    rotate: 30,
    alignX: "top",
    alignY: "left",
    repeat: 'repeat',
    height: '',
    width: '',
    image: null,
    text: 'BKCharts',
    fontSize: 12,
    fontFamily: 'auto',
    fontColor: 'black'
  }
};

function getDataYValue$1(current) {
  var value = 0;
  if (Object.prototype.hasOwnProperty.call(current, 'y') && typeof current.y === 'number') {
    value = current.y;
  }
  if (typeof current === 'number') {
    value = current;
  }
  if (Array.isArray(current) && current.length > 0) {
    value = current.slice(-1)[0];
  }
  return value;
}
var SUPPORTED_TYPES = {};
['pie', 'doughnut', 'polarArea', 'bar', 'line'].forEach(function (t) {
  SUPPORTED_TYPES[t] = true;
});
var Label = function () {
  function Label() {
    _classCallCheck(this, Label);
    this.barTotalPercentage = {};
    this.renderToDataset = this.renderToDataset.bind(this);
  }
  _createClass(Label, [{
    key: "setup",
    value: function setup(chart, options) {
      this.chart = chart;
      this.ctx = chart.ctx;
      this.args = {};
      this.barTotal = {};
      var chartOptions = chart.config.options;
      this.options = _extends({
        position: 'default',
        precision: 0,
        fontSize: chartOptions.fontSize,
        fontColor: chartOptions.fontColor,
        fontStyle: chartOptions.fontStyle,
        fontFamily: chartOptions.fontFamily,
        shadowOffsetX: 3,
        shadowOffsetY: 3,
        shadowColor: 'rgba(0,0,0,0.3)',
        shadowBlur: 6,
        images: [],
        outsidePadding: 2,
        textMargin: 2,
        overlap: true,
        filter: [],
        enabled: false
      }, options);
      if (['bar', 'line'].includes(chart.config.type)) {
        this.options.position = 'default';
        this.options.arc = false;
        this.options.overlap = true;
      }
    }
  }, {
    key: "render",
    value: function render() {
      this.labelBounds = [];
      this.chart.data.datasets.forEach(this.renderToDataset);
    }
  }, {
    key: "filterElementByValue",
    value: function filterElementByValue(el, value) {
      return Object.prototype.hasOwnProperty.call(el, 'y') && el.y === value || typeof el === 'number' && el === value || Array.isArray(el) && el.slice(-1)[0] === value;
    }
  }, {
    key: "renderToDataset",
    value: function renderToDataset(dataset, index) {
      var _this = this;
      this.totalPercentage = 0;
      this.total = null;
      var arg = this.args[index];
      if (Array.isArray(this.options.filter) && this.options.filter.length) {
        this.options.filter.forEach(function (filter) {
          switch (filter) {
            case 'max':
              _this.options.position = 'bottom';
              var maxValue = Math.min.apply(Math, _toConsumableArray(arg.meta.data.map(function (d) {
                return getDataYValue$1(d);
              })));
              arg.meta.data.forEach(function (element, index) {
                this.filterElementByValue(element, maxValue) && this.renderToElement(dataset, arg, element, index, 'Max');
              }.bind(_this));
              break;
            case 'min':
              _this.options.position = 'top';
              var minValue = Math.max.apply(Math, _toConsumableArray(arg.meta.data.map(function (d) {
                return getDataYValue$1(d);
              })));
              arg.meta.data.forEach(function (element, index) {
                this.filterElementByValue(element, minValue) && this.renderToElement(dataset, arg, element, index, 'Min');
              }.bind(_this));
              break;
          }
        });
      } else {
        arg.meta.data.forEach(function (element, index) {
          this.renderToElement(dataset, arg, element, index);
        }.bind(this));
      }
    }
  }, {
    key: "renderToElement",
    value: function renderToElement(dataset, arg, element, index, prefix) {
      if (!this.shouldRenderToElement(arg.meta, element)) {
        return;
      }
      this.percentage = null;
      var label = this.getLabel(dataset, element, index);
      if (!label) {
        return;
      }
      if (!!prefix) {
        label = "".concat(prefix, ": ").concat(label);
      }
      var ctx = this.ctx;
      ctx.save();
      ctx.font = helpers.fontString(this.options.fontSize, this.options.fontStyle, this.options.fontFamily);
      var renderInfo = this.getRenderInfo(element, label);
      if (!this.drawable(element, label, renderInfo)) {
        ctx.restore();
        return;
      }
      ctx.beginPath();
      ctx.fillStyle = this.getFontColor(dataset, element, index);
      this.renderLabel(label, renderInfo);
      ctx.restore();
    }
  }, {
    key: "renderLabel",
    value: function renderLabel(label, renderInfo) {
      return this.options.arc ? this.renderArcLabel(label, renderInfo) : this.renderBaseLabel(label, renderInfo);
    }
  }, {
    key: "renderBaseLabel",
    value: function renderBaseLabel(label, position) {
      var ctx = this.ctx;
      if (_typeof(label) === 'object') {
        ctx.drawImage(label, position.x - label.width / 2, position.y - label.height / 2, label.width, label.height);
      } else {
        ctx.save();
        ctx.textBaseline = 'top';
        ctx.textAlign = 'center';
        if (this.options.textShadow) {
          ctx.shadowOffsetX = this.options.shadowOffsetX;
          ctx.shadowOffsetY = this.options.shadowOffsetY;
          ctx.shadowColor = this.options.shadowColor;
          ctx.shadowBlur = this.options.shadowBlur;
        }
        var lines = label.split('\n');
        for (var i = 0; i < lines.length; i++) {
          var offsetY = 0;
          switch (this.options.position) {
            case 'top':
              break;
            case 'bottom':
              offsetY = this.options.fontSize;
              break;
            default:
              offsetY = this.options.fontSize / 2;
              break;
          }
          var y = position.y - offsetY * lines.length + this.options.fontSize * i;
          ctx.fillText(lines[i], position.x, y);
        }
        ctx.restore();
      }
    }
  }, {
    key: "renderArcLabel",
    value: function renderArcLabel(label, renderInfo) {
      var ctx = this.ctx,
          radius = renderInfo.radius,
          view = renderInfo.view;
      ctx.save();
      ctx.translate(view.x, view.y);
      if (typeof label === 'string') {
        ctx.rotate(renderInfo.startAngle);
        ctx.textBaseline = 'middle';
        ctx.textAlign = 'left';
        var lines = label.split('\n'),
            max = 0,
            widths = [],
            offset = 0;
        if (this.options.position === 'border') {
          offset = (lines.length - 1) * this.options.fontSize / 2;
        }
        for (var j = 0; j < lines.length; ++j) {
          var mertrics = ctx.measureText(lines[j]);
          if (mertrics.width > max) {
            max = mertrics.width;
          }
          widths.push(mertrics.width);
        }
        for (var j = 0; j < lines.length; ++j) {
          var line = lines[j];
          var y = (lines.length - 1 - j) * -this.options.fontSize + offset;
          ctx.save();
          var padding = (max - widths[j]) / 2;
          ctx.rotate(padding / radius);
          for (var i = 0; i < line.length; i++) {
            var char = line.charAt(i);
            mertrics = ctx.measureText(char);
            ctx.save();
            ctx.translate(0, -1 * radius);
            ctx.fillText(char, 0, y);
            ctx.restore();
            ctx.rotate(mertrics.width / radius);
          }
          ctx.restore();
        }
      } else {
        ctx.rotate((view.startAngle + Math.PI / 2 + renderInfo.endAngle) / 2);
        ctx.translate(0, -1 * radius);
        this.renderLabel(label, {
          x: 0,
          y: 0
        });
      }
      ctx.restore();
    }
  }, {
    key: "shouldRenderToElement",
    value: function shouldRenderToElement(meta, element) {
      return !meta.hidden && !element.hidden && (this.options.showZero || this.chart.config.type === 'polarArea' ? element.outerRadius !== 0 : element.circumference !== 0);
    }
  }, {
    key: "getLabel",
    value: function getLabel(dataset, element, index) {
      var label;
      if (typeof this.options.render === 'function') {
        label = this.options.render({
          label: this.chart.config.data.labels[index],
          value: getDataYValue$1(dataset.data[index]),
          percentage: this.getPercentage(dataset, element, index),
          dataset: dataset,
          index: index
        });
      } else {
        switch (this.options.render) {
          case 'value':
            label = getDataYValue$1(dataset.data[index]);
            break;
          case 'label':
            label = this.chart.config.data.labels[index];
            break;
          case 'image':
            label = this.options.images[index] ? this.loadImage(this.options.images[index]) : '';
            break;
          case 'percentage2':
            label = "".concat(this.chart.config.data.labels[index], " \n ").concat(getDataYValue$1(dataset.data[index]), " \n ").concat(this.getPercentage(dataset, element, index), "%");
            break;
          case 'percentage':
          default:
            label = this.getPercentage(dataset, element, index) + '%';
            break;
        }
      }
      if (_typeof(label) === 'object') {
        label = this.loadImage(label);
      } else if (label !== null && label !== undefined) {
        label = label.toString();
      }
      return label;
    }
  }, {
    key: "getFontColor",
    value: function getFontColor(dataset, element, index) {
      var fontColor = this.options.fontColor;
      if (typeof fontColor === 'function') {
        fontColor = fontColor({
          label: this.chart.config.data.labels[index],
          value: getDataYValue$1(dataset.data[index]),
          percentage: this.getPercentage(dataset, element, index),
          backgroundColor: dataset.backgroundColor[index],
          dataset: dataset,
          index: index
        });
      } else if (typeof fontColor !== 'string') {
        fontColor = fontColor[index] || this.chart.config.options.defaultFontColor;
      }
      return fontColor;
    }
  }, {
    key: "getPercentage",
    value: function getPercentage(dataset, element, index) {
      if (this.percentage !== null) {
        return this.percentage;
      }
      var percentage;
      if (this.chart.config.type === 'polarArea') {
        if (this.total === null) {
          this.total = 0;
          for (var i = 0; i < dataset.data.length; ++i) {
            this.total += getDataYValue$1(dataset.data[i]);
          }
        }
        percentage = getDataYValue$1(dataset.data[index]) / this.total * 100;
      } else if (this.chart.config.type === 'bar') {
        if (this.barTotal[index] === undefined) {
          this.barTotal[index] = 0;
          for (var i = 0; i < this.chart.data.datasets.length; ++i) {
            this.barTotal[index] += getDataYValue$1(this.chart.data.datasets[i].data[index]);
          }
        }
        percentage = getDataYValue$1(dataset.data[index]) / this.barTotal[index] * 100;
      } else {
        percentage = element.circumference / this.chart.config.options.circumference * 100;
      }
      percentage = parseFloat(percentage.toFixed(this.options.precision));
      if (!this.options.showActualPercentages) {
        if (this.chart.config.type === 'bar') {
          this.totalPercentage = this.barTotalPercentage[index] || 0;
        }
        this.totalPercentage += percentage;
        if (this.totalPercentage > 100) {
          percentage -= this.totalPercentage - 100;
          percentage = parseFloat(percentage.toFixed(this.options.precision));
        }
        if (this.chart.config.type === 'bar') {
          this.barTotalPercentage[index] = this.totalPercentage;
        }
      }
      this.percentage = percentage;
      return percentage;
    }
  }, {
    key: "getRenderInfo",
    value: function getRenderInfo(element, label) {
      if (this.chart.config.type === 'bar') {
        return this.getBarRenderInfo(element, label);
      } else {
        return this.options.arc ? this.getArcRenderInfo(element, label) : this.getBaseRenderInfo(element, label);
      }
    }
  }, {
    key: "getBaseRenderInfo",
    value: function getBaseRenderInfo(element, label) {
      if (this.options.position === 'outside' || this.options.position === 'border') {
        var renderInfo,
            rangeFromCentre,
            view = element,
            centreAngle = view.startAngle + (view.endAngle - view.startAngle) / 2,
            innerRadius = view.outerRadius / 2;
        if (this.options.position === 'border') {
          rangeFromCentre = (view.outerRadius - innerRadius) / 2 + innerRadius;
        } else if (this.options.position === 'outside') {
          rangeFromCentre = view.outerRadius - innerRadius + innerRadius + this.options.textMargin;
        }
        renderInfo = {
          x: view.x + Math.cos(centreAngle) * rangeFromCentre,
          y: view.y + Math.sin(centreAngle) * rangeFromCentre
        };
        if (this.options.position === 'outside') {
          var offset = this.options.textMargin + this.measureLabel(label).width / 2;
          renderInfo.x += renderInfo.x < view.x ? -offset : offset;
        }
        return renderInfo;
      } else {
        return element.tooltipPosition();
      }
    }
  }, {
    key: "getArcRenderInfo",
    value: function getArcRenderInfo(element, label) {
      var radius,
          view = element;
      if (this.options.position === 'outside') {
        radius = view.outerRadius + this.options.fontSize + this.options.textMargin;
      } else if (this.options.position === 'border') {
        radius = (view.outerRadius / 2 + view.outerRadius) / 2;
      } else {
        radius = (view.innerRadius + view.outerRadius) / 2;
      }
      var startAngle = view.startAngle,
          endAngle = view.endAngle;
      var totalAngle = endAngle - startAngle;
      startAngle += Math.PI / 2;
      endAngle += Math.PI / 2;
      var mertrics = this.measureLabel(label);
      startAngle += (endAngle - (mertrics.width / radius + startAngle)) / 2;
      return {
        radius: radius,
        startAngle: startAngle,
        endAngle: endAngle,
        totalAngle: totalAngle,
        view: view
      };
    }
  }, {
    key: "getBarRenderInfo",
    value: function getBarRenderInfo(element, label) {
      var renderInfo = element.tooltipPosition();
      renderInfo.y -= this.measureLabel(label).height / 2 + this.options.textMargin;
      return renderInfo;
    }
  }, {
    key: "drawable",
    value: function drawable(element, label, renderInfo) {
      if (this.options.overlap) {
        return true;
      } else if (this.options.arc) {
        return renderInfo.endAngle - renderInfo.startAngle <= renderInfo.totalAngle;
      } else {
        var mertrics = this.measureLabel(label),
            left = renderInfo.x - mertrics.width / 2,
            right = renderInfo.x + mertrics.width / 2,
            top = renderInfo.y - mertrics.height / 2,
            bottom = renderInfo.y + mertrics.height / 2;
        if (this.options.renderInfo === 'outside') {
          return this.outsideInRange(left, right, top, bottom);
        } else {
          return element.inRange(left, top) && element.inRange(left, bottom) && element.inRange(right, top) && element.inRange(right, bottom);
        }
      }
    }
  }, {
    key: "outsideInRange",
    value: function outsideInRange(left, right, top, bottom) {
      var labelBounds = this.labelBounds;
      for (var i = 0; i < labelBounds.length; ++i) {
        var bound = labelBounds[i];
        var potins = [[left, top], [left, bottom], [right, top], [right, bottom]];
        for (var j = 0; j < potins.length; ++j) {
          var x = potins[j][0];
          var y = potins[j][1];
          if (x >= bound.left && x <= bound.right && y >= bound.top && y <= bound.bottom) {
            return false;
          }
        }
        potins = [[bound.left, bound.top], [bound.left, bound.bottom], [bound.right, bound.top], [bound.right, bound.bottom]];
        for (var j = 0; j < potins.length; ++j) {
          var x = potins[j][0];
          var y = potins[j][1];
          if (x >= left && x <= right && y >= top && y <= bottom) {
            return false;
          }
        }
      }
      labelBounds.push({
        left: left,
        right: right,
        top: top,
        bottom: bottom
      });
      return true;
    }
  }, {
    key: "measureLabel",
    value: function measureLabel(label) {
      if (_typeof(label) === 'object') {
        return {
          width: label.width,
          height: label.height
        };
      } else {
        var width = 0;
        var lines = label.split('\n');
        for (var i = 0; i < lines.length; ++i) {
          var result = this.ctx.measureText(lines[i]);
          if (result.width > width) {
            width = result.width;
          }
        }
        return {
          width: width,
          height: this.options.fontSize * lines.length
        };
      }
    }
  }, {
    key: "loadImage",
    value: function loadImage(obj) {
      var image = new Image();
      image.src = obj.src;
      image.width = obj.width;
      image.height = obj.height;
      return image;
    }
  }]);
  return Label;
}();
var labels = {
  id: 'labels',
  beforeDatasetsUpdate: function beforeDatasetsUpdate(chart) {
    var options = chart.config.options.labels;
    if (!SUPPORTED_TYPES[chart.config.type] || !options || !options.enabled) {
      return;
    }
    if (!Array.isArray(options)) {
      options = [options];
    }
    var count = options.length;
    if (!chart._labels || count !== chart._labels.length) {
      chart._labels = options.map(function () {
        return new Label();
      });
    }
    var someOutside = false,
        maxPadding = 0;
    for (var i = 0; i < count; ++i) {
      var label = chart._labels[i];
      label.setup(chart, options[i]);
      if (label.options.position === 'outside') {
        someOutside = true;
        var padding = label.options.fontSize * 1.5 + label.options.outsidePadding;
        if (padding > maxPadding) {
          maxPadding = padding;
        }
      }
    }
    if (someOutside) {
      chart.chartArea.top += maxPadding;
      chart.chartArea.bottom -= maxPadding;
    }
  },
  afterDatasetUpdate: function afterDatasetUpdate(chart, args, options) {
    var _options = chart.config.options.labels;
    if (!SUPPORTED_TYPES[chart.config.type] || !_options || !_options.enabled) {
      return;
    }
    chart._labels.forEach(function (label) {
      label.args[args.index] = args;
    });
  },
  beforeDraw: function beforeDraw(chart) {
    var _options = chart.config.options.labels;
    if (!SUPPORTED_TYPES[chart.config.type] || !_options || !_options.enabled) {
      return;
    }
    chart._labels.forEach(function (label) {
      label.barTotalPercentage = {};
    });
  },
  afterDatasetsDraw: function afterDatasetsDraw(chart) {
    var _options = chart.config.options.labels;
    if (!SUPPORTED_TYPES[chart.config.type] || !_options || !_options.enabled) {
      return;
    }
    chart._labels.forEach(function (label) {
      label.render();
    });
  }
};

var plugins = {
  filler: filler,
  legend: legend,
  title: title,
  tooltip: tooltip,
  crosshair: crosshair,
  dataZoom: dataZoom$1,
  colorBar: colorBar$1,
  annotation: annotation,
  xLabels: xLabels,
  watermark: watermark,
  labels: labels
};

BKChart.helpers = helpers;
BKChart._adapters = _adapters;
BKChart.Animation = Animation;
BKChart.Animator = Animator$1;
BKChart.animationService = Animations;
BKChart.controllers = controllers;
BKChart.DatasetController = DatasetController;
BKChart.defaults = defaults;
BKChart.Element = Element$1;
BKChart.elements = elements;
BKChart.Interaction = Interaction;
BKChart.layouts = layouts;
BKChart.platforms = platforms;
BKChart.plugins = pluginsCore;
BKChart.Scale = Scale;
BKChart.scaleService = scaleService;
BKChart.Ticks = Ticks;
Object.keys(scales).forEach(function (key) {
  return BKChart.scaleService.registerScale(scales[key]);
});
for (var k in plugins) {
  if (Object.prototype.hasOwnProperty.call(plugins, k)) {
    BKChart.plugins.register(plugins[k]);
  }
}
if (typeof window !== 'undefined') {
  window.BKChart = BKChart;
}
BKChart.constructor.prototype.registerController = function (controllers) {
  var _this = this;
  Object.keys(controllers).forEach(function (name) {
    if (!Object.prototype.hasOwnProperty.call(BKChart.controllers, name)) {
      _extends(_this.controllers, _defineProperty({}, name, controllers[name]));
    } else {
      console.warn("".concat(name, "\u5DF2\u5B58\u5728\u4E8EBkCharts\u7EC4\u4EF6\u5E93\uFF0C\u8BF7\u91CD\u547D\u540D"));
    }
  });
};

return BKChart;

})));


/***/ }),

/***/ 960:
/***/ (function(module) {

"use strict";
function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}var normalMerge=["attrs","props","domProps"],toArrayMerge=["class","style","directives"],functionalMerge=["on","nativeOn"],mergeJsxProps=function(a){return a.reduce(function(c,a){for(var b in a)if(!c[b])c[b]=a[b];else if(-1!==normalMerge.indexOf(b))c[b]=_extends({},c[b],a[b]);else if(-1!==toArrayMerge.indexOf(b)){var d=c[b]instanceof Array?c[b]:[c[b]],e=a[b]instanceof Array?a[b]:[a[b]];c[b]=d.concat(e)}else if(-1!==functionalMerge.indexOf(b)){for(var f in a[b])if(c[b][f]){var g=c[b][f]instanceof Array?c[b][f]:[c[b][f]],h=a[b][f]instanceof Array?a[b][f]:[a[b][f]];c[b][f]=g.concat(h)}else c[b][f]=a[b][f];}else if("hook"==b)for(var i in a[b])c[b][i]=c[b][i]?mergeFn(c[b][i],a[b][i]):a[b][i];else c[b]=a[b];return c},{})},mergeFn=function(a,b){return function(){a&&a.apply(this,arguments),b&&b.apply(this,arguments)}};module.exports=mergeJsxProps;


/***/ }),

/***/ 792:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "CHART_TYPE": function() { return /* binding */ CHART_TYPE; },
  "default": function() { return /* binding */ main; }
});

// CONCATENATED MODULE: ../../node_modules/vue/dist/vue.esm.js


var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function vue_esm_toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var vue_esm_hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return vue_esm_hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "production" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "production" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof __webpack_require__.g !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = __webpack_require__.g['process'] && __webpack_require__.g['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = (/* unused pure expression or super */ null && (noop));
var generateComponentTrace = ((/* unused pure expression or super */ null && (noop))); // work around flow check
var formatComponentName = ((/* unused pure expression or super */ null && (noop)));

if (false) { var repeat, classify, classifyRE, hasConsole; }

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (false) {}
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (false) {}
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (false
  ) {}
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     false && 0;
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (false
  ) {}
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     false && 0;
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (false) {}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       false && 0;

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
     false && 0;
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (false) {}
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "production" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (false) {}
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (false) {}
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (false) {}
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (false) {}

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (false) {}
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    false
  ) {}
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (false) {}
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (false) {}
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

if (false) { var perf; }

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (false) { var getHandler, hasHandler, isBuiltInModifier, hasProxy, warnReservedPrefix, warnNonPresent, allowedGlobals; }

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
       false && 0;
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (false) { var keyInLowerCase; }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (false) {} else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (false) {}
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (false) {}
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
       false && 0;
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       false && 0;
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (false) {}
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = vue_esm_toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (false) {}
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (false) {}
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
     false && 0;
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (false
  ) {}
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (false) {}
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (false) {} else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (false) {} else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (false) {}
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
       false && 0;
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                 false
                  ? (0)
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (false) { var lowerCaseEvent; }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (false) {}
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (false) {} else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (false) {}

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (false) {}
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (false) {}
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var vue_esm_performance = window.performance;
  if (
    vue_esm_performance &&
    typeof vue_esm_performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return vue_esm_performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (false) {}
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (false) {}
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  false
    ? 0
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
       false && 0;
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (false) { var hyphenatedKey; } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
     false && 0;
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (false) {}
    if (props && hasOwn(props, key)) {
       false && 0;
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (false) {}

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (false) {}
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (false) {}
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (false) {}
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (false) {}
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (false) {}

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (false) {} else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (false) {}

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (false
  ) {}
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (false) {}

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (false) {}
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (false) {}
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.12';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
       false && 0;
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}


var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (false) {}

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (false) {}
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (false) {}
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    if (false) {}

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (false) {}
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    if (false) {}
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (false
              ) {}
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (false
              ) {}
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (false) {}
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    false
  ) {}

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if (false) {}

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (false) {}

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  if (false) { var binding, typeBinding, value$1; }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecessary `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (false) {}

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (false) {}

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
     false && 0;
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (false) {}

    var mode = this.mode;

    // warn invalid mode
    if (false
    ) {}

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (false) { var name, opts; }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (
        false
      ) {}
    }
    if (false
    ) {}
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (false) { var res; }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    if (false) { var res; }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being passed as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (false) {}
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (false) {}
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (false
        ) {}
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:|^#/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        if (false) {}
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else if (false) {}
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      if (false) {}

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
         false && 0;
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        if (false) {}
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (false) {}
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        if (false) {}
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (false) {}
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anything as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (false) {}
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    if (false) { var parent, iterator; }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else if (false) {}
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (false) {}
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (false) {}
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (false) {}
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (false) {}
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        if (false) {}
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        if (false) {}
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else if (false) {}
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (false) {}
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          false
        ) {}
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (false) {}
      }
    } else {
      // literal attribute
      if (false) { var res; }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      false
    ) {}
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function vue_esm_text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: vue_esm_text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + "($event)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ")($event)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (false) {}
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
       false && 0;
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (false
  ) {}

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (false) {}
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (name === 'v-slot' || name[0] === '#') {
            checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stripped = exp.replace(stripStringRE, '');
  var keywordMatch = stripped.match(unaryOperatorsRE);
  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

function checkFunctionParameterExpression (exp, text, warn, range) {
  try {
    new Function(exp, '');
  } catch (e) {
    warn(
      "invalid function parameter expression: " + (e.message) + " in\n\n" +
      "    " + exp + "\n\n" +
      "  Raw expression: " + (text.trim()) + "\n",
      range
    );
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    if (false) {}

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    if (false) {}

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    if (false) {}

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (false) { var leadingSpaceLength; }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      if (false) {}
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
     false && 0;
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (false) {}
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if (false) {}
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (false) {}

      var ref = compileToFunctions(template, {
        outputSourceRange: "production" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (false) {}
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

/* harmony default export */ var vue_esm = (Vue);

// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/index.vue?vue&type=template&id=a83bd3b0&scoped=true&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "bk-charts-panel-container" }, [
    _c("div", { staticClass: "panel-header" }, [
      _c(
        "div",
        { staticClass: "panel-tabs" },
        [
          _vm._l(_vm.activeHeaderTabs, function(item, index) {
            return [
              _c(
                "span",
                {
                  key: item.id,
                  class: [
                    "tab-item",
                    (_vm.activeIndex === index && "active") || ""
                  ],
                  on: {
                    click: function($event) {
                      return _vm.handleItemClick(item, index)
                    }
                  }
                },
                [_c("i", { class: ["bkcp-icon", "bkcp-" + item.icon] })]
              )
            ]
          })
        ],
        2
      ),
      _vm._v(" "),
      _c("div", { staticClass: "panel-command" }, [
        _vm._v(_vm._s(_vm.message))
      ]),
      _vm._v(" "),
      _c(
        "div",
        { staticClass: "panle-plugin" },
        [
          _vm._l(_vm.localPlugins, function(plugin) {
            return [
              _c(
                "span",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.plugins[plugin] && _vm.plugins[plugin].enabled,
                      expression: "plugins[plugin] && plugins[plugin].enabled"
                    }
                  ],
                  key: plugin,
                  staticClass: "plugin-item",
                  attrs: { "data-plugins": plugin },
                  on: {
                    click: function(e) {
                      return _vm.handlePluginClick(e, plugin)
                    }
                  }
                },
                [_c("i", { class: ["bkcp-icon", "bkcp-" + plugin] })]
              )
            ]
          })
        ],
        2
      )
    ]),
    _vm._v(" "),
    _c(
      "div",
      { staticClass: "panel-content" },
      [
        _c(
          _vm.activeComp,
          _vm._b({ tag: "component" }, "component", _vm.activeCompBind, false)
        )
      ],
      1
    )
  ])
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./src/views/index.vue?vue&type=template&id=a83bd3b0&scoped=true&

// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/table.vue?vue&type=template&id=657d4b24&scoped=true&
var tablevue_type_template_id_657d4b24_scoped_true_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "search-result-table",
      style: { background: "url(signature.png) repeat" }
    },
    [
      _c(
        "bk-table",
        {
          staticClass: "bk-table-transparent query-table",
          attrs: { data: _vm.tableData.list }
        },
        [
          _vm.showIndex
            ? [
                _c("bk-table-column", {
                  attrs: {
                    type: "index",
                    label: "序号",
                    align: "center",
                    width: "45"
                  }
                }),
                _vm._v(" "),
                _vm._l(_vm.tableData.columns, function(item, index) {
                  return [
                    _c("bk-table-column", {
                      key: index,
                      attrs: { label: item, prop: item },
                      scopedSlots: _vm._u(
                        [
                          {
                            key: "default",
                            fn: function(ref) {
                              var row = ref.row
                              return _c("cell-click", {
                                attrs: { content: row[item] }
                              })
                            }
                          }
                        ],
                        null,
                        true
                      )
                    })
                  ]
                })
              ]
            : _vm._e(),
          _vm._v(" "),
          _c(
            "div",
            {
              class: [
                "search-result-append",
                (_vm.tableData.info && "active") || "deactive"
              ],
              attrs: { slot: "append" },
              slot: "append"
            },
            [
              _vm._v(
                "\n            " + _vm._s(_vm.tableData.info) + "\n        "
              )
            ]
          )
        ],
        2
      )
    ],
    1
  )
}
var tablevue_type_template_id_657d4b24_scoped_true_staticRenderFns = []
tablevue_type_template_id_657d4b24_scoped_true_render._withStripped = true


// CONCATENATED MODULE: ./src/views/table.vue?vue&type=template&id=657d4b24&scoped=true&

// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/cellClick/cellClick.vue?vue&type=template&id=2ca63313&
var cellClickvue_type_template_id_2ca63313_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "table-cell",
      on: {
        dblclick: function($event) {
          $event.stopPropagation()
          return _vm.dblclickHandle($event)
        },
        click: _vm.clickHandle
      }
    },
    [
      _vm.html
        ? [_c("span", { domProps: { innerHTML: _vm._s(_vm.content) } })]
        : [_vm._v(_vm._s(_vm.content))]
    ],
    2
  )
}
var cellClickvue_type_template_id_2ca63313_staticRenderFns = []
cellClickvue_type_template_id_2ca63313_render._withStripped = true


// CONCATENATED MODULE: ./src/views/cellClick/cellClick.vue?vue&type=template&id=2ca63313&

// CONCATENATED MODULE: ./src/views/events.js
const events_on = function () {
  if (document.addEventListener) {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.addEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent('on' + event, handler);
      }
    };
  }
}();
const off = function () {
  if (document.removeEventListener) {
    return function (element, event, handler) {
      if (element && event) {
        element.removeEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent('on' + event, handler);
      }
    };
  }
}();
/* istanbul ignore next */

const events_once = function (el, event, fn) {
  var listener = function () {
    if (fn) {
      fn.apply(this, arguments);
    }

    off(el, event, listener);
  };

  events_on(el, event, listener);
};
// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/cellClick/cellClick.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
;
/* harmony default export */ var cellClickvue_type_script_lang_js_ = ({
  props: {
    content: [String, Number],
    html: {
      type: Boolean,
      default: true
    }
  },

  data() {
    return {
      searchContainer: null,
      isOpen: false
    };
  },

  computed: {
    bindAttribute() {
      return this.html && {
        'v-html': this.content
      } || {
        'v-text': this.content
      };
    }

  },
  methods: {
    clickHandle(event) {
      if (this.isOpen === true) {
        event.stopPropagation();
      }
    },

    dblclickHandle() {
      if (this.isOpen === true) return;
      this.isOpen = true;
      let targetNode = this.$el;
      const targetClassList = targetNode.classList || [];
      let divEl = document.createElement('div');
      divEl.className = 'text-popup';

      if (this.html) {
        divEl.innerHTML = this.content;
      } else {
        divEl.innerText = this.content;
      }

      divEl.contentEditable = 'true';
      let divElStyle = {
        left: targetNode.offsetLeft + 'px',
        top: targetNode.offsetTop + 'px',
        'min-height': targetNode.offsetHeight + 'px'
      };
      targetNode.appendChild(divEl);
      this.$nextTick(() => {
        let selection = window.getSelection();
        let range = document.createRange();
        range.selectNodeContents(divEl);
        selection.removeAllRanges();
        selection.addRange(range);
        const targetRect = targetNode.getBoundingClientRect();
        const popRect = divEl.getBoundingClientRect();
        const popStyle = {};

        if (!this.searchContainer) {
          let containerRect = null;
          let parent = this.$el;

          while (parent !== document.body) {
            if (parent.classList.contains('bk-table-body-wrapper') === true) {
              containerRect = parent.getBoundingClientRect();
              break;
            }

            parent = parent.parentNode;
          }

          this.searchContainer = {
            left: containerRect.left,
            top: containerRect.top,
            right: containerRect.right
          };
        }

        if (popRect.width > this.searchContainer.right - this.searchContainer.left) {
          let popWidth = 0;
          let left = targetNode.offsetLeft;
          let top = 0;
          const targetWidth = targetRect.right - targetRect.left;
          const targetLeftRect = targetRect.left - this.searchContainer.left - 30;
          const targetRight = this.searchContainer.right - targetRect.right + targetWidth;

          if (popRect.width <= targetLeftRect) {
            popWidth = targetLeftRect;
          } else {
            if (targetLeftRect > targetRight) {
              left = targetLeftRect - targetNode.offsetWidth;
              popWidth = targetLeftRect;
            } else {
              popWidth = targetRight;
            }
          }

          Object.assign(popStyle, {
            left: -left + 'px',
            top: targetNode.offsetTop + 'px',
            'min-height': targetNode.offsetHeight + 'px',
            width: popWidth + 'px',
            'white-space': 'normal'
          });
        } else {
          if (popRect.right > this.searchContainer.right) {
            popStyle.left = this.searchContainer.right - popRect.right + 'px';
          }
        }

        Object.assign(divElStyle, popStyle);
        let cssText = '';
        Object.keys(divElStyle).map(key => {
          cssText += key + ':' + divElStyle[key] + ';';
        });
        divEl.style.cssText = cssText;
      });
      events_once(document, 'click', () => {
        // once只执行一次事件, 执行完自动注销
        this.isOpen = false;
        this.$el.removeChild(divEl);
      });
    }

  }
});
// CONCATENATED MODULE: ./src/views/cellClick/cellClick.vue?vue&type=script&lang=js&
; /* harmony default export */ var cellClick_cellClickvue_type_script_lang_js_ = (cellClickvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/cellClick/cellClick.vue?vue&type=style&index=0&lang=less&

// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        )
      }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}

// CONCATENATED MODULE: ./src/views/cellClick/cellClick.vue
;


;


/* normalize component */

var component = normalizeComponent(
  cellClick_cellClickvue_type_script_lang_js_,
  cellClickvue_type_template_id_2ca63313_render,
  cellClickvue_type_template_id_2ca63313_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/views/cellClick/cellClick.vue"
/* harmony default export */ var cellClick = (component.exports);
// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/table/table.vue?vue&type=template&id=44e11ba3&scoped=true&
var tablevue_type_template_id_44e11ba3_scoped_true_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "bk-table",
      class: [
        {
          "bk-table-fit": _vm.fit,
          "bk-table-striped": _vm.stripe,
          "bk-table-border": _vm.tableBorder || _vm.isGroup,
          "bk-table-outer-border": _vm.outerBorder,
          "bk-table-linear": !(
            _vm.tableBorder ||
            _vm.outerBorder ||
            _vm.isGroup
          ),
          "bk-table-row-border": _vm.tableRowBorder,
          "bk-table-col-border": _vm.tableColBorder,
          "bk-table-hidden": _vm.isHidden,
          "bk-table-group": _vm.isGroup,
          "bk-table-fluid-height": _vm.maxHeight,
          "bk-table-scrollable-x": _vm.layout.scrollX,
          "bk-table-scrollable-y": _vm.layout.scrollY,
          "bk-table-enable-row-transition":
            (_vm.store.states.data || []).length !== 0 &&
            (_vm.store.states.data || []).length < 100
        },
        _vm.tableSize ? "bk-table-" + _vm.tableSize : "",
        _vm.extCls
      ],
      on: {
        mouseleave: function($event) {
          return _vm.handleMouseLeave($event)
        }
      }
    },
    [
      _c(
        "div",
        { ref: "hiddenColumns", staticClass: "hidden-columns" },
        [_vm._t("default")],
        2
      ),
      _vm._v(" "),
      _vm.showHeader
        ? _c(
            "div",
            { ref: "headerWrapper", staticClass: "bk-table-header-wrapper" },
            [
              _c(
                "table-header",
                {
                  ref: "tableHeader",
                  style: {
                    width: _vm.layout.bodyWidth
                      ? _vm.layout.bodyWidth + "px"
                      : ""
                  },
                  attrs: {
                    store: _vm.store,
                    border: _vm.headerBorder,
                    "default-sort": _vm.defaultSort
                  }
                },
                [_c("template", { slot: "prepend" }, [_vm._t("prepend")], 2)],
                2
              )
            ],
            1
          )
        : _vm._e(),
      _vm._v(" "),
      _c(
        "div",
        {
          ref: "bodyWrapper",
          staticClass: "bk-table-body-wrapper",
          class: [
            _vm.layout.scrollX
              ? "is-scrolling-" + _vm.scrollPosition
              : "is-scrolling-none"
          ],
          style: [_vm.bodyHeight]
        },
        [
          _c("table-body", {
            style: {
              width: _vm.bodyWidth
            },
            attrs: {
              context: _vm.context,
              store: _vm.store,
              stripe: _vm.stripe,
              "row-class-name": _vm.rowClassName,
              "row-style": _vm.rowStyle,
              highlight: _vm.highlightCurrentRow
            }
          }),
          _vm._v(" "),
          !_vm.data ||
          _vm.data.length === 0 ||
          _vm.store.states.data.length === 0
            ? _c(
                "div",
                {
                  ref: "emptyBlock",
                  class: ["bk-table-empty-block", _vm.emptyBlockClassName],
                  style: {
                    width: _vm.bodyWidth
                  }
                },
                [
                  _c(
                    "span",
                    { staticClass: "bk-table-empty-text" },
                    [
                      _vm._t("empty", [
                        _c("i", {
                          staticClass:
                            "bk-table-empty-icon bkcp-icon bkcp-empty"
                        }),
                        _vm._v(" "),
                        _c("div", [_vm._v(_vm._s(_vm.emptyText))])
                      ])
                    ],
                    2
                  )
                ]
              )
            : _vm._e(),
          _vm._v(" "),
          _vm.$slots.append
            ? _c(
                "div",
                {
                  ref: "appendWrapper",
                  staticClass: "bk-table-append-wrapper"
                },
                [_vm._t("append")],
                2
              )
            : _vm._e()
        ],
        1
      ),
      _vm._v(" "),
      _vm.showSummary
        ? _c(
            "div",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.data && _vm.data.length > 0,
                  expression: "data && data.length > 0"
                }
              ],
              ref: "footerWrapper",
              staticClass: "bk-table-footer-wrapper"
            },
            [
              _c("table-footer", {
                style: {
                  width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + "px" : ""
                },
                attrs: {
                  store: _vm.store,
                  border: _vm.tableBorder,
                  "sum-text": _vm.sumText || _vm.t("bk.table.sumText"),
                  "summary-method": _vm.summaryMethod,
                  "default-sort": _vm.defaultSort
                }
              })
            ],
            1
          )
        : _vm._e(),
      _vm._v(" "),
      _vm.fixedColumns.length > 0
        ? _c(
            "div",
            {
              ref: "fixedWrapper",
              staticClass: "bk-table-fixed",
              style: [
                {
                  width: _vm.layout.fixedWidth
                    ? _vm.layout.fixedWidth + "px"
                    : ""
                },
                _vm.fixedHeight
              ]
            },
            [
              _vm.showHeader
                ? _c(
                    "div",
                    {
                      ref: "fixedHeaderWrapper",
                      staticClass: "bk-table-fixed-header-wrapper"
                    },
                    [
                      _c(
                        "table-header",
                        {
                          ref: "fixedTableHeader",
                          style: {
                            width: _vm.bodyWidth
                          },
                          attrs: {
                            fixed: "left",
                            border: _vm.headerBorder,
                            store: _vm.store
                          }
                        },
                        [
                          _c(
                            "template",
                            { slot: "prepend" },
                            [_vm._t("prepend")],
                            2
                          )
                        ],
                        2
                      )
                    ],
                    1
                  )
                : _vm._e(),
              _vm._v(" "),
              _c(
                "div",
                {
                  ref: "fixedBodyWrapper",
                  staticClass: "bk-table-fixed-body-wrapper",
                  style: [
                    {
                      top: _vm.layout.headerHeight + "px"
                    },
                    _vm.fixedBodyHeight
                  ]
                },
                [
                  _c("table-body", {
                    style: {
                      width: _vm.bodyWidth
                    },
                    attrs: {
                      fixed: "left",
                      store: _vm.store,
                      stripe: _vm.stripe,
                      highlight: _vm.highlightCurrentRow,
                      "row-class-name": _vm.rowClassName,
                      "row-style": _vm.rowStyle
                    }
                  }),
                  _vm._v(" "),
                  _vm.$slots.append
                    ? _c("div", {
                        staticClass: "bk-table-append-gutter",
                        style: {
                          height: _vm.layout.appendHeight + "px"
                        }
                      })
                    : _vm._e()
                ],
                1
              ),
              _vm._v(" "),
              _vm.showSummary
                ? _c(
                    "div",
                    {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: _vm.data && _vm.data.length > 0,
                          expression: "data && data.length > 0"
                        }
                      ],
                      ref: "fixedFooterWrapper",
                      staticClass: "bk-table-fixed-footer-wrapper"
                    },
                    [
                      _c("table-footer", {
                        style: {
                          width: _vm.bodyWidth
                        },
                        attrs: {
                          fixed: "left",
                          border: _vm.tableBorder,
                          "sum-text": _vm.sumText || _vm.t("bk.table.sumText"),
                          "summary-method": _vm.summaryMethod,
                          store: _vm.store
                        }
                      })
                    ],
                    1
                  )
                : _vm._e()
            ]
          )
        : _vm._e(),
      _vm._v(" "),
      _vm.rightFixedColumns.length > 0
        ? _c(
            "div",
            {
              ref: "rightFixedWrapper",
              staticClass: "bk-table-fixed-right",
              style: [
                {
                  width: _vm.layout.rightFixedWidth
                    ? _vm.layout.rightFixedWidth + "px"
                    : "",
                  right: _vm.layout.scrollY
                    ? (_vm.tableBorder
                        ? _vm.layout.gutterWidth
                        : _vm.layout.gutterWidth || 0) + "px"
                    : ""
                },
                _vm.rightFixedHeight
              ]
            },
            [
              _vm.showHeader
                ? _c(
                    "div",
                    {
                      ref: "rightFixedHeaderWrapper",
                      staticClass: "bk-table-fixed-header-wrapper"
                    },
                    [
                      _c("table-header", {
                        ref: "rightFixedTableHeader",
                        style: {
                          width: _vm.bodyWidth
                        },
                        attrs: {
                          fixed: "right",
                          border: _vm.headerBorder,
                          store: _vm.store
                        }
                      })
                    ],
                    1
                  )
                : _vm._e(),
              _vm._v(" "),
              _vm.notOnlySetting
                ? _c(
                    "div",
                    {
                      ref: "rightFixedBodyWrapper",
                      staticClass: "bk-table-fixed-body-wrapper",
                      style: [
                        {
                          top: _vm.layout.headerHeight + "px"
                        },
                        _vm.fixedBodyHeight
                      ]
                    },
                    [
                      _c("table-body", {
                        style: {
                          width: _vm.bodyWidth
                        },
                        attrs: {
                          fixed: "right",
                          store: _vm.store,
                          stripe: _vm.stripe,
                          "row-class-name": _vm.rowClassName,
                          "row-style": _vm.rowStyle,
                          highlight: _vm.highlightCurrentRow
                        }
                      })
                    ],
                    1
                  )
                : _vm._e(),
              _vm._v(" "),
              _vm.showSummary
                ? _c(
                    "div",
                    {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: _vm.data && _vm.data.length > 0,
                          expression: "data && data.length > 0"
                        }
                      ],
                      ref: "rightFixedFooterWrapper",
                      staticClass: "bk-table-fixed-footer-wrapper"
                    },
                    [
                      _c("table-footer", {
                        style: {
                          width: _vm.bodyWidth
                        },
                        attrs: {
                          fixed: "right",
                          border: _vm.tableBorder,
                          "sum-text": _vm.sumText || _vm.t("bk.table.sumText"),
                          "summary-method": _vm.summaryMethod,
                          store: _vm.store
                        }
                      })
                    ],
                    1
                  )
                : _vm._e()
            ]
          )
        : _vm._e(),
      _vm._v(" "),
      _vm.rightFixedColumns.length > 0
        ? _c("div", {
            ref: "rightFixedPatch",
            staticClass: "bk-table-fixed-right-patch",
            style: {
              width: _vm.layout.scrollY ? _vm.layout.gutterWidth + "px" : "0",
              height: _vm.layout.headerHeight + "px"
            }
          })
        : _vm._e(),
      _vm._v(" "),
      _c("div", {
        directives: [
          {
            name: "show",
            rawName: "v-show",
            value: _vm.resizeProxyVisible,
            expression: "resizeProxyVisible"
          }
        ],
        ref: "resizeProxy",
        staticClass: "bk-table-column-resize-proxy"
      })
    ]
  )
}
var tablevue_type_template_id_44e11ba3_scoped_true_staticRenderFns = []
tablevue_type_template_id_44e11ba3_scoped_true_render._withStripped = true


// CONCATENATED MODULE: ./src/views/table/table.vue?vue&type=template&id=44e11ba3&scoped=true&

// CONCATENATED MODULE: ../../node_modules/throttle-debounce/esm/index.js
/* eslint-disable no-undefined,no-param-reassign,no-shadow */

/**
 * Throttle execution of a function. Especially useful for rate limiting
 * execution of handlers on events like resize and scroll.
 *
 * @param  {number}    delay -          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
 * @param  {boolean}   [noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the
 *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time
 *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,
 *                                    the internal counter is reset).
 * @param  {Function}  callback -       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
 *                                    to `callback` when the throttled-function is executed.
 * @param  {boolean}   [debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),
 *                                    schedule `callback` to execute after `delay` ms.
 *
 * @returns {Function}  A new, throttled, function.
 */
function throttle (delay, noTrailing, callback, debounceMode) {
  /*
   * After wrapper has stopped being called, this timeout ensures that
   * `callback` is executed at the proper times in `throttle` and `end`
   * debounce modes.
   */
  var timeoutID;
  var cancelled = false; // Keep track of the last time `callback` was executed.

  var lastExec = 0; // Function to clear existing timeout

  function clearExistingTimeout() {
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
  } // Function to cancel next exec


  function cancel() {
    clearExistingTimeout();
    cancelled = true;
  } // `noTrailing` defaults to falsy.


  if (typeof noTrailing !== 'boolean') {
    debounceMode = callback;
    callback = noTrailing;
    noTrailing = undefined;
  }
  /*
   * The `wrapper` function encapsulates all of the throttling / debouncing
   * functionality and when executed will limit the rate at which `callback`
   * is executed.
   */


  function wrapper() {
    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
      arguments_[_key] = arguments[_key];
    }

    var self = this;
    var elapsed = Date.now() - lastExec;

    if (cancelled) {
      return;
    } // Execute `callback` and update the `lastExec` timestamp.


    function exec() {
      lastExec = Date.now();
      callback.apply(self, arguments_);
    }
    /*
     * If `debounceMode` is true (at begin) this is used to clear the flag
     * to allow future `callback` executions.
     */


    function clear() {
      timeoutID = undefined;
    }

    if (debounceMode && !timeoutID) {
      /*
       * Since `wrapper` is being called for the first time and
       * `debounceMode` is true (at begin), execute `callback`.
       */
      exec();
    }

    clearExistingTimeout();

    if (debounceMode === undefined && elapsed > delay) {
      /*
       * In throttle mode, if `delay` time has been exceeded, execute
       * `callback`.
       */
      exec();
    } else if (noTrailing !== true) {
      /*
       * In trailing throttle mode, since `delay` time has not been
       * exceeded, schedule `callback` to execute `delay` ms after most
       * recent execution.
       *
       * If `debounceMode` is true (at begin), schedule `clear` to execute
       * after `delay` ms.
       *
       * If `debounceMode` is false (at end), schedule `callback` to
       * execute after `delay` ms.
       */
      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
    }
  }

  wrapper.cancel = cancel; // Return the wrapper function.

  return wrapper;
}

/* eslint-disable no-undefined */
/**
 * Debounce execution of a function. Debouncing, unlike throttling,
 * guarantees that a function is only executed a single time, either at the
 * very beginning of a series of calls, or at the very end.
 *
 * @param  {number}   delay -         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
 * @param  {boolean}  [atBegin] -     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds
 *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.
 *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).
 * @param  {Function} callback -      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
 *                                  to `callback` when the debounced-function is executed.
 *
 * @returns {Function} A new, debounced function.
 */

function debounce (delay, atBegin, callback) {
  return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);
}


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ./src/views/table/resize-events.js
/**
 * @file resize-events
 * https://github.com/sdecima/javascript-detect-element-resize
 */
const requestFrame = function () {
  const raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {
    return window.setTimeout(fn, 20);
  };

  return function (fn) {
    return raf(fn);
  };
}();

const cancelFrame = function () {
  const cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;
  return function (id) {
    return cancel(id);
  };
}();

const resetTrigger = function (element) {
  const trigger = element.__resizeTrigger__;
  const expand = trigger.firstElementChild;
  const contract = trigger.lastElementChild;
  const expandChild = expand.firstElementChild;
  contract.scrollLeft = contract.scrollWidth;
  contract.scrollTop = contract.scrollHeight;
  expandChild.style.width = expand.offsetWidth + 1 + 'px';
  expandChild.style.height = expand.offsetHeight + 1 + 'px';
  expand.scrollLeft = expand.scrollWidth;
  expand.scrollTop = expand.scrollHeight;
};

const checkTriggers = function (element) {
  return element.offsetWidth !== element.__resizeLast__.width || element.offsetHeight !== element.__resizeLast__.height;
};

const scrollListener = function (event) {
  resetTrigger(this);
  if (this.__resizeRAF__) cancelFrame(this.__resizeRAF__);
  this.__resizeRAF__ = requestFrame(() => {
    if (checkTriggers(this)) {
      this.__resizeLast__.width = this.offsetWidth;
      this.__resizeLast__.height = this.offsetHeight;

      this.__resizeListeners__.forEach(fn => {
        fn.call(this, event);
      });
    }
  });
};
/* Detect CSS Animations support to detect element display/re-attach */


const attachEvent = document.attachEvent;
const DOM_PREFIXES = 'Webkit Moz O ms'.split(' ');
const START_EVENTS = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' ');
const RESIZE_ANIMATION_NAME = 'resizeanim';
let animation = false;
let keyFramePrefix = '';
let animationStartEvent = 'animationstart';

if (!attachEvent) {
  const testElement = document.createElement('fakeelement');

  if (testElement.style.animationName !== undefined) {
    animation = true;
  }

  if (animation === false) {
    let prefix = '';

    for (let i = 0; i < DOM_PREFIXES.length; i++) {
      if (testElement.style[DOM_PREFIXES[i] + 'AnimationName'] !== undefined) {
        prefix = DOM_PREFIXES[i];
        keyFramePrefix = '-' + prefix.toLowerCase() + '-';
        animationStartEvent = START_EVENTS[i];
        animation = true;
        break;
      }
    }
  }
}

let stylesCreated = false;
/* istanbul ignore next */

const createStyles = function () {
  if (!stylesCreated) {
    const animationKeyframes = `@${keyFramePrefix}keyframes ${RESIZE_ANIMATION_NAME} { from { opacity: 0; } to { opacity: 0; } } `;
    const animationStyle = `${keyFramePrefix}animation: 1ms ${RESIZE_ANIMATION_NAME};`; // opacity: 0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360

    const css = `${animationKeyframes}
      .resize-triggers { ${animationStyle} visibility: hidden; opacity: 0; }
      .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1 }
      .resize-triggers > div { background: #eee; overflow: auto; }
      .contract-trigger:before { width: 200%; height: 200%; }`;
    const head = document.head || document.getElementsByTagName('head')[0];
    const style = document.createElement('style');
    style.type = 'text/css';

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }

    head.appendChild(style);
    stylesCreated = true;
  }
};

const addResizeListener = function (element, fn) {
  if (attachEvent) {
    element.attachEvent('onresize', fn);
  } else {
    if (!element.__resizeTrigger__) {
      if (getComputedStyle(element).position === 'static') {
        element.style.position = 'relative';
      }

      createStyles();
      element.__resizeLast__ = {};
      element.__resizeListeners__ = [];
      const resizeTrigger = element.__resizeTrigger__ = document.createElement('div');
      resizeTrigger.className = 'resize-triggers';
      resizeTrigger.innerHTML = '<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>';
      element.appendChild(resizeTrigger);
      resetTrigger(element);
      element.addEventListener('scroll', scrollListener, true);
      /* Listen for a css animation to detect element display/re-attach */

      if (animationStartEvent) {
        resizeTrigger.addEventListener(animationStartEvent, function (event) {
          if (event.animationName === RESIZE_ANIMATION_NAME) {
            resetTrigger(element);
          }
        });
      }
    }

    element.__resizeListeners__.push(fn);
  }
};
const removeResizeListener = function (element, fn) {
  if (!element || !element.__resizeListeners__) return;

  if (attachEvent) {
    element.detachEvent('onresize', fn);
  } else {
    element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);

    if (!element.__resizeListeners__.length) {
      element.removeEventListener('scroll', scrollListener);
      element.__resizeTrigger__ = !element.removeChild(element.__resizeTrigger__);
    }
  }
};
/* harmony default export */ var resize_events = ({
  addResizeListener,
  removeResizeListener
});
// CONCATENATED MODULE: ./src/views/table/util.js
const getValueByPath = function (object, prop) {
  prop = prop || '';
  const paths = prop.split('.');
  let current = object;
  let result = null;

  for (let i = 0, j = paths.length; i < j; i++) {
    const path = paths[i];
    if (!current) break;

    if (i === j - 1) {
      result = current[path];
      break;
    }

    current = current[path];
  }

  return result;
};
function getPropByPath(obj, path, strict) {
  let tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, '.$1');
  path = path.replace(/^\./, '');
  const keyArr = path.split('.');
  let i = 0;

  for (let len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict) break;
    const key = keyArr[i];

    if (key in tempObj) {
      tempObj = tempObj[key];
    } else {
      if (strict) {
        throw new Error('please transfer a valid prop path to form item!');
      }

      break;
    }
  }

  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}
const getCell = function (event) {
  let cell = event.target;

  while (cell && cell.tagName.toUpperCase() !== 'HTML') {
    if (cell.tagName.toUpperCase() === 'TD') {
      return cell;
    }

    cell = cell.parentNode;
  }

  return null;
};

const util_isObject = function (obj) {
  return obj !== null && typeof obj === 'object';
};

const orderBy = function (array, sortKey, reverse, sortMethod, sortBy) {
  if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {
    return array;
  }

  if (typeof reverse === 'string') {
    reverse = reverse === 'descending' ? -1 : 1;
  } else {
    reverse = reverse && reverse < 0 ? -1 : 1;
  }

  const getKey = sortMethod ? null : function (value, index) {
    if (sortBy) {
      if (!Array.isArray(sortBy)) {
        sortBy = [sortBy];
      }

      return sortBy.map(function (by) {
        if (typeof by === 'string') {
          return getValueByPath(value, by);
        } else {
          return by(value, index, array);
        }
      });
    }

    if (sortKey !== '$key') {
      if (util_isObject(value) && '$value' in value) value = value.$value;
    }

    return [util_isObject(value) ? getValueByPath(value, sortKey) : value];
  };

  const compare = function (a, b) {
    if (sortMethod) {
      return sortMethod(a.value, b.value);
    }

    for (let i = 0, len = a.key.length; i < len; i++) {
      if (a.key[i] < b.key[i]) {
        return -1;
      }

      if (a.key[i] > b.key[i]) {
        return 1;
      }
    }

    return 0;
  };

  return array.map(function (value, index) {
    return {
      value: value,
      index: index,
      key: getKey ? getKey(value, index) : null
    };
  }).sort(function (a, b) {
    let order = compare(a, b);

    if (!order) {
      // make stable https://en.wikipedia.org/wiki/Sorting_algorithm#Stability
      order = a.index - b.index;
    }

    return order * reverse;
  }).map(item => item.value);
};
const getColumnById = function (table, columnId) {
  let column = null;
  table.columns.forEach(function (item) {
    if (item.id === columnId) {
      column = item;
    }
  });
  return column;
};
const getColumnByCell = function (table, cell) {
  const matches = (cell.className || '').match(/bk-table-[^\s]+/gm);

  if (matches) {
    return getColumnById(table, matches[0]);
  }

  return null;
};
const getRowIdentity = (row, rowKey) => {
  if (!row) throw new Error('row is required when get row identity');

  if (typeof rowKey === 'string') {
    if (rowKey.indexOf('.') < 0) {
      return row[rowKey];
    }

    const key = rowKey.split('.');
    let current = row;

    for (let i = 0; i < key.length; i++) {
      current = current[key[i]];
    }

    return current;
  } else if (typeof rowKey === 'function') {
    return rowKey(row);
  }
};
/**
 * 函数防抖
 *
 * @param {Function} func 要执行的函数
 * @param {number} wait 等待时间
 * @param {boolean} immediate 是否立即执行
 *
 * @return {Function} 防抖后的方法
 */

function util_debounce(func, wait, immediate) {
  let timeout;
  let result;

  const debounced = function () {
    const context = this;
    const args = arguments;

    if (timeout) {
      clearTimeout(timeout);
    }

    if (immediate) {
      // 如果已经执行过，不再执行
      const callNow = !timeout;
      timeout = setTimeout(() => {
        timeout = null;
      }, wait);

      if (callNow) {
        result = func.apply(context, args);
      }
    } else {
      timeout = setTimeout(() => {
        func.apply(context, args);
      }, wait);
    }

    return result;
  };

  debounced.cancel = () => {
    clearTimeout(timeout);
    timeout = null;
  };

  return debounced;
}

let _scrollBarWidth;

function scrollbarWidth() {
  if (_scrollBarWidth !== undefined) return _scrollBarWidth;
  const outer = document.createElement('div');
  outer.className = 'bk-scrollbar-wrap';
  outer.style.visibility = 'hidden';
  outer.style.width = '100px';
  outer.style.position = 'absolute';
  outer.style.top = '-9999px';
  document.body.appendChild(outer);
  const widthNoScroll = outer.offsetWidth;
  outer.style.overflow = 'scroll';
  const inner = document.createElement('div');
  inner.style.width = '100%';
  outer.appendChild(inner);
  const widthWithScroll = inner.offsetWidth;
  outer.parentNode.removeChild(outer);
  _scrollBarWidth = widthNoScroll - widthWithScroll;
  return _scrollBarWidth;
}
// CONCATENATED MODULE: ./src/views/table/is-mergeable-object.js
/**
 * @file is-mergeable-object
 * https://github.com/TehShrike/is-mergeable-object
 */
// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
const canUseSymbol = typeof Symbol === 'function' && Symbol.for;
const REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}

function isNonNullObject(value) {
  return !!value && typeof value === 'object';
}

function isSpecial(value) {
  const stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
}

/* harmony default export */ function is_mergeable_object(value) {
  return isNonNullObject(value) && !isSpecial(value);
}
// CONCATENATED MODULE: ./src/views/table/deepmerge.js
/**
 * @file deepmerge
 * https://github.com/KyleAMathews/deepmerge
 */
;

function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}

function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}

function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}

function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepmerge;
  }

  const customMerge = options.customMerge(key);
  return typeof customMerge === 'function' ? customMerge : deepmerge;
}

function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
    return target.propertyIsEnumerable(symbol);
  }) : [];
}

function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}

function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
} // Protects from prototype poisoning and unexpected merging up the prototype chain.


function propertyIsUnsafe(target, key) {
  return propertyIsOnObject(target, key) && // Properties are safe to merge if they don't exist in the target yet,
  !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
  const destination = {};

  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }

  getKeys(source).forEach(function (key) {
    if (propertyIsUnsafe(target, key)) {
      return;
    }

    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    }
  });
  return destination;
}

function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || is_mergeable_object; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
  // implementations can use it. The caller may not replace it.

  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  const sourceIsArray = Array.isArray(source);
  const targetIsArray = Array.isArray(target);
  const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}

deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error('first argument should be an array');
  }

  return array.reduce(function (prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};

/* harmony default export */ var table_deepmerge = (deepmerge);

/**
 * 判断是否是虚拟 node
 *
 * @param {Object} node 待判断节点
 *
 * @return {boolean} 判断结果
 */
function isVNode(node) {
  return node && typeof node === 'object' && node.hasOwnProperty('componentOptions');
}
/**
 * 绑定事件
 *
 * @param {Object} elem DOM 元素
 * @param {string} type 事件名称
 * @param {Function} handler 事件处理函数
 */

function addEvent(elem, type, handler) {
  if (!elem) {
    return;
  }

  if (elem.addEventListener) {
    elem.addEventListener(type, handler, false);
  } else if (elem.attachEvent) {
    elem.attachEvent('on' + type, handler);
  } else {
    elem['on' + type] = handler;
  }
}
/**
 * 移除事件
 *
 * @param {Object} elem DOM 元素
 * @param {string} type 事件名称
 * @param {Function} handler 事件处理函数
 */

function removeEvent(elem, type, handler) {
  if (!elem) {
    return;
  }

  if (elem.removeEventListener) {
    elem.removeEventListener(type, handler, false);
  } else if (elem.detachEvent) {
    elem.detachEvent('on' + type, handler);
  } else {
    elem['on' + type] = null;
  }
}
let cachedScrollBarSize;
/**
 * 获取滚动条的宽度
 *
 * @param {boolean} fromCache 是否从缓存中获取数据
 *
 * @return {number} 滚动条宽度
 */

function getScrollBarWidth(fromCache) {
  if (fromCache && cachedScrollBarSize !== undefined) {
    return cachedScrollBarSize;
  }

  const inner = document.createElement('div');
  inner.style.width = '100%';
  inner.style.height = '200px';
  const outer = document.createElement('div');
  const outerStyle = outer.style;
  outerStyle.position = 'absolute';
  outerStyle.top = 0;
  outerStyle.left = 0;
  outerStyle.pointerEvents = 'none';
  outerStyle.visibility = 'hidden';
  outerStyle.width = '200px';
  outerStyle.height = '100px';
  outerStyle.overflowY = 'scroll';
  outer.appendChild(inner);
  document.body.appendChild(outer);
  const widthContained = inner.offsetWidth;
  let widthScroll = inner.offsetWidth;

  if (widthContained === widthScroll) {
    widthScroll = outer.clientWidth;
  }

  document.body.removeChild(outer);
  cachedScrollBarSize = widthContained - widthScroll;
  return cachedScrollBarSize;
}
const dom_requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
  window.setTimeout(callback, 1000 / 60);
};
const dom_cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (id) {
  window.clearTimeout(id);
};
/**
 * 寻找子组件
 *
 * @param {Object} context 上下文
 * @param {string} componentName 要找的组件类型名称
 *
 * @return {Array} 组件集合
 */

function findChildComponents(context, componentName) {
  return context.$children.reduce((components, child) => {
    if (child.$options.name === componentName) {
      components.push(child);
    }

    const foundChilds = findChildComponents(child, componentName);
    return components.concat(foundChilds);
  }, []);
}
/**
 * 寻找父组件
 *
 * @param {Object} context 上下文
 * @param {string} componentName 要找的组件类型名称
 *
 * @return {Array} 组件集合
 */

function findParentComponents(context, componentName) {
  const parents = [];
  const parent = context.$parent;

  if (parent) {
    if (parent.$options.name === componentName) {
      parents.push(parent);
    }

    return parents.concat(findParentComponents(parent, componentName));
  }

  return [];
}
const SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
const MOZ_HACK_REGEXP = /^moz([A-Z])/;

const trim = function (string) {
  return (string || '').replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, '');
};

const camelCase = function (name) {
  return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
    return offset ? letter.toUpperCase() : letter;
  }).replace(MOZ_HACK_REGEXP, 'Moz$1');
};
/**
 *  对元素添加样式类
 *
 *  @param {Object} el 指定的 DOM 元素
 *  @param {string} cls 类名
 */


function hasClass(el, cls) {
  if (!el || !cls) return false;
  if (cls.indexOf(' ') !== -1) throw new Error('className should not contain space.');

  if (el.classList) {
    return el.classList.contains(cls);
  } else {
    return (' ' + el.className + ' ').indexOf(' ' + cls + ' ') > -1;
  }
}
/**
 *  对元素添加样式类
 *
 *  @param {Object} el 指定的 DOM 元素
 *  @param {string} cls 类名
 */

function dom_addClass(el, cls) {
  if (!el) return;
  let curClass = el.className;
  const classes = (cls || '').split(' ');

  for (let i = 0, j = classes.length; i < j; i++) {
    const clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.add(clsName);
    } else if (!hasClass(el, clsName)) {
      curClass += ' ' + clsName;
    }
  }

  if (!el.classList) {
    el.className = curClass;
  }
}
/**
 *  对元素删除样式类
 *
 *  @param {Object} el 指定的 DOM 元素
 *  @param {string} cls 类名
 */

function dom_removeClass(el, cls) {
  if (!el || !cls) return;
  const classes = cls.split(' ');
  let curClass = ' ' + el.className + ' ';

  for (let i = 0, j = classes.length; i < j; i++) {
    const clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.remove(clsName);
    } else if (hasClass(el, clsName)) {
      curClass = curClass.replace(' ' + clsName + ' ', ' ');
    }
  }

  if (!el.classList) {
    el.className = trim(curClass);
  }
}
const dom_getStyle = Number(document.documentMode) < 9 ? function (element, styleName) {
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);

  if (styleName === 'float') {
    styleName = 'styleFloat';
  }

  try {
    switch (styleName) {
      case 'opacity':
        try {
          return element.filters.item('alpha').opacity / 100;
        } catch (e) {
          return 1.0;
        }

      default:
        return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
    }
  } catch (e) {
    return element.style[styleName];
  }
} : function (element, styleName) {
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);

  if (styleName === 'float') {
    styleName = 'cssFloat';
  }

  try {
    const computed = document.defaultView.getComputedStyle(element, '');
    return element.style[styleName] || computed ? computed[styleName] : null;
  } catch (e) {
    return element.style[styleName];
  }
}; // scrollTop animation

function scrollTop(el, from = 0, to, duration = 500, endCallback) {
  const difference = Math.abs(from - to);
  const step = Math.ceil(difference / duration * 50);

  function scroll(start, end, step) {
    if (start === end) {
      endCallback && endCallback();
      return;
    }

    let d = start + step > end ? end : start + step;

    if (start > end) {
      d = start - step < end ? end : start - step;
    }

    if (el === window) {
      window.scrollTo(d, d);
    } else {
      el.scrollTop = d;
    }

    window.requestAnimationFrame(() => scroll(d, end, step));
  }

  scroll(from, to, step);
}
const isInContainer = (el, container) => {
  if (!el || !container) return false;
  const elRect = el.getBoundingClientRect();
  let containerRect;

  if ([window, document, document.documentElement, null, undefined].includes(container)) {
    containerRect = {
      top: 0,
      right: window.innerWidth,
      bottom: window.innerHeight,
      left: 0
    };
  } else {
    containerRect = container.getBoundingClientRect();
  }

  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
};
// CONCATENATED MODULE: ./src/views/table/table-store.js
;





const sortData = (data, states) => {
  const sortingColumn = states.sortingColumn;

  if (!sortingColumn || typeof sortingColumn.sortable === 'string') {
    return data;
  }

  return orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);
};

const getKeysMap = (array = [], rowKey) => {
  const arrayMap = {};
  array.forEach((row, index) => {
    arrayMap[getRowIdentity(row, rowKey)] = {
      row,
      index
    };
  });
  return arrayMap;
};

const toggleRowSelection = (states, row, selected) => {
  let changed = false;
  const selection = states.selection;
  const index = selection.indexOf(row);

  if (typeof selected === 'undefined') {
    if (index === -1) {
      selection.push(row);
      changed = true;
    } else {
      selection.splice(index, 1);
      changed = true;
    }
  } else {
    if (selected && index === -1) {
      selection.push(row);
      changed = true;
    } else if (!selected && index > -1) {
      selection.splice(index, 1);
      changed = true;
    }
  }

  return changed;
};

const toggleRowExpansion = (states, row, expanded) => {
  let changed = false;
  const expandRows = states.expandRows;

  if (typeof expanded !== 'undefined') {
    const index = expandRows.indexOf(row);

    if (expanded) {
      if (index === -1) {
        expandRows.push(row);
        changed = true;
      }
    } else {
      if (index !== -1) {
        expandRows.splice(index, 1);
        changed = true;
      }
    }
  } else {
    const index = expandRows.indexOf(row);

    if (index === -1) {
      expandRows.push(row);
      changed = true;
    } else {
      expandRows.splice(index, 1);
      changed = true;
    }
  }

  return changed;
};

const doFlattenColumns = columns => {
  const result = [];
  columns.forEach(column => {
    if (column.children) {
      result.push.apply(result, doFlattenColumns(column.children));
    } else {
      result.push(column);
    }
  });
  return result;
};

class TableStore {
  constructor(table, initialState = {}) {
    if (!table) {
      throw new Error('Table is required.');
    }

    this.table = table;
    this.states = {
      rowKey: null,
      _columns: [],
      originColumns: [],
      columns: [],
      fixedColumns: [],
      rightFixedColumns: [],
      leafColumns: [],
      fixedLeafColumns: [],
      rightFixedLeafColumns: [],
      leafColumnsLength: 0,
      fixedLeafColumnsLength: 0,
      rightFixedLeafColumnsLength: 0,
      isComplex: false,
      filteredData: null,
      data: null,
      sortingColumn: null,
      sortProp: null,
      sortOrder: null,
      isAllSelected: false,
      selection: [],
      reserveSelection: false,
      selectable: null,
      currentRow: null,
      hoverRow: null,
      filters: {},
      expandRows: [],
      defaultExpandAll: false,
      selectOnIndeterminate: false
    };

    for (const prop in initialState) {
      if (initialState.hasOwnProperty(prop) && this.states.hasOwnProperty(prop)) {
        this.states[prop] = initialState[prop];
      }
    }
  }

  get mutations() {
    return {
      setData(states, data) {
        const dataInstanceChanged = states._data !== data;
        states._data = data;
        Object.keys(states.filters).forEach(columnId => {
          const values = states.filters[columnId];
          if (!values || values.length === 0) return;
          const column = getColumnById(this.states, columnId);

          if (column && column.filterMethod) {
            data = data.filter(row => {
              return values.some(value => column.filterMethod.call(null, value, row, column));
            });
          }
        });
        states.filteredData = data;
        states.data = sortData(data || [], states);
        this.updateCurrentRow();
        const rowKey = states.rowKey;

        if (!states.reserveSelection) {
          if (dataInstanceChanged) {
            this.clearSelection();
          } else {
            this.cleanSelection();
          }

          this.updateAllSelected();
        } else {
          if (rowKey) {
            const selection = states.selection;
            const selectedMap = getKeysMap(selection, rowKey);
            states.data.forEach(row => {
              const rowId = getRowIdentity(row, rowKey);
              const rowInfo = selectedMap[rowId];

              if (rowInfo) {
                selection[rowInfo.index] = row;
              }
            });
            this.updateAllSelected();
          } else {
            console.warn('WARN: rowKey is required when reserve-selection is enabled.');
          }
        }

        const defaultExpandAll = states.defaultExpandAll;

        if (defaultExpandAll) {
          this.states.expandRows = (states.data || []).slice(0);
        } else if (rowKey) {
          // update expandRows to new rows according to rowKey
          const ids = getKeysMap(this.states.expandRows, rowKey);
          const expandRows = [];

          for (const row of states.data) {
            const rowId = getRowIdentity(row, rowKey);

            if (ids[rowId]) {
              expandRows.push(row);
            }
          }

          this.states.expandRows = expandRows;
        } else {
          // clear the old rows
          this.states.expandRows = [];
        }

        vue_esm.nextTick(() => this.table.updateScrollY());
      },

      changeSortCondition(states, options) {
        states.data = sortData(states.filteredData || states._data || [], states);
        const {
          $el,
          highlightCurrentRow
        } = this.table;

        if ($el && highlightCurrentRow) {
          const data = states.data;
          const tr = $el.querySelector('tbody').children;
          const rows = [].filter.call(tr, row => hasClass(row, 'bk-table-row'));
          const row = rows[data.indexOf(states.currentRow)];
          Array.prototype.forEach.call(rows, row => dom_removeClass(row, 'current-row'));
          dom_addClass(row, 'current-row');
        }

        if (!options || !options.silent) {
          this.table.$emit('sort-change', {
            column: this.states.sortingColumn,
            prop: this.states.sortProp,
            order: this.states.sortOrder
          });
        }

        vue_esm.nextTick(() => this.table.updateScrollY());
      },

      sort(states, options) {
        const {
          prop,
          order
        } = options;

        if (prop) {
          states.sortProp = prop;
          states.sortOrder = order || 'ascending';
          vue_esm.nextTick(() => {
            for (let i = 0, length = states.columns.length; i < length; i++) {
              const column = states.columns[i];

              if (column.property === states.sortProp) {
                column.order = states.sortOrder;
                states.sortingColumn = column;
                break;
              }
            }

            if (states.sortingColumn) {
              this.commit('changeSortCondition');
            }
          });
        }
      },

      filterChange(states, options) {
        let {
          values
        } = options;
        const {
          column,
          silent
        } = options;

        if (values && !Array.isArray(values)) {
          values = [values];
        }

        const prop = column.property;
        const filters = {};

        if (prop) {
          states.filters[column.id] = values;
          filters[column.columnKey || column.id] = values;
        }

        let data = states._data;
        Object.keys(states.filters).forEach(columnId => {
          const values = states.filters[columnId];
          if (!values || values.length === 0) return;
          const column = getColumnById(this.states, columnId);

          if (column && column.filterMethod) {
            data = data.filter(row => {
              return values.some(value => column.filterMethod.call(null, value, row, column));
            });
          }
        });
        states.filteredData = data;
        states.data = sortData(data, states);

        if (!silent) {
          this.table.$emit('filter-change', filters, states.filters);
        }

        vue_esm.nextTick(() => this.table.updateScrollY());
      },

      insertColumn(states, column, index, parent) {
        let array = states._columns;

        if (parent) {
          array = parent.children;
          if (!array) array = parent.children = [];
        }

        if (typeof index !== 'undefined') {
          array.splice(index, 0, column);
        } else {
          array.push(column);
        }

        if (column.type === 'selection') {
          states.selectable = column.selectable;
          states.reserveSelection = column.reserveSelection;
        }

        if (this.table.$ready) {
          this.updateColumns(); // hack for dynamics insert column

          this.scheduleLayout();
        }
      },

      removeColumn(states, column, parent) {
        let array = states._columns;

        if (parent) {
          array = parent.children;
          if (!array) array = parent.children = [];
        }

        if (array) {
          array.splice(array.indexOf(column), 1);
        }

        if (this.table.$ready) {
          this.updateColumns(); // hack for dynamics remove column

          this.scheduleLayout();
        }
      },

      setHoverRow(states, row) {
        states.hoverRow = row;
      },

      setCurrentRow(states, row) {
        const oldCurrentRow = states.currentRow;
        states.currentRow = row;

        if (oldCurrentRow !== row) {
          this.table.$emit('current-change', row, oldCurrentRow);
        }
      },

      rowSelectedChanged(states, row) {
        const changed = toggleRowSelection(states, row);
        const selection = states.selection;

        if (changed) {
          const table = this.table;
          table.$emit('selection-change', selection ? selection.slice() : []);
          table.$emit('select', selection, row);
        }

        this.updateAllSelected();
      },

      toggleAllSelection: debounce(10, function (states) {
        if (this.isAllSelectionDisabled) return;
        const data = states.data;
        const selection = this.states.selection; // when only some rows are selected (but not all), select or deselect all of them
        // depending on the value of selectOnIndeterminate

        const value = states.selectOnIndeterminate ? !states.isAllSelected : !(states.isAllSelected || selection.length);
        let selectionChanged = false;
        data.forEach((item, index) => {
          if (states.selectable) {
            if (states.selectable.call(null, item, index) && toggleRowSelection(states, item, value)) {
              selectionChanged = true;
            }
          } else {
            if (toggleRowSelection(states, item, value)) {
              selectionChanged = true;
            }
          }
        });
        const table = this.table;

        if (selectionChanged) {
          table.$emit('selection-change', selection ? selection.slice() : []);
        }

        table.$emit('select-all', selection);
        states.isAllSelected = value;
      })
    };
  }

  updateColumns() {
    const states = this.states;

    const _columns = states._columns || [];

    states.fixedColumns = _columns.filter(column => column.fixed === true || column.fixed === 'left');
    states.rightFixedColumns = _columns.filter(column => column.fixed === 'right');

    if (states.fixedColumns.length > 0 && _columns[0] && _columns[0].type === 'selection' && !_columns[0].fixed) {
      _columns[0].fixed = true;
      states.fixedColumns.unshift(_columns[0]);
    }

    const notFixedColumns = _columns.filter(column => !column.fixed);

    states.originColumns = [].concat(states.fixedColumns).concat(notFixedColumns).concat(states.rightFixedColumns);
    const leafColumns = doFlattenColumns(notFixedColumns);
    const fixedLeafColumns = doFlattenColumns(states.fixedColumns);
    const rightFixedLeafColumns = doFlattenColumns(states.rightFixedColumns);
    states.leafColumnsLength = leafColumns.length;
    states.fixedLeafColumnsLength = fixedLeafColumns.length;
    states.rightFixedLeafColumnsLength = rightFixedLeafColumns.length;
    states.columns = [].concat(fixedLeafColumns).concat(leafColumns).concat(rightFixedLeafColumns);
    states.isComplex = states.fixedColumns.length > 0 || states.rightFixedColumns.length > 0;
  }

  isSelected(row) {
    return (this.states.selection || []).indexOf(row) > -1;
  }

  get isAllSelectionDisabled() {
    if (!this.states.selectable) {
      return false;
    }

    const isEmpty = this.states.data && this.states.data.length === 0;
    const isDisabled = this.states.data.every((row, index) => !this.states.selectable(row, index));
    return isEmpty || isDisabled;
  }

  clearSelection() {
    const states = this.states;
    states.isAllSelected = false;
    const oldSelection = states.selection;

    if (states.selection.length) {
      states.selection = [];
    }

    if (oldSelection.length > 0) {
      this.table.$emit('selection-change', states.selection ? states.selection.slice() : []);
    }
  }

  setExpandRowKeys(rowKeys) {
    const expandRows = [];
    const data = this.states.data;
    const rowKey = this.states.rowKey;
    if (!rowKey) throw new Error('[Table] prop row-key should not be empty.');
    const keysMap = getKeysMap(data, rowKey);
    rowKeys.forEach(key => {
      const info = keysMap[key];

      if (info) {
        expandRows.push(info.row);
      }
    });
    this.states.expandRows = expandRows;
  }

  toggleRowSelection(row, selected) {
    const changed = toggleRowSelection(this.states, row, selected);

    if (changed) {
      this.table.$emit('selection-change', this.states.selection ? this.states.selection.slice() : []);
    }
  }

  toggleRowExpansion(row, expanded) {
    const changed = toggleRowExpansion(this.states, row, expanded);

    if (changed) {
      this.table.$emit('expand-change', row, this.states.expandRows);
      this.scheduleLayout();
    }
  }

  isRowExpanded(row) {
    const {
      expandRows = [],
      rowKey
    } = this.states;

    if (rowKey) {
      const expandMap = getKeysMap(expandRows, rowKey);
      return !!expandMap[getRowIdentity(row, rowKey)];
    }

    return expandRows.indexOf(row) !== -1;
  }

  cleanSelection() {
    const selection = this.states.selection || [];
    const data = this.states.data;
    const rowKey = this.states.rowKey;
    let deleted;

    if (rowKey) {
      deleted = [];
      const selectedMap = getKeysMap(selection, rowKey);
      const dataMap = getKeysMap(data, rowKey);

      for (const key in selectedMap) {
        if (selectedMap.hasOwnProperty(key) && !dataMap[key]) {
          deleted.push(selectedMap[key].row);
        }
      }
    } else {
      deleted = selection.filter(item => {
        return data.indexOf(item) === -1;
      });
    }

    deleted.forEach(deletedItem => {
      selection.splice(selection.indexOf(deletedItem), 1);
    });

    if (deleted.length) {
      this.table.$emit('selection-change', selection ? selection.slice() : []);
    }
  }

  clearFilter() {
    const states = this.states;
    const {
      tableHeader,
      fixedTableHeader,
      rightFixedTableHeader
    } = this.table.$refs;
    let panels = {};
    if (tableHeader) panels = table_deepmerge(panels, tableHeader.filterPanels);
    if (fixedTableHeader) panels = table_deepmerge(panels, fixedTableHeader.filterPanels);
    if (rightFixedTableHeader) panels = table_deepmerge(panels, rightFixedTableHeader.filterPanels);
    const keys = Object.keys(panels);
    if (!keys.length) return;
    keys.forEach(key => {
      panels[key].filteredValue = [];
    });
    states.filters = {};
    this.commit('filterChange', {
      column: {},
      values: [],
      silent: true
    });
  }

  clearSort() {
    const states = this.states;
    if (!states.sortingColumn) return;
    states.sortingColumn.order = null;
    states.sortProp = null;
    states.sortOrder = null;
    this.commit('changeSortCondition', {
      silent: true
    });
  }

  updateAllSelected() {
    const states = this.states;
    const {
      selection,
      rowKey,
      selectable,
      data
    } = states;

    if (!data || data.length === 0) {
      states.isAllSelected = false;
      return;
    }

    let selectedMap;

    if (rowKey) {
      selectedMap = getKeysMap(states.selection, rowKey);
    }

    const isSelected = function (row) {
      if (selectedMap) {
        return !!selectedMap[getRowIdentity(row, rowKey)];
      } else {
        return selection.indexOf(row) !== -1;
      }
    };

    let isAllSelected = true;
    let selectedCount = 0;

    for (let i = 0, j = data.length; i < j; i++) {
      const item = data[i];
      const isRowSelectable = selectable && selectable(item, i);

      if (!isSelected(item)) {
        if (!selectable || isRowSelectable) {
          isAllSelected = false;
          break;
        }
      } else {
        selectedCount++;
      }
    }

    if (selectedCount === 0) isAllSelected = false;
    states.isAllSelected = isAllSelected;
  }

  scheduleLayout(updateColumns) {
    if (updateColumns) {
      this.updateColumns();
    }

    this.table.debouncedUpdateLayout();
  }

  setCurrentRowKey(key) {
    const states = this.states;
    const rowKey = states.rowKey;
    if (!rowKey) throw new Error('[Table] row-key should not be empty.');
    const data = states.data || [];
    const keysMap = getKeysMap(data, rowKey);
    const info = keysMap[key];
    states.currentRow = info ? info.row : null;
  }

  updateCurrentRow() {
    const states = this.states;
    const table = this.table;
    const data = states.data || [];
    const oldCurrentRow = states.currentRow;

    if (data.indexOf(oldCurrentRow) === -1) {
      states.currentRow = null;

      if (states.currentRow !== oldCurrentRow) {
        table.$emit('current-change', null, oldCurrentRow);
      }
    }
  }

  commit(name, ...args) {
    const mutations = this.mutations;

    if (mutations[name]) {
      mutations[name].apply(this, [this.states].concat(args));
    } else {
      throw new Error(`Action not found: ${name}`);
    }
  }

}

/* harmony default export */ var table_store = (TableStore);
// CONCATENATED MODULE: ./src/views/table/table-layout.js
;


class TableLayout {
  constructor(options) {
    this.observers = [];
    this.table = null;
    this.store = null;
    this.columns = null;
    this.fit = true;
    this.showHeader = true;
    this.height = null;
    this.scrollX = false;
    this.scrollY = false;
    this.bodyWidth = null;
    this.fixedWidth = null;
    this.rightFixedWidth = null;
    this.tableHeight = null;
    this.headerHeight = 44; // Table Header Height

    this.appendHeight = 0; // Append Slot Height

    this.footerHeight = 44; // Table Footer Height

    this.paginationHeight = 0; // Table Pagination Height

    this.viewportHeight = null; // Table Height - Scroll Bar Height

    this.bodyHeight = null; // Table Height - Table Header Height

    this.fixedBodyHeight = null; // Table Height - Table Header Height - Scroll Bar Height

    this.gutterWidth = scrollbarWidth();

    for (const name in options) {
      if (options.hasOwnProperty(name)) {
        this[name] = options[name];
      }
    }

    if (!this.table) {
      throw new Error('table is required for Table Layout');
    }

    if (!this.store) {
      throw new Error('store is required for Table Layout');
    }
  }

  updateScrollY() {
    const height = this.height;
    if (typeof height !== 'string' && typeof height !== 'number') return;
    const bodyWrapper = this.table.bodyWrapper;

    if (this.table.$el && bodyWrapper) {
      const body = bodyWrapper.querySelector('.bk-table-body');
      this.scrollY = body.offsetHeight > this.bodyHeight;
    }
  }

  setHeight(value, prop = 'height') {
    const el = this.table.$el;

    if (typeof value === 'string' && /^\d+$/.test(value)) {
      value = Number(value);
    }

    this.height = value;
    if (!el && (value || value === 0)) return vue_esm.nextTick(() => this.setHeight(value, prop));

    if (typeof value === 'number') {
      el.style[prop] = value + 'px';
      this.updateElsHeight();
    } else if (typeof value === 'string') {
      el.style[prop] = value;
      this.updateElsHeight();
    }
  }

  setMaxHeight(value) {
    return this.setHeight(value, 'max-height');
  }

  updateElsHeight() {
    if (this.table.$destroyed) return;
    if (!this.table.$ready) return vue_esm.nextTick(() => this.updateElsHeight());
    const {
      headerWrapper,
      appendWrapper,
      footerWrapper,
      paginationWrapper
    } = this.table.$refs;
    if (this.table.showPagination && !paginationWrapper) return vue_esm.nextTick(() => this.updateElsHeight());
    this.appendHeight = appendWrapper ? appendWrapper.offsetHeight : 0;
    this.paginationHeight = paginationWrapper ? paginationWrapper.offsetHeight : 0;
    if (this.showHeader && !headerWrapper) return;
    const headerHeight = this.headerHeight = !this.showHeader ? 0 : headerWrapper.offsetHeight;

    if (this.showHeader && headerWrapper.offsetWidth > 0 && (this.table.columns || []).length > 0 && headerHeight < 2) {
      return vue_esm.nextTick(() => this.updateElsHeight());
    }

    const tableHeight = this.tableHeight = this.table.$el.offsetHeight - this.paginationHeight;

    if (this.height !== null && (!isNaN(this.height) || typeof this.height === 'string')) {
      const footerHeight = this.footerHeight = footerWrapper ? footerWrapper.offsetHeight : 0;
      this.bodyHeight = tableHeight - headerHeight - footerHeight + (footerWrapper ? 1 : 0);
    }

    this.fixedBodyHeight = this.scrollX ? this.bodyHeight - this.gutterWidth : this.bodyHeight;
    const noData = !this.table.data || this.table.data.length === 0;
    this.viewportHeight = this.scrollX ? tableHeight - (noData ? 0 : this.gutterWidth) : tableHeight;
    this.updateScrollY();
    this.notifyObservers('scrollable');
  }

  getFlattenColumns() {
    const flattenColumns = [];
    const columns = this.table.columns;
    columns.forEach(column => {
      if (column.isColumnGroup) {
        flattenColumns.push.apply(flattenColumns, column.columns);
      } else {
        flattenColumns.push(column);
      }
    });
    return flattenColumns;
  }

  updateColumnsWidth() {
    if (this.table.$destroyed) return;
    const fit = this.fit;
    const bodyWidth = this.table.$el.clientWidth;
    let bodyMinWidth = 0;
    const flattenColumns = this.getFlattenColumns();
    const flexColumns = flattenColumns.filter(column => typeof column.width !== 'number');
    flattenColumns.forEach(column => {
      // Clean those columns whose width changed from flex to unflex
      if (typeof column.width === 'number' && column.realWidth) column.realWidth = null;
    });

    if (flexColumns.length > 0 && fit) {
      flattenColumns.forEach(column => {
        bodyMinWidth += column.width || column.minWidth || 80;
      });
      const scrollYWidth = this.scrollY ? this.gutterWidth : 0;

      if (bodyMinWidth <= bodyWidth - scrollYWidth) {
        // DON'T HAVE SCROLL BAR
        this.scrollX = false;
        const totalFlexWidth = bodyWidth - scrollYWidth - bodyMinWidth;

        if (flexColumns.length === 1) {
          flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth;
        } else {
          const allColumnsWidth = flexColumns.reduce((prev, column) => prev + (column.minWidth || 80), 0);
          const flexWidthPerPixel = totalFlexWidth / allColumnsWidth;
          let noneFirstWidth = 0;
          flexColumns.forEach((column, index) => {
            if (index === 0) return;
            const flexWidth = Math.floor((column.minWidth || 80) * flexWidthPerPixel);
            noneFirstWidth += flexWidth;
            column.realWidth = (column.minWidth || 80) + flexWidth;
          });
          flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;
        }
      } else {
        // HAVE HORIZONTAL SCROLL BAR
        this.scrollX = true;
        flexColumns.forEach(function (column) {
          column.realWidth = column.minWidth;
        });
      }

      this.bodyWidth = Math.max(bodyMinWidth, bodyWidth);
      this.table.resizeState.width = this.bodyWidth;
    } else {
      flattenColumns.forEach(column => {
        if (!column.width && !column.minWidth) {
          column.realWidth = 80;
        } else {
          column.realWidth = column.width || column.minWidth;
        }

        bodyMinWidth += column.realWidth;
      });
      this.scrollX = bodyMinWidth > bodyWidth;
      this.bodyWidth = bodyMinWidth;
    }

    const fixedColumns = this.store.states.fixedColumns;

    if (fixedColumns.length > 0) {
      let fixedWidth = 0;
      fixedColumns.forEach(function (column) {
        fixedWidth += column.realWidth || column.width;
      });
      this.fixedWidth = fixedWidth;
    }

    const rightFixedColumns = this.store.states.rightFixedColumns;

    if (rightFixedColumns.length > 0) {
      let rightFixedWidth = 0;
      rightFixedColumns.forEach(function (column) {
        rightFixedWidth += column.realWidth || column.width;
      });
      this.rightFixedWidth = rightFixedWidth;
    }

    this.notifyObservers('columns');
  }

  addObserver(observer) {
    this.observers.push(observer);
  }

  removeObserver(observer) {
    const index = this.observers.indexOf(observer);

    if (index !== -1) {
      this.observers.splice(index, 1);
    }
  }

  notifyObservers(event) {
    const observers = this.observers;
    observers.forEach(observer => {
      switch (event) {
        case 'columns':
          observer.onColumnsChange(this);
          break;

        case 'scrollable':
          observer.onScrollableChange(this);
          break;

        default:
          throw new Error(`Table Layout don't have event ${event}.`);
      }
    });
  }

}

/* harmony default export */ var table_layout = (TableLayout);
// EXTERNAL MODULE: ../../node_modules/@vue/babel-helper-vue-jsx-merge-props/dist/helper.js
var helper = __webpack_require__(960);
var helper_default = /*#__PURE__*/__webpack_require__.n(helper);
// CONCATENATED MODULE: ./src/views/table/layout-observer.js
/* harmony default export */ var layout_observer = ({
  created() {
    this.tableLayout.addObserver(this);
  },

  destroyed() {
    this.tableLayout.removeObserver(this);
  },

  computed: {
    tableLayout() {
      let layout = this.layout;

      if (!layout && this.table) {
        layout = this.table.layout;
      }

      if (!layout) {
        throw new Error('Can not find table layout.');
      }

      return layout;
    }

  },

  mounted() {
    this.onColumnsChange(this.tableLayout);
    this.onScrollableChange(this.tableLayout);
  },

  updated() {
    if (this.__updated__) {
      return;
    }

    this.onColumnsChange(this.tableLayout);
    this.onScrollableChange(this.tableLayout);
    this.__updated__ = true;
  },

  methods: {
    onColumnsChange() {
      const cols = this.$el.querySelectorAll('colgroup > col');

      if (!cols.length) {
        return;
      }

      const flattenColumns = this.tableLayout.getFlattenColumns();
      const columnsMap = {};
      flattenColumns.forEach(column => {
        columnsMap[column.id] = column;
      });

      for (let i = 0, j = cols.length; i < j; i++) {
        const col = cols[i];
        const name = col.getAttribute('name');
        const column = columnsMap[name];

        if (column) {
          col.setAttribute('width', column.realWidth || column.width);
        }
      }
    },

    onScrollableChange(layout) {
      const cols = this.$el.querySelectorAll('colgroup > col[name=gutter]');

      for (let i = 0, j = cols.length; i < j; i++) {
        const col = cols[i];
        col.setAttribute('width', layout.scrollY ? layout.gutterWidth : '0');
      }

      const ths = this.$el.querySelectorAll('th.gutter');

      for (let i = 0, j = ths.length; i < j; i++) {
        const th = ths[i];
        th.style.width = layout.scrollY ? layout.gutterWidth + 'px' : '0';
        th.style.display = layout.scrollY ? '' : 'none';
      }
    }

  }
});
// CONCATENATED MODULE: ./src/views/table/table-body.js
;




/* harmony default export */ var table_body = ({
  name: 'bk-table-body',
  mixins: [layout_observer],
  props: {
    store: {
      required: true
    },
    stripe: Boolean,
    context: {},
    rowClassName: [String, Function],
    rowStyle: [Object, Function],
    fixed: String,
    highlight: Boolean
  },

  render(h) {
    const columnsHidden = this.columns.map((column, index) => this.isColumnHidden(index));
    return h("table", {
      "class": "bk-table-body",
      "attrs": {
        "cellspacing": "0",
        "cellpadding": "0",
        "border": "0"
      }
    }, [h("colgroup", [this._l(this.columns, column => h("col", {
      "attrs": {
        "name": column.id
      }
    }))]), h("tbody", [this._l(this.data, (row, $index) => [h("tr", {
      "style": this.rowStyle ? this.getRowStyle(row, $index) : null,
      "key": this.table.rowKey ? this.getKeyOfRow(row, $index) : $index,
      "on": {
        "dblclick": $event => this.handleDoubleClick($event, row),
        "click": $event => this.handleClick($event, row),
        "contextmenu": $event => this.handleContextMenu($event, row),
        "mouseenter": $event => this.handleMouseEnter($index, $event, row),
        "mouseleave": $event => this.handleMouseLeave($index, $event, row)
      },
      "class": [this.getRowClass(row, $index)]
    }, [this._l(this.columns, (column, cellIndex) => {
      const {
        rowspan,
        colspan
      } = this.getSpan(row, column, $index, cellIndex);

      if (!rowspan || !colspan || column.type === 'setting') {
        return '';
      } else {
        return h("td", helper_default()([{
          "style": this.getCellStyle($index, cellIndex, row, column),
          "class": this.getCellClass($index, cellIndex, row, column),
          "attrs": {
            "rowspan": rowspan,
            "colspan": colspan
          },
          "on": {
            "mouseenter": $event => this.handleCellMouseEnter($event, row),
            "mouseleave": this.handleCellMouseLeave
          }
        }, {
          "domProps": this.getCellAttributes($index, cellIndex, row, column)
        }]), [column.renderCell.call(this._renderProxy, h, {
          row,
          column,
          $index,
          store: this.store,
          _self: this.context || this.table.$vnode.context
        }, columnsHidden[cellIndex])]);
      }
    })]), this.store.isRowExpanded(row) ? h("tr", [h("td", {
      "attrs": {
        "colspan": this.columns.length
      },
      "class": "bk-table-expanded-cell"
    }, [this.table.renderExpanded ? this.table.renderExpanded(h, {
      row,
      $index,
      store: this.store
    }) : ''])]) : ''])])]);
  },

  watch: {
    'store.states.hoverRow'(newVal, oldVal) {
      const el = this.$el;

      if (!el) {
        return;
      }

      const tr = el.querySelector('tbody').children;
      const rows = [].filter.call(tr, row => hasClass(row, 'bk-table-row'));
      const oldRow = rows[oldVal];
      const newRow = rows[newVal];

      if (oldRow) {
        dom_removeClass(oldRow, 'hover-row');
      }

      if (newRow) {
        dom_addClass(newRow, 'hover-row');
      }
    },

    'store.states.currentRow'(newVal, oldVal) {
      if (!this.highlight) {
        return;
      }

      const el = this.$el;

      if (!el) {
        return;
      }

      const data = this.store.states.data;
      const tr = el.querySelector('tbody').children;
      const rows = [].filter.call(tr, row => hasClass(row, 'bk-table-row'));
      const oldRow = rows[data.indexOf(oldVal)];
      const newRow = rows[data.indexOf(newVal)];

      if (oldRow) {
        dom_removeClass(oldRow, 'current-row');
      } else {
        [].forEach.call(rows, row => dom_removeClass(row, 'current-row'));
      }

      if (newRow) {
        dom_addClass(newRow, 'current-row');
      }
    }

  },
  computed: {
    table() {
      return this.$parent;
    },

    data() {
      return this.store.states.data;
    },

    columnsCount() {
      return this.store.states.columns.length;
    },

    leftFixedLeafCount() {
      return this.store.states.fixedLeafColumnsLength;
    },

    rightFixedLeafCount() {
      return this.store.states.rightFixedLeafColumnsLength;
    },

    leftFixedCount() {
      return this.store.states.fixedColumns.length;
    },

    rightFixedCount() {
      return this.store.states.rightFixedColumns.length;
    },

    columns() {
      return this.store.states.columns;
    }

  },

  data() {
    return {
      tooltipContent: ''
    };
  },

  methods: {
    getKeyOfRow(row, index) {
      const rowKey = this.table.rowKey;

      if (rowKey) {
        return getRowIdentity(row, rowKey);
      }

      return index;
    },

    isColumnHidden(index) {
      if (this.fixed === true || this.fixed === 'left') {
        return index >= this.leftFixedLeafCount;
      } else if (this.fixed === 'right') {
        return index < this.columnsCount - this.rightFixedLeafCount;
      } else {
        return index < this.leftFixedLeafCount || index >= this.columnsCount - this.rightFixedLeafCount;
      }
    },

    getSpan(row, column, rowIndex, columnIndex) {
      let rowspan = 1;
      let colspan = 1;
      const fn = this.table.spanMethod;

      if (typeof fn === 'function') {
        const result = fn({
          row,
          column,
          rowIndex,
          columnIndex
        });

        if (Array.isArray(result)) {
          rowspan = result[0];
          colspan = result[1];
        } else if (typeof result === 'object') {
          rowspan = result.rowspan;
          colspan = result.colspan;
        }
      } // 判断下一列是否是原本的设置列，如果是则当前列的colspan + 1，占用下一列的位置


      const nextColumn = this.columns[columnIndex + 1];
      colspan = nextColumn && nextColumn.type === 'setting' ? colspan + 1 : colspan;
      return {
        rowspan,
        colspan
      };
    },

    getRowStyle(row, rowIndex) {
      const rowStyle = this.table.rowStyle;

      if (typeof rowStyle === 'function') {
        return rowStyle({
          row,
          rowIndex
        });
      }

      return rowStyle;
    },

    getRowClass(row, rowIndex) {
      const classes = ['bk-table-row'];

      if (rowIndex === this.data.length - 1) {
        classes.push('bk-table-row-last');
      }

      if (this.table.highlightCurrentRow && row === this.store.states.currentRow) {
        classes.push('current-row');
      }

      if (this.stripe && rowIndex % 2 === 1) {
        classes.push('bk-table-row-striped');
      }

      const rowClassName = this.table.rowClassName;

      if (typeof rowClassName === 'string') {
        classes.push(rowClassName);
      } else if (typeof rowClassName === 'function') {
        classes.push(rowClassName({
          row,
          rowIndex
        }));
      }

      if (this.store.states.expandRows.indexOf(row) > -1) {
        classes.push('expanded');
      }

      return classes.join(' ');
    },

    getCellStyle(rowIndex, columnIndex, row, column) {
      const cellStyle = this.table.cellStyle;

      if (typeof cellStyle === 'function') {
        return cellStyle({
          rowIndex,
          columnIndex,
          row,
          column
        });
      }

      return cellStyle;
    },

    getCellClass(rowIndex, columnIndex, row, column) {
      const classes = [column.id, column.align, column.className];

      if (this.isColumnHidden(columnIndex)) {
        classes.push('is-hidden');
      }

      if (columnIndex === 0) {
        classes.push('is-first');
      }

      if (columnIndex === this.columns.length - 1) {
        classes.push('is-last');
      }

      const cellClassName = this.table.cellClassName;

      if (typeof cellClassName === 'string') {
        classes.push(cellClassName);
      } else if (typeof cellClassName === 'function') {
        classes.push(cellClassName({
          rowIndex,
          columnIndex,
          row,
          column
        }));
      }

      return classes.join(' ');
    },

    getCellAttributes(rowIndex, cellIndex, row, column) {
      if (typeof this.table.cellAttributes === 'function') {
        const attributes = this.table.cellAttributes({
          rowIndex,
          cellIndex,
          row,
          column
        });
        return typeof attributes === 'object' ? attributes : {};
      } else if (typeof this.table.cellAttributes === 'object') {
        return this.table.cellAttributes;
      }

      return {};
    },

    handleCellMouseEnter(event, row) {
      const table = this.table;
      const cell = getCell(event);

      if (cell) {
        const column = getColumnByCell(table, cell);
        const hoverState = table.hoverState = {
          cell,
          column,
          row
        };
        table.$emit('cell-mouse-enter', hoverState.row, hoverState.column, hoverState.cell, event);
      }
    },

    handleCellMouseLeave(event) {
      const cell = getCell(event);
      if (!cell) return;
      const oldHoverState = this.table.hoverState || {};
      this.table.$emit('cell-mouse-leave', oldHoverState.row, oldHoverState.column, oldHoverState.cell, event);
    },

    handleMouseEnter(index, event, row) {
      this.store.commit('setHoverRow', index);
      this.table.$emit('row-mouse-enter', index, event, row);
    },

    handleMouseLeave(index, event, row) {
      this.store.commit('setHoverRow', null);
      this.table.$emit('row-mouse-leave', index, event, row);
    },

    handleContextMenu(event, row) {
      this.handleEvent(event, row, 'contextmenu');
    },

    handleDoubleClick(event, row) {
      this.handleEvent(event, row, 'dblclick');
    },

    handleClick(event, row) {
      this.store.commit('setCurrentRow', row);
      this.handleEvent(event, row, 'click');
    },

    handleEvent(event, row, name) {
      const table = this.table;
      const cell = getCell(event);
      let column;

      if (cell) {
        column = getColumnByCell(table, cell);

        if (column) {
          table.$emit(`cell-${name}`, row, column, cell, event);
        }
      }

      table.$emit(`row-${name}`, row, event, column);
    },

    async handleExpandClick(data) {
      const {
        row,
        event,
        column
      } = data;
      event.stopPropagation();

      if (typeof column.beforeExpandChange === 'function') {
        const result = await column.beforeExpandChange(data);

        if (!result) {
          return false;
        }
      }

      this.store.toggleRowExpansion(row);
    }

  }
});
// CONCATENATED MODULE: ./src/views/table/table-header.js
;





const getAllColumns = columns => {
  const result = [];
  columns.forEach(column => {
    if (column.children) {
      result.push(column);
      result.push.apply(result, getAllColumns(column.children));
    } else {
      result.push(column);
    }
  });
  return result;
};

const convertToRows = originColumns => {
  let maxLevel = 1;

  const traverse = (column, parent) => {
    if (parent) {
      column.level = parent.level + 1;

      if (maxLevel < column.level) {
        maxLevel = column.level;
      }
    }

    if (column.children) {
      let colSpan = 0;
      column.children.forEach(subColumn => {
        traverse(subColumn, column);
        colSpan += subColumn.colSpan;
      });
      column.colSpan = colSpan;
    } else {
      column.colSpan = 1;
    }
  };

  originColumns.forEach(column => {
    column.level = 1;
    traverse(column);
  });
  const rows = [];

  for (let i = 0; i < maxLevel; i++) {
    rows.push([]);
  }

  const allColumns = getAllColumns(originColumns);
  allColumns.forEach(column => {
    if (!column.children) {
      column.rowSpan = maxLevel - column.level + 1;
    } else {
      column.rowSpan = 1;
    }

    rows[column.level - 1].push(column);
  });
  return rows;
};

/* harmony default export */ var table_header = ({
  name: 'bk-table-header',
  mixins: [layout_observer],

  render(h) {
    const originColumns = this.store.states.originColumns;
    const columnRows = convertToRows(originColumns, this.columns); // 是否拥有多级表头

    const isGroup = columnRows.length > 1;
    if (isGroup) this.$parent.isGroup = true;
    return h("table", {
      "class": "bk-table-header",
      "attrs": {
        "cellspacing": "0",
        "cellpadding": "0",
        "border": "0"
      }
    }, [h("colgroup", [this._l(this.columns, column => h("col", {
      "attrs": {
        "name": column.id
      }
    })), this.hasGutter ? h("col", {
      "attrs": {
        "name": "gutter"
      }
    }) : '']), h("thead", {
      "class": [{
        'is-group': isGroup,
        'has-gutter': this.hasGutter
      }]
    }, [this._l(columnRows, (columns, rowIndex) => h("tr", {
      "style": this.getHeaderRowStyle(rowIndex),
      "class": this.getHeaderRowClass(rowIndex)
    }, [this._l(columns, (column, cellIndex) => h("th", helper_default()([{
      "attrs": {
        "colspan": column.colSpan,
        "rowspan": column.rowSpan
      },
      "on": {
        "mousemove": $event => this.handleMouseMove($event, column),
        "mouseout": this.handleMouseOut,
        "mousedown": $event => this.handleMouseDown($event, column),
        "click": $event => this.handleHeaderClick($event, column),
        "contextmenu": $event => this.handleHeaderContextMenu($event, column)
      },
      "style": this.getHeaderCellStyle(rowIndex, cellIndex, columns, column),
      "class": this.getHeaderCellClass(rowIndex, cellIndex, columns, column),
      "key": column.id
    }, {
      "domProps": this.getHeaderCellAttributes(rowIndex, cellIndex, columns, column)
    }]), [h("div", {
      "class": "cell"
    }, [h("div", {
      "class": ['bk-table-header-label', column.labelClassName]
    }, [column.renderHeader ? column.renderHeader.call(this._renderProxy, h, {
      column,
      $index: cellIndex,
      store: this.store,
      _self: this.$parent.$vnode.context,
      fixed: this.fixed
    }) : column.label]), column.sortable ? h("span", {
      "class": "bk-table-caret-wrapper",
      "on": {
        "click": $event => this.handleSortClick($event, column)
      }
    }, [h("i", {
      "class": "bk-table-sort-caret ascending",
      "on": {
        "click": $event => this.handleSortClick($event, column, 'ascending')
      }
    }), h("i", {
      "class": "bk-table-sort-caret descending",
      "on": {
        "click": $event => this.handleSortClick($event, column, 'descending')
      }
    })]) : '', column.filterable ? h("span", {
      "class": ['bk-table-column-filter-trigger', 'bk-icon icon-funnel', column.filterOpened ? 'is-open' : '', column.filteredValue && column.filteredValue.length > 0 ? 'is-filtered' : ''],
      "on": {
        "click": $event => this.handleFilterClick($event, column)
      }
    }) : ''])])), this.hasGutter ? h("th", {
      "class": "gutter"
    }) : ''])), this.$slots.prepend ? h("tr", {
      "class": "bk-table-header-append"
    }, [h("th", {
      "attrs": {
        "colSpan": this.colSpanNum
      },
      "class": "is-prepend"
    }, [this.$slots.prepend])]) : ''])]);
  },

  props: {
    fixed: String,
    store: {
      required: true
    },
    border: Boolean,
    defaultSort: {
      type: Object,

      default() {
        return {
          prop: '',
          order: ''
        };
      }

    }
  },
  computed: {
    table() {
      return this.$parent;
    },

    isAllSelected() {
      return this.store.states.isAllSelected;
    },

    columnsCount() {
      return this.store.states.columns.length;
    },

    leftFixedCount() {
      return this.store.states.fixedColumns.length;
    },

    rightFixedCount() {
      return this.store.states.rightFixedColumns.length;
    },

    leftFixedLeafCount() {
      return this.store.states.fixedLeafColumnsLength;
    },

    rightFixedLeafCount() {
      return this.store.states.rightFixedLeafColumnsLength;
    },

    columns() {
      return this.store.states.columns;
    },

    hasGutter() {
      return !this.fixed && this.tableLayout.gutterWidth;
    },

    colSpanNum() {
      const originColSpan = this.store.states.originColumns.length ? this.store.states.originColumns.map(col => col.colSpan).reduce((pre, next) => {
        return pre + next;
      }) : 0;
      return this.hasGutter ? originColSpan + 1 : originColSpan;
    }

  },

  created() {
    this.filterPanels = {};
  },

  mounted() {
    const {
      prop,
      order
    } = this.defaultSort;
    this.store.commit('sort', {
      prop,
      order
    });
  },

  beforeDestroy() {
    const panels = this.filterPanels;

    for (const prop in panels) {
      if (panels.hasOwnProperty(prop) && panels[prop]) {
        panels[prop].$destroy(true);
      }
    }
  },

  methods: {
    isCellHidden(index, columns) {
      let start = 0;

      for (let i = 0; i < index; i++) {
        start += columns[i].colSpan;
      }

      const after = start + columns[index].colSpan - 1;

      if (this.fixed === true || this.fixed === 'left') {
        return after >= this.leftFixedLeafCount;
      } else if (this.fixed === 'right') {
        return start < this.columnsCount - this.rightFixedLeafCount;
      } else {
        return after < this.leftFixedLeafCount || start >= this.columnsCount - this.rightFixedLeafCount;
      }
    },

    getHeaderRowStyle(rowIndex) {
      const headerRowStyle = this.table.headerRowStyle;

      if (typeof headerRowStyle === 'function') {
        return headerRowStyle({
          rowIndex
        });
      }

      return headerRowStyle;
    },

    getHeaderRowClass(rowIndex) {
      const classes = [];
      const headerRowClassName = this.table.headerRowClassName;

      if (typeof headerRowClassName === 'string') {
        classes.push(headerRowClassName);
      } else if (typeof headerRowClassName === 'function') {
        classes.push(headerRowClassName({
          rowIndex
        }));
      }

      return classes.join(' ');
    },

    getHeaderCellStyle(rowIndex, columnIndex, row, column) {
      const headerCellStyle = this.table.headerCellStyle;

      if (typeof headerCellStyle === 'function') {
        return headerCellStyle({
          rowIndex,
          columnIndex,
          row,
          column
        });
      }

      return headerCellStyle;
    },

    getHeaderCellClass(rowIndex, columnIndex, row, column) {
      const classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName];

      if (this.border) {
        classes.push('has-border');
      }

      if (rowIndex === 0 && this.isCellHidden(columnIndex, row)) {
        classes.push('is-hidden');
      }

      if (!column.children) {
        classes.push('is-leaf');
      }

      if (column.sortable) {
        classes.push('is-sortable');
      }

      if (column.filterable) {
        classes.push('is-filterable');
      }

      if (columnIndex === 0) {
        classes.push('is-first');
      }

      if (columnIndex === row.length - 1) {
        classes.push('is-last');
      }

      const headerCellClassName = this.table.headerCellClassName;

      if (typeof headerCellClassName === 'string') {
        classes.push(headerCellClassName);
      } else if (typeof headerCellClassName === 'function') {
        classes.push(headerCellClassName({
          rowIndex,
          columnIndex,
          row,
          column
        }));
      }

      return classes.join(' ');
    },

    getHeaderCellAttributes(rowIndex, cellIndex, columns, column) {
      if (typeof this.table.headerCellAttributes === 'function') {
        const attributes = this.table.headerCellAttributes({
          rowIndex,
          cellIndex,
          columns,
          column
        });
        return typeof attributes === 'object' ? attributes : {};
      } else if (typeof this.table.headerCellAttributes === 'object') {
        return this.table.headerCellAttributes;
      }

      return {};
    },

    toggleAllSelection() {
      this.store.commit('toggleAllSelection');
    },

    handleFilterClick(event, column) {
      event.stopPropagation();
      let target = event.target;

      while (target && target.tagName !== 'TH') {
        target = target.parentNode;
      }

      const filterReference = target.querySelector('.bk-table-column-filter-trigger');
      const table = this.$parent;
      let filterPanel = this.filterPanels[column.id];

      if (filterPanel && column.filterOpened) {
        filterPanel.instance.hide();
        return;
      }

      if (!filterPanel) {
        filterPanel = new vue_esm(FilterPanel);
        this.filterPanels[column.id] = filterPanel;
        filterPanel.table = table;
        filterPanel.column = column;
        filterPanel.multiple = column.filterMultiple;
        filterPanel.placement = column.filterPlacement || 'bottom-start';
        filterPanel.reference = filterReference;
        filterPanel.filters = column.filters;
        filterPanel.selected = column.filteredValue;
        filterPanel.searchable = column.filterSearchable;
        filterPanel.$mount();
      }

      setTimeout(() => {
        filterPanel.instance.show();
      }, 1000 / 60);
    },

    handleHeaderClick(event, column) {
      if (!column.filters && column.sortable) {
        this.handleSortClick(event, column);
      } else if (column.filterable && !column.sortable) {
        this.handleFilterClick(event, column);
      }

      this.$parent.$emit('header-click', column, event);
    },

    handleHeaderContextMenu(event, column) {
      this.$parent.$emit('header-contextmenu', column, event);
    },

    handleMouseDown(event, column) {
      if (column.children && column.children.length > 0) return; // if (this.draggingColumn && this.border) {

      if (this.draggingColumn) {
        this.dragging = true;
        this.$parent.resizeProxyVisible = true;
        const table = this.$parent;
        const tableEl = table.$el;
        const tableLeft = tableEl.getBoundingClientRect().left;
        const columnEl = this.$el.querySelector(`th.${column.id}`);
        const columnRect = columnEl.getBoundingClientRect();
        const minLeft = columnRect.left - tableLeft + 80;
        dom_addClass(columnEl, 'noclick');
        this.dragState = {
          startMouseLeft: event.clientX,
          startLeft: columnRect.right - tableLeft,
          startColumnLeft: columnRect.left - tableLeft,
          tableLeft
        };
        const resizeProxy = table.$refs.resizeProxy;
        resizeProxy.style.left = this.dragState.startLeft + 'px';

        document.onselectstart = function () {
          return false;
        };

        document.ondragstart = function () {
          return false;
        };

        const handleMouseMove = event => {
          const deltaLeft = event.clientX - this.dragState.startMouseLeft;
          const proxyLeft = this.dragState.startLeft + deltaLeft;
          resizeProxy.style.left = Math.max(minLeft, proxyLeft) + 'px';
        };

        const handleMouseUp = () => {
          if (this.dragging) {
            const {
              startColumnLeft,
              startLeft
            } = this.dragState;
            const finalLeft = parseInt(resizeProxy.style.left, 10);
            const columnWidth = finalLeft - startColumnLeft;
            column.width = column.realWidth = columnWidth;
            table.$emit('header-dragend', column.width, startLeft - startColumnLeft, column, event);
            this.store.scheduleLayout();
            document.body.style.cursor = '';
            this.dragging = false;
            this.draggingColumn = null;
            this.dragState = {};
            table.resizeProxyVisible = false;
          }

          document.removeEventListener('mousemove', handleMouseMove);
          document.removeEventListener('mouseup', handleMouseUp);
          document.onselectstart = null;
          document.ondragstart = null;
          setTimeout(function () {
            dom_removeClass(columnEl, 'noclick');
          }, 0);
        };

        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
      }
    },

    handleMouseMove(event, column) {
      if (column.children && column.children.length > 0) return;
      let target = event.target;

      while (target && target.tagName !== 'TH') {
        target = target.parentNode;
      }

      if (!column || !column.resizable) return; // if (!this.dragging && this.border) {

      if (!this.dragging) {
        const rect = target.getBoundingClientRect();
        const bodyStyle = document.body.style;

        if (rect.width > 12 && rect.right - event.pageX < 8) {
          bodyStyle.cursor = 'col-resize';

          if (hasClass(target, 'is-sortable')) {
            target.style.cursor = 'col-resize';
          }

          this.draggingColumn = column;
        } else if (!this.dragging) {
          bodyStyle.cursor = '';

          if (hasClass(target, 'is-sortable')) {
            target.style.cursor = 'pointer';
          }

          this.draggingColumn = null;
        }
      }
    },

    handleMouseOut() {
      document.body.style.cursor = '';
    },

    toggleOrder({
      order,
      sortOrders
    }) {
      if (order === '') return sortOrders[0];
      const index = sortOrders.indexOf(order || null);
      return sortOrders[index > sortOrders.length - 2 ? 0 : index + 1];
    },

    handleSortClick(event, column, givenOrder) {
      event.stopPropagation();
      const order = givenOrder || this.toggleOrder(column);
      let target = event.target;

      while (target && target.tagName !== 'TH') {
        target = target.parentNode;
      }

      if (target && target.tagName === 'TH') {
        if (hasClass(target, 'noclick')) {
          dom_removeClass(target, 'noclick');
          return;
        }
      }

      if (!column.sortable) return;
      const states = this.store.states;
      let sortProp = states.sortProp;
      let sortOrder;
      const sortingColumn = states.sortingColumn;

      if (sortingColumn !== column || sortingColumn === column && sortingColumn.order === null) {
        if (sortingColumn) {
          sortingColumn.order = null;
        }

        states.sortingColumn = column;
        sortProp = column.property;
      }

      if (!order) {
        sortOrder = column.order = null;
        states.sortingColumn = null;
        sortProp = null;
      } else {
        sortOrder = column.order = order;
      }

      states.sortProp = sortProp;
      states.sortOrder = sortOrder;
      this.store.commit('changeSortCondition');
    }

  },

  data() {
    return {
      draggingColumn: null,
      dragging: false,
      dragState: {}
    };
  }

});
// CONCATENATED MODULE: ./src/views/table/table-footer.js

;
/* harmony default export */ var table_footer = ({
  name: 'bk-table-footer',
  mixins: [layout_observer],

  render(h) {
    let sums = [];

    if (this.summaryMethod) {
      sums = this.summaryMethod({
        columns: this.columns,
        data: this.store.states.data
      });
    } else {
      this.columns.forEach((column, index) => {
        if (index === 0) {
          sums[index] = this.sumText;
          return;
        }

        const values = this.store.states.data.map(item => Number(item[column.property]));
        const precisions = [];
        let notNumber = true;
        values.forEach(value => {
          if (!isNaN(value)) {
            notNumber = false;
            const decimal = ('' + value).split('.')[1];
            precisions.push(decimal ? decimal.length : 0);
          }
        });
        const precision = Math.max.apply(null, precisions);

        if (!notNumber) {
          sums[index] = values.reduce((prev, curr) => {
            const value = Number(curr);

            if (!isNaN(value)) {
              return parseFloat((prev + curr).toFixed(Math.min(precision, 20)));
            } else {
              return prev;
            }
          }, 0);
        } else {
          sums[index] = '';
        }
      });
    }

    return h("table", {
      "class": "bk-table-footer",
      "attrs": {
        "cellspacing": "0",
        "cellpadding": "0",
        "border": "0"
      }
    }, [h("colgroup", [this._l(this.columns, column => h("col", {
      "attrs": {
        "name": column.id
      }
    })), this.hasGutter ? h("col", {
      "attrs": {
        "name": "gutter"
      }
    }) : '']), h("tbody", {
      "class": [{
        'has-gutter': this.hasGutter
      }]
    }, [h("tr", [this._l(this.columns, (column, cellIndex) => h("td", {
      "attrs": {
        "colspan": column.colSpan,
        "rowspan": column.rowSpan
      },
      "class": [column.id, column.headerAlign, column.className || '', this.isCellHidden(cellIndex, this.columns) ? 'is-hidden' : '', !column.children ? 'is-leaf' : '', column.labelClassName]
    }, [h("div", {
      "class": ['cell', column.labelClassName]
    }, [sums[cellIndex]])])), this.hasGutter ? h("th", {
      "class": "gutter"
    }) : ''])])]);
  },

  props: {
    fixed: String,
    store: {
      required: true
    },
    summaryMethod: Function,
    sumText: String,
    border: Boolean,
    defaultSort: {
      type: Object,

      default() {
        return {
          prop: '',
          order: ''
        };
      }

    }
  },
  computed: {
    table() {
      return this.$parent;
    },

    isAllSelected() {
      return this.store.states.isAllSelected;
    },

    columnsCount() {
      return this.store.states.columns.length;
    },

    leftFixedCount() {
      return this.store.states.fixedColumns.length;
    },

    rightFixedCount() {
      return this.store.states.rightFixedColumns.length;
    },

    columns() {
      return this.store.states.columns;
    },

    hasGutter() {
      return !this.fixed && this.tableLayout.gutterWidth;
    }

  },
  methods: {
    isCellHidden(index, columns) {
      if (this.fixed === true || this.fixed === 'left') {
        return index >= this.leftFixedCount;
      } else if (this.fixed === 'right') {
        let before = 0;

        for (let i = 0; i < index; i++) {
          before += columns[i].colSpan;
        }

        return before < this.columnsCount - this.rightFixedCount;
      } else {
        return index < this.leftFixedCount || index >= this.columnsCount - this.rightFixedCount;
      }
    }

  }
});
// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/table/table.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
;






let tableIdSeed = 1;
/* harmony default export */ var tablevue_type_script_lang_js_ = ({
  name: 'bk-table',
  components: {
    TableHeader: table_header,
    TableFooter: table_footer,
    TableBody: table_body
  },
  props: {
    data: {
      type: Array,
      default: function () {
        return [];
      }
    },
    size: {
      type: String,
      default: 'small',

      validator(val) {
        return ['small', 'medium', 'large'].includes(val);
      }

    },
    height: [String, Number],
    maxHeight: [String, Number],
    fit: {
      type: Boolean,
      default: true
    },
    stripe: Boolean,
    border: Boolean,
    outerBorder: {
      type: Boolean,
      default: true
    },
    rowBorder: {
      type: Boolean,
      default: true
    },
    colBorder: Boolean,
    rowKey: [String, Function],
    context: {
      type: Object,
      default: () => ({})
    },
    showHeader: {
      type: Boolean,
      default: true
    },
    showSummary: Boolean,
    sumText: String,
    summaryMethod: Function,
    rowClassName: [String, Function],
    rowStyle: [Object, Function],
    cellClassName: [String, Function],
    cellStyle: [Object, Function],
    headerBorder: {
      type: Boolean,
      default: false
    },
    headerRowClassName: [String, Function],
    headerRowStyle: [Object, Function],
    headerCellClassName: [String, Function],
    headerCellStyle: [Object, Function],
    highlightCurrentRow: Boolean,
    currentRowKey: [String, Number],
    emptyText: {
      type: String,
      default: '暂无数据'
    },
    emptyBlockClassName: String,
    expandRowKeys: Array,
    defaultExpandAll: Boolean,
    defaultSort: Object,
    spanMethod: Function,
    selectOnIndeterminate: {
      type: Boolean,
      default: true
    },
    pagination: Object,
    showPaginationInfo: {
      type: Boolean,
      default: true
    },
    // 外部设置的 class name
    extCls: {
      type: String,
      default: ''
    },
    setting: {
      type: Object,
      default: () => ({
        columns: []
      }),

      validator(setting) {
        return Array.isArray(setting.columns);
      }

    },
    cellAttributes: [Function, Object],
    headerCellAttributes: [Function, Object]
  },

  data() {
    const store = new table_store(this, {
      rowKey: this.rowKey,
      defaultExpandAll: this.defaultExpandAll,
      selectOnIndeterminate: this.selectOnIndeterminate
    });
    const layout = new table_layout({
      store,
      table: this,
      fit: this.fit,
      showHeader: this.showHeader
    });
    return {
      layout,
      store,
      isHidden: false,
      renderExpanded: null,
      resizeProxyVisible: false,
      resizeState: {
        width: null,
        height: null
      },
      // 是否拥有多级表头
      isGroup: false,
      scrollPosition: 'left'
    };
  },

  computed: {
    tableSize() {
      return this.size;
    },

    tableBorder() {
      return this.border || this.rowBorder && this.colBorder;
    },

    tableRowBorder() {
      return this.border || this.rowBorder;
    },

    tableColBorder() {
      return this.border || this.colBorder;
    },

    bodyWrapper() {
      return this.$refs.bodyWrapper;
    },

    shouldUpdateHeight() {
      return this.height || this.maxHeight || this.fixedColumns.length > 0 || this.rightFixedColumns.length > 0;
    },

    selection() {
      return this.store.states.selection;
    },

    columns() {
      return this.store.states.columns;
    },

    tableData() {
      return this.store.states.data;
    },

    fixedColumns() {
      return this.store.states.fixedColumns;
    },

    rightFixedColumns() {
      return this.store.states.rightFixedColumns;
    },

    notOnlySetting() {
      return this.rightFixedColumns.some(column => column.type !== 'setting');
    },

    bodyWidth() {
      const {
        bodyWidth,
        scrollY,
        gutterWidth
      } = this.layout;
      return bodyWidth ? bodyWidth - (scrollY ? gutterWidth : 0) + 'px' : '';
    },

    bodyHeight() {
      if (this.height) {
        return {
          height: this.layout.bodyHeight ? this.layout.bodyHeight + 'px' : ''
        };
      } else if (this.maxHeight) {
        return {
          'max-height': (this.showHeader ? this.maxHeight - this.layout.headerHeight - this.layout.footerHeight - this.layout.paginationHeight : this.maxHeight - this.layout.footerHeight - this.layout.paginationHeight) + 'px'
        };
      }

      return {};
    },

    fixedBodyHeight() {
      if (this.height) {
        return {
          height: this.layout.fixedBodyHeight ? this.layout.fixedBodyHeight + 'px' : ''
        };
      } else if (this.maxHeight) {
        let maxHeight = this.layout.scrollX ? this.maxHeight - this.layout.gutterWidth : this.maxHeight;

        if (this.showHeader) {
          maxHeight -= this.layout.headerHeight;
        }

        maxHeight -= this.layout.footerHeight;
        maxHeight -= this.layout.paginationHeight;
        return {
          'max-height': maxHeight + 'px'
        };
      }

      return {};
    },

    fixedHeight() {
      if (this.maxHeight) {
        if (this.showSummary) {
          return {
            bottom: this.layout.paginationHeight + 'px'
          };
        }

        return {
          bottom: (this.layout.scrollX && this.data.length ? this.layout.gutterWidth + this.layout.paginationHeight : this.layout.paginationHeight) + 'px'
        };
      } else {
        if (this.showSummary) {
          return {
            height: this.layout.tableHeight ? this.layout.tableHeight + 'px' : ''
          };
        }

        return {
          height: this.layout.viewportHeight ? this.layout.viewportHeight + 'px' : ''
        };
      }
    },

    rightFixedHeight() {
      if (this.notOnlySetting) {
        return this.fixedHeight;
      }

      return {
        height: this.layout.headerHeight + 'px'
      };
    },

    showPagination() {
      return this.data.length && this.pagination && this.pagination.count > 0;
    },

    showSelectionCount() {
      return this.store.states._columns.some(column => column.type === 'selection');
    }

  },
  watch: {
    height: {
      immediate: true,

      handler(value) {
        this.layout.setHeight(value);
      }

    },
    maxHeight: {
      immediate: true,

      handler(value) {
        this.layout.setMaxHeight(value);
      }

    },

    currentRowKey(newVal) {
      this.store.setCurrentRowKey(newVal);
    },

    data: {
      immediate: true,

      handler(value) {
        this.store.commit('setData', value);

        if (this.$ready) {
          this.$nextTick(() => {
            this.doLayout();
          });
        }
      }

    },
    expandRowKeys: {
      immediate: true,

      handler(newVal) {
        if (newVal) {
          this.store.setExpandRowKeys(newVal);
        }
      }

    }
  },

  created() {
    this.tableId = 'bk-table-' + tableIdSeed++;
    this.debouncedUpdateLayout = debounce(50, () => this.doLayout());
  },

  mounted() {
    this.bindEvents();
    this.store.updateColumns();
    this.doLayout();
    this.resizeState = {
      width: this.$el.offsetWidth,
      height: this.$el.offsetHeight
    }; // init filters

    this.store.states.columns.forEach(column => {
      if (column.filteredValue && column.filteredValue.length) {
        this.store.commit('filterChange', {
          column,
          values: column.filteredValue,
          silent: true
        });
      }
    });
    this.$ready = true;
  },

  beforeDestroy() {
    this.$destroyed = true;
    if (this.resizeListener) removeResizeListener(this.$el, this.resizeListener);
  },

  methods: {
    setCurrentRow(row) {
      this.store.commit('setCurrentRow', row);
    },

    toggleRowSelection(row, selected) {
      this.store.toggleRowSelection(row, selected);
      this.store.updateAllSelected();
    },

    toggleRowExpansion(row, expanded) {
      this.store.toggleRowExpansion(row, expanded);
    },

    clearSelection() {
      this.store.clearSelection();
    },

    clearFilter() {
      this.store.clearFilter();
    },

    clearSort() {
      this.store.clearSort();
    },

    handleMouseLeave() {
      this.store.commit('setHoverRow', null);
      if (this.hoverState) this.hoverState = null;
    },

    updateScrollY() {
      this.layout.updateScrollY();
      this.layout.updateColumnsWidth();
    },

    bindEvents() {
      const {
        headerWrapper,
        footerWrapper,
        tableHeader
      } = this.$refs;
      const refs = this.$refs;
      const self = this;
      this.bodyWrapper.addEventListener('scroll', function () {
        if (headerWrapper) {
          headerWrapper.scrollLeft = this.scrollLeft;
          Object.values(tableHeader.filterPanels).forEach(filterPanel => {
            filterPanel.instance && filterPanel.instance.hide(0);
          });
        }

        if (footerWrapper) footerWrapper.scrollLeft = this.scrollLeft;
        if (refs.fixedBodyWrapper) refs.fixedBodyWrapper.scrollTop = this.scrollTop;
        if (refs.rightFixedBodyWrapper) refs.rightFixedBodyWrapper.scrollTop = this.scrollTop;
        const maxScrollLeftPosition = this.scrollWidth - this.offsetWidth - 1;
        const scrollLeft = this.scrollLeft;

        if (scrollLeft >= maxScrollLeftPosition) {
          self.scrollPosition = 'right';
        } else if (scrollLeft === 0) {
          self.scrollPosition = 'left';
        } else {
          self.scrollPosition = 'middle';
        }
      });

      if (this.fit) {
        addResizeListener(this.$el, this.resizeListener);
      }
    },

    resizeListener() {
      if (!this.$ready) return;
      let shouldUpdateLayout = false;
      const el = this.$el;
      const {
        width: oldWidth,
        height: oldHeight
      } = this.resizeState;
      const width = el.offsetWidth;

      if (oldWidth !== width) {
        shouldUpdateLayout = true;
      }

      const height = el.offsetHeight;

      if ((this.height || this.shouldUpdateHeight) && oldHeight !== height) {
        shouldUpdateLayout = true;
      }

      if (shouldUpdateLayout) {
        this.resizeState.width = width;
        this.resizeState.height = height;
        this.doLayout();
      }
    },

    doLayout() {
      if (this.$destroyed) return;
      this.layout.updateColumnsWidth();

      if (this.shouldUpdateHeight) {
        this.layout.updateElsHeight();
      }
    },

    sort(prop, order) {
      this.store.commit('sort', {
        prop,
        order
      });
    },

    toggleAllSelection() {
      this.store.commit('toggleAllSelection');
    }

  }
});
// CONCATENATED MODULE: ./src/views/table/table.vue?vue&type=script&lang=js&
; /* harmony default export */ var table_tablevue_type_script_lang_js_ = (tablevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/table/table.vue?vue&type=style&index=0&id=44e11ba3&scoped=true&lang=css&

// CONCATENATED MODULE: ./src/views/table/table.vue
;


;


/* normalize component */

var table_component = normalizeComponent(
  table_tablevue_type_script_lang_js_,
  tablevue_type_template_id_44e11ba3_scoped_true_render,
  tablevue_type_template_id_44e11ba3_scoped_true_staticRenderFns,
  false,
  null,
  "44e11ba3",
  null
  
)

/* hot reload */
if (false) { var table_api; }
table_component.options.__file = "src/views/table/table.vue"
/* harmony default export */ var table = (table_component.exports);
// CONCATENATED MODULE: ./src/views/table/table-column.js
;
let columnIdSeed = 1;
const defaults = {
  default: {
    order: ''
  },
  selection: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    align: 'is-center',
    headerAlign: 'is-center',
    order: '',
    className: 'bk-table-column-selection'
  },
  expand: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    align: 'is-center',
    headerAlign: 'is-center',
    order: '',
    className: 'bk-table-column-expand'
  },
  index: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    align: 'is-center',
    headerAlign: 'is-center',
    order: '',
    className: 'bk-table-column-index'
  },
  setting: {
    width: 42,
    minWidth: 42,
    realWidth: 42,
    headerAlign: 'is-center',
    order: '',
    className: 'bk-table-column-setting',
    icon: 'bk-icon icon-cog-shape'
  }
};
const forced = {
  selection: {
    renderHeader: function (h, {
      store
    }) {
      return '';
    },
    renderCell: function (h, {
      row,
      column,
      store,
      $index
    }) {
      const disabled = column.selectable ? !column.selectable.call(null, row, $index) : false;
      return '';
    },
    sortable: false,
    resizable: false
  },
  index: {
    renderHeader: function (h, {
      column
    }) {
      return column.label || '#';
    },
    renderCell: function (h, {
      $index,
      column
    }) {
      let i = $index + 1;
      const index = column.index;

      if (typeof index === 'number') {
        i = $index + index;
      } else if (typeof index === 'function') {
        i = index($index);
      }

      return h("div", [i]);
    },
    sortable: false
  },
  expand: {
    renderHeader: function (h, {
      column
    }) {
      return column.label || '';
    },
    renderCell: function (h, data, proxy) {
      const {
        row,
        store
      } = data;
      const expanded = store.states.expandRows.indexOf(row) > -1;
      return h("div", {
        "class": 'bk-table-expand-icon ' + (expanded ? 'bk-table-expand-icon-expanded' : ''),
        "on": {
          "click": event => proxy.handleExpandClick({ ...data,
            event
          })
        }
      }, [h("i", {
        "class": 'bk-icon icon-play-shape'
      })]);
    },
    sortable: false,
    resizable: false,
    className: 'bk-table-expand-column'
  },
  setting: {
    renderHeader: function (h, {
      column,
      fixed
    }) {
      return '';
    },
    renderCell: function (h, {
      row,
      store
    }, proxy) {
      return '';
    },
    sortable: false,
    resizable: false,
    fixed: 'right',
    align: 'center'
  }
};

const getDefaultColumn = function (type, options) {
  const column = { ...defaults[type || 'default']
  };

  for (const name in options) {
    if (options.hasOwnProperty(name)) {
      const value = options[name];

      if (typeof value !== 'undefined') {
        column[name] = value;
      }
    }
  }

  if (!column.minWidth) {
    column.minWidth = 80;
  }

  column.realWidth = column.width === undefined ? column.minWidth : column.width;
  return column;
};

const DEFAULT_RENDER_CELL = function (h, {
  row,
  column,
  $index
}) {
  const property = column.property;
  const value = property && getPropByPath(row, property).v;

  if (column && column.formatter) {
    return column.formatter(row, column, value, $index);
  }

  return value;
};

const parseWidth = width => {
  if (width !== undefined) {
    width = parseInt(width, 10);

    if (isNaN(width)) {
      width = null;
    }
  }

  return width;
};

const parseMinWidth = minWidth => {
  if (minWidth !== undefined) {
    minWidth = parseInt(minWidth, 10);

    if (isNaN(minWidth)) {
      minWidth = 80;
    }
  }

  return minWidth;
};

/* harmony default export */ var table_column = ({
  name: 'bk-table-column',
  props: {
    type: {
      type: String,
      default: 'default'
    },
    label: String,
    className: String,
    labelClassName: String,
    property: String,
    prop: String,
    width: {},
    minWidth: {},
    renderHeader: Function,
    sortable: {
      type: [String, Boolean],
      default: false
    },
    sortMethod: Function,
    sortBy: [String, Function, Array],
    resizable: {
      type: Boolean,
      default: true
    },
    context: {},
    columnKey: String,
    align: String,
    headerAlign: String,
    showOverflowTooltip: [Boolean, Object],
    fixed: [Boolean, String],
    formatter: Function,
    selectable: Function,
    reserveSelection: Boolean,
    filterMethod: Function,
    filteredValue: Array,
    filters: Array,
    filterPlacement: String,
    filterMultiple: {
      type: Boolean,
      default: true
    },
    filterSearchable: Boolean,
    index: [Number, Function],
    sortOrders: {
      type: Array,

      default() {
        return ['ascending', 'descending', null];
      },

      validator(val) {
        return val.every(order => ['ascending', 'descending', null].indexOf(order) > -1);
      }

    },
    beforeExpandChange: Function
  },

  data() {
    return {
      isSubColumn: false,
      columns: []
    };
  },

  beforeCreate() {
    this.row = {};
    this.column = {};
    this.$index = 0;
  },

  computed: {
    owner() {
      let parent = this.$parent;

      while (parent && !parent.tableId) {
        parent = parent.$parent;
      }

      return parent;
    },

    columnOrTableParent() {
      let parent = this.$parent;

      while (parent && !parent.tableId && !parent.columnId) {
        parent = parent.$parent;
      }

      return parent;
    }

  },

  created() {
    const h = this.$createElement;
    this.customRender = this.$options.render;

    if (this.type !== 'setting') {
      this.$options.render = h => h('div', this.$slots.default);
    } else {
      this.$options.render = h => {
        this.columnConfig.settingContent = h => {
          return this.$slots.default;
        };

        return h('div');
      };
    }

    const parent = this.columnOrTableParent;
    const owner = this.owner;
    this.isSubColumn = owner !== parent;
    this.columnId = (parent.tableId || parent.columnId) + '-column-' + columnIdSeed++;
    const type = this.type;
    const width = parseWidth(this.width);
    const minWidth = parseMinWidth(this.minWidth);
    const isColumnGroup = false;
    const column = getDefaultColumn(type, {
      id: this.columnId,
      columnKey: this.columnKey,
      label: this.label,
      className: this.className,
      labelClassName: this.labelClassName,
      property: this.prop || this.property,
      type,
      renderCell: null,
      renderHeader: this.renderHeader,
      minWidth,
      width,
      isColumnGroup,
      context: this.context,
      align: this.align ? 'is-' + this.align : undefined,
      headerAlign: this.headerAlign ? 'is-' + this.headerAlign : this.align ? 'is-' + this.align : undefined,
      sortable: this.sortable === '' ? true : this.sortable,
      sortMethod: this.sortMethod,
      sortBy: this.sortBy,
      resizable: this.resizable,
      showOverflowTooltip: this.showOverflowTooltip,
      formatter: this.formatter,
      selectable: this.selectable,
      reserveSelection: this.reserveSelection,
      fixed: this.fixed === '' ? true : this.fixed,
      filterMethod: this.filterMethod,
      filters: this.filters,
      filterable: this.filters,
      filterMultiple: this.filterMultiple,
      filterOpened: false,
      filteredValue: this.filteredValue || [],
      filterPlacement: this.filterPlacement || '',
      filterSearchable: this.filterSearchable,
      index: this.index,
      sortOrders: this.sortOrders,
      order: null,
      beforeExpandChange: this.beforeExpandChange
    });
    const source = forced[type] || {};
    Object.keys(source).forEach(prop => {
      let value = source[prop];

      if (value !== undefined) {
        if (prop === 'renderHeader') {
          if (type === 'selection' && column[prop]) {
            console.warn("[Magic Warn][TableColumn]Selection column doesn't allow to set render-header function.");
          } else {
            value = column[prop] || value;
          }
        }

        column[prop] = prop === 'className' ? `${column[prop]} ${value}` : value;
      }
    });
    this.columnConfig = column;
    let renderCell = column.renderCell;

    const _self = this;

    if (type === 'expand') {
      owner.renderExpanded = function (h, data) {
        return _self.$scopedSlots.default ? _self.$scopedSlots.default(data) : _self.$slots.default;
      };

      column.renderCell = function (h, data) {
        return h("div", {
          "class": "cell"
        }, [renderCell(h, data, this._renderProxy)]);
      };

      return;
    }

    if (type === 'setting') {
      column.settingContent = function (h) {
        return _self.$slots.default;
      };
    }

    column.renderCell = function (h, data) {
      if (_self.$scopedSlots.default) {
        renderCell = () => _self.$scopedSlots.default(data);
      }

      if (!renderCell) {
        renderCell = DEFAULT_RENDER_CELL;
      }

      if (_self.showOverflowTooltip) {
        const config = typeof _self.showOverflowTooltip === 'object' ? _self.showOverflowTooltip : {};
        return h("div", {
          "class": "cell",
          "directives": [{
            name: "bk-overflow-tips",
            value: config
          }]
        }, [renderCell(h, data)]);
      }

      return h("div", {
        "class": "cell"
      }, [renderCell(h, data)]);
    };
  },

  destroyed() {
    if (!this.$parent) return;
    const parent = this.$parent;
    this.owner.store.commit('removeColumn', this.columnConfig, this.isSubColumn ? parent.columnConfig : null);
  },

  watch: {
    label(newVal) {
      if (this.columnConfig) {
        this.columnConfig.label = newVal;
      }
    },

    prop(newVal) {
      if (this.columnConfig) {
        this.columnConfig.property = newVal;
      }
    },

    property(newVal) {
      if (this.columnConfig) {
        this.columnConfig.property = newVal;
      }
    },

    filters(newVal) {
      if (this.columnConfig) {
        this.columnConfig.filters = newVal;
      }
    },

    filterMultiple(newVal) {
      if (this.columnConfig) {
        this.columnConfig.filterMultiple = newVal;
      }
    },

    align(newVal) {
      if (this.columnConfig) {
        this.columnConfig.align = newVal ? 'is-' + newVal : null;

        if (!this.headerAlign) {
          this.columnConfig.headerAlign = newVal ? 'is-' + newVal : null;
        }
      }
    },

    headerAlign(newVal) {
      if (this.columnConfig) {
        this.columnConfig.headerAlign = 'is-' + (newVal || this.align);
      }
    },

    width(newVal) {
      if (this.columnConfig) {
        this.columnConfig.width = parseWidth(newVal);
        this.owner.store.scheduleLayout();
      }
    },

    minWidth(newVal) {
      if (this.columnConfig) {
        this.columnConfig.minWidth = parseMinWidth(newVal);
        this.owner.store.scheduleLayout();
      }
    },

    fixed(newVal) {
      if (this.columnConfig) {
        this.columnConfig.fixed = newVal;
        this.owner.store.scheduleLayout(true);
      }
    },

    sortable(newVal) {
      if (this.columnConfig) {
        this.columnConfig.sortable = newVal;
      }
    },

    index(newVal) {
      if (this.columnConfig) {
        this.columnConfig.index = newVal;
      }
    },

    formatter(newVal) {
      if (this.columnConfig) {
        this.columnConfig.formatter = newVal;
      }
    },

    className(newVal) {
      if (this.columnConfig) {
        this.columnConfig.className = newVal;
      }
    },

    labelClassName(newVal) {
      if (this.columnConfig) {
        this.columnConfig.labelClassName = newVal;
      }
    }

  },

  mounted() {
    const owner = this.owner;
    const parent = this.columnOrTableParent;
    let columnIndex;

    if (!this.isSubColumn) {
      columnIndex = [].indexOf.call(parent.$refs.hiddenColumns.children, this.$el);
    } else {
      columnIndex = [].indexOf.call(parent.$el.children, this.$el);
    }

    owner.store.commit('insertColumn', this.columnConfig, columnIndex, this.isSubColumn ? parent.columnConfig : null);
  }

});
// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/table.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
;


/* harmony default export */ var views_tablevue_type_script_lang_js_ = ({
  components: {
    cellClick: cellClick,
    bkTable: table,
    bkTableColumn: table_column
  },
  props: {
    tableData: {
      type: Object,
      required: true
    },
    tableLoading: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    showIndex() {
      return this.tableData.list && !!this.tableData.list.length;
    }

  }
});
// CONCATENATED MODULE: ./src/views/table.vue?vue&type=script&lang=js&
; /* harmony default export */ var src_views_tablevue_type_script_lang_js_ = (views_tablevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/table.vue?vue&type=style&index=0&id=657d4b24&lang=less&scoped=true&

// CONCATENATED MODULE: ./src/views/table.vue
;


;


/* normalize component */

var views_table_component = normalizeComponent(
  src_views_tablevue_type_script_lang_js_,
  tablevue_type_template_id_657d4b24_scoped_true_render,
  tablevue_type_template_id_657d4b24_scoped_true_staticRenderFns,
  false,
  null,
  "657d4b24",
  null
  
)

/* hot reload */
if (false) { var views_table_api; }
views_table_component.options.__file = "src/views/table.vue"
/* harmony default export */ var views_table = (views_table_component.exports);
// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/chart.vue?vue&type=template&id=3a445f34&scoped=true&
var chartvue_type_template_id_3a445f34_scoped_true_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "bkchart-panel-container bk-scroll-x bk-scroll-y" },
    [
      _c(
        "div",
        { staticClass: "bkchart-panel-settings" },
        [
          _c(
            "bk-form-item",
            { attrs: { label: "图表类型", required: true } },
            [
              _c(
                "bk-select",
                {
                  attrs: { "prefix-icon": _vm.calcActiveTypeIconName },
                  model: {
                    value: _vm.formData.chartType,
                    callback: function($$v) {
                      _vm.$set(_vm.formData, "chartType", $$v)
                    },
                    expression: "formData.chartType"
                  }
                },
                [
                  _vm._l(_vm.calcChartTypeList, function(option) {
                    return _c(
                      "bk-option",
                      {
                        key: option.id,
                        attrs: { id: option.id, name: option.name }
                      },
                      [
                        _c("i", {
                          class: ["bkcp-icon", "bkcp-" + option.icon],
                          staticStyle: { "font-size": "12px" }
                        }),
                        _vm._v(" "),
                        _c("span", { staticStyle: { "font-size": "12px" } }, [
                          _vm._v(_vm._s(option.name))
                        ])
                      ]
                    )
                  }),
                  _vm._v(" "),
                  _c(
                    "span",
                    {
                      staticClass: "chart-type-help",
                      attrs: { slot: "group-append", id: "chart-type-help" },
                      slot: "group-append"
                    },
                    [_c("i", { staticClass: "bkcp-icon bkcp-help-3" })]
                  )
                ],
                2
              )
            ],
            1
          ),
          _vm._v(" "),
          _vm.selecttedConfig.yAxis.enabled
            ? [
                _c(
                  "bk-form-item",
                  {
                    attrs: {
                      label: _vm.selecttedConfig.yAxis.title,
                      tip: _vm.selectedTypeTips.y
                    }
                  },
                  [
                    _c(
                      "bk-select",
                      {
                        attrs: { searchable: true },
                        on: {
                          change: function(e) {
                            return _vm.handleInputChanged(e, "yTitle")
                          }
                        },
                        model: {
                          value: _vm.formData.yField,
                          callback: function($$v) {
                            _vm.$set(_vm.formData, "yField", $$v)
                          },
                          expression: "formData.yField"
                        }
                      },
                      _vm._l(_vm.calcYfields, function(option) {
                        return _c("bk-option", {
                          key: option,
                          attrs: { id: option, name: option }
                        })
                      }),
                      1
                    )
                  ],
                  1
                )
              ]
            : _vm._e(),
          _vm._v(" "),
          _vm.selecttedConfig.xAxis.enabled
            ? [
                _c(
                  "bk-form-item",
                  {
                    attrs: {
                      tip: _vm.selectedTypeTips.x,
                      label: _vm.selecttedConfig.xAxis.title
                    }
                  },
                  [
                    _c(
                      "bk-select",
                      {
                        attrs: { searchable: true },
                        on: {
                          change: function(e) {
                            return _vm.handleInputChanged(e, "xTitle")
                          }
                        },
                        model: {
                          value: _vm.formData.xField,
                          callback: function($$v) {
                            _vm.$set(_vm.formData, "xField", $$v)
                          },
                          expression: "formData.xField"
                        }
                      },
                      _vm._l(_vm.calcXfields, function(option) {
                        return _c("bk-option", {
                          key: option,
                          attrs: { id: option, name: option }
                        })
                      }),
                      1
                    )
                  ],
                  1
                )
              ]
            : _vm._e(),
          _vm._v(" "),
          _vm.selecttedConfig.size && _vm.selecttedConfig.size.enabled
            ? [
                _c(
                  "bk-form-item",
                  {
                    attrs: {
                      label: _vm.selecttedConfig.size.title,
                      tip: _vm.selectedTypeTips.size
                    }
                  },
                  [
                    _c(
                      "bk-select",
                      {
                        attrs: { searchable: true },
                        model: {
                          value: _vm.formData.size,
                          callback: function($$v) {
                            _vm.$set(_vm.formData, "size", $$v)
                          },
                          expression: "formData.size"
                        }
                      },
                      _vm._l(_vm.columns, function(option) {
                        return _c("bk-option", {
                          key: option,
                          attrs: { id: option, name: option }
                        })
                      }),
                      1
                    )
                  ],
                  1
                )
              ]
            : _vm._e(),
          _vm._v(" "),
          _c(
            "div",
            {
              staticClass: "settings-advance",
              on: { click: _vm.handleAdvanceClick }
            },
            [
              _c("span", [_vm._v("高级设置")]),
              _c("i", { class: ["bkcp-icon", _vm.activeIconName] })
            ]
          ),
          _vm._v(" "),
          _vm.advanceSetting
            ? [
                _vm.selecttedConfig.order && !_vm.formData.groupBy
                  ? [
                      _c("bk-form-item", { attrs: { label: "排序" } }, [
                        _c("div", { staticClass: "bkcp-sort-items" }, [
                          _c(
                            "span",
                            {
                              class: [
                                "bkcp-sort-item",
                                { active: _vm.formData.order === "none" }
                              ],
                              on: {
                                click: function($event) {
                                  return _vm.handleSortClick("none")
                                }
                              }
                            },
                            [_c("i", { staticClass: "bkcp-icon bkcp-sort-3" })]
                          ),
                          _vm._v(" "),
                          _c(
                            "span",
                            {
                              class: [
                                "bkcp-sort-item",
                                { active: _vm.formData.order === "desc" }
                              ],
                              on: {
                                click: function($event) {
                                  return _vm.handleSortClick("desc")
                                }
                              }
                            },
                            [_c("i", { staticClass: "bkcp-icon bkcp-sort-1" })]
                          ),
                          _vm._v(" "),
                          _c(
                            "span",
                            {
                              class: [
                                "bkcp-sort-item",
                                { active: _vm.formData.order === "asc" }
                              ],
                              on: {
                                click: function($event) {
                                  return _vm.handleSortClick("asc")
                                }
                              }
                            },
                            [_c("i", { staticClass: "bkcp-icon bkcp-sort-2" })]
                          )
                        ])
                      ])
                    ]
                  : _vm._e(),
                _vm._v(" "),
                _vm.selecttedConfig.group
                  ? [
                      _c(
                        "bk-form-item",
                        {
                          attrs: {
                            label: "分组",
                            tip: _vm.selectedTypeTips.groupBy
                          }
                        },
                        [
                          _c(
                            "bk-select",
                            {
                              attrs: { searchable: true },
                              model: {
                                value: _vm.formData.groupBy,
                                callback: function($$v) {
                                  _vm.$set(_vm.formData, "groupBy", $$v)
                                },
                                expression: "formData.groupBy"
                              }
                            },
                            _vm._l(_vm.calcGroupByFields, function(option) {
                              return _c("bk-option", {
                                key: option,
                                attrs: { id: option, name: option }
                              })
                            }),
                            1
                          )
                        ],
                        1
                      )
                    ]
                  : _vm._e(),
                _vm._v(" "),
                _c("bk-form-item", { attrs: { label: "标题" } }, [
                  _c("input", {
                    staticClass: "bkcp-input-text",
                    domProps: { value: _vm.formData.title },
                    on: {
                      change: function(e) {
                        return _vm.handleInputChanged(e, "title")
                      },
                      keydown: _vm.handleKeyEvent,
                      keyup: _vm.handleKeyEvent
                    }
                  })
                ]),
                _vm._v(" "),
                _vm.selecttedConfig.xAxis.isLabel
                  ? [
                      _c("bk-form-item", { attrs: { label: "X轴标签" } }, [
                        _c("input", {
                          staticClass: "bkcp-input-text",
                          domProps: { value: _vm.formData.xTitle },
                          on: {
                            change: function(e) {
                              return _vm.handleInputChanged(e, "xTitle")
                            },
                            keydown: _vm.handleKeyEvent,
                            keyup: _vm.handleKeyEvent
                          }
                        })
                      ])
                    ]
                  : _vm._e(),
                _vm._v(" "),
                _vm.selecttedConfig.yAxis.isLabel
                  ? [
                      _c("bk-form-item", { attrs: { label: "Y轴标签" } }, [
                        _c("input", {
                          staticClass: "bkcp-input-text",
                          domProps: { value: _vm.formData.yTitle },
                          on: {
                            change: function(e) {
                              return _vm.handleInputChanged(e, "yTitle")
                            },
                            keydown: _vm.handleKeyEvent,
                            keyup: _vm.handleKeyEvent
                          }
                        })
                      ])
                    ]
                  : _vm._e()
              ]
            : _vm._e()
        ],
        2
      ),
      _vm._v(" "),
      _c("div", { staticClass: "bkchart-panel-canvas" }, [
        _c(
          "canvas",
          _vm._b({ ref: "refChartCanvas" }, "canvas", _vm.calcStyle, false)
        )
      ]),
      _vm._v(" "),
      _c("div", { attrs: { id: "chart_help_content" } }, [
        _c("div", { staticClass: "chart-help-container" }, [
          _c("div", { staticClass: "title" }, [
            _vm._v(_vm._s(_vm.selectedTypeHelp.title))
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "content" }, [
            _vm._v(
              "\n                " +
                _vm._s(_vm.selectedTypeHelp.content) +
                "\n            "
            )
          ])
        ])
      ])
    ]
  )
}
var chartvue_type_template_id_3a445f34_scoped_true_staticRenderFns = []
chartvue_type_template_id_3a445f34_scoped_true_render._withStripped = true


// CONCATENATED MODULE: ./src/views/chart.vue?vue&type=template&id=3a445f34&scoped=true&

// EXTERNAL MODULE: ../../node_modules/@tencent/bkchart.js/dist/bkcharts.js
var bkcharts = __webpack_require__(958);
var bkcharts_default = /*#__PURE__*/__webpack_require__.n(bkcharts);
// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/select/select.vue?vue&type=template&id=748b4645&scoped=true&
var selectvue_type_template_id_748b4645_scoped_true_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      ref: "bkSelect",
      staticClass: "bk-select",
      class: [
        {
          "is-focus": _vm.focus,
          "is-disabled": _vm.disabled,
          "is-readonly": _vm.readonly,
          "is-loading": _vm.loading,
          "is-unselected": _vm.isUnselected,
          "is-default-trigger": !_vm.$scopedSlots.trigger,
          "has-prefix-icon": !!_vm.prefixIcon
        },
        _vm.wrapperCls,
        _vm.fontSizeCls,
        _vm.extCls
      ],
      attrs: { "data-placeholder": _vm.localPlaceholder, tabindex: "0" },
      on: { click: _vm.show }
    },
    [
      !_vm.$scopedSlots.trigger
        ? [
            _vm.loading
              ? void 0
              : [
                  _c("div", { staticClass: "select-input-container" }, [
                    _c(
                      "div",
                      { staticClass: "select-input-section" },
                      [
                        _vm.prefixIcon
                          ? _c("i", {
                              class: ["bk-select-prefix-icon", _vm.prefixIcon]
                            })
                          : _vm._e(),
                        _vm._v(" "),
                        _vm.multiple && _vm.displayTag
                          ? _c("bk-select-tag")
                          : _c(
                              "div",
                              {
                                staticClass: "bk-select-name",
                                class: _vm.fontSizeCls,
                                attrs: { title: _vm.selectedName }
                              },
                              [
                                _vm._v(
                                  "\n                        " +
                                    _vm._s(_vm.selectedName) +
                                    "\n                    "
                                )
                              ]
                            )
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _vm.clearable &&
                    !_vm.isUnselected &&
                    !_vm.disabled &&
                    !_vm.readonly
                      ? _c("i", {
                          staticClass:
                            "bk-select-clear bkcp-icon bkcp-close-circle-shape",
                          on: {
                            click: function($event) {
                              $event.preventDefault()
                              $event.stopPropagation()
                              return _vm.reset($event)
                            }
                          }
                        })
                      : _vm._e(),
                    _vm._v(" "),
                    _c("i", {
                      staticClass: "bk-select-angle bkcp-icon bkcp-angle-down"
                    })
                  ]),
                  _vm._v(" "),
                  _vm._t("group-append")
                ]
          ]
        : _vm._e(),
      _vm._v(" "),
      _c(
        "div",
        {
          ref: "selectDropdown",
          staticClass: "bkcp bk-select-dropdown",
          attrs: { id: "selectDropdown" }
        },
        [
          _c(
            "div",
            {
              staticClass: "bk-select-dropdown-content",
              class: [_vm.popoverCls, _vm.extPopoverCls],
              style: _vm.popoverStyle
            },
            [
              _vm.searchable
                ? _c("div", { staticClass: "bk-select-search-wrapper" }, [
                    _c("i", { staticClass: "left-icon bkcp-icon bkcp-search" }),
                    _vm._v(" "),
                    _c("input", {
                      directives: [
                        {
                          name: "model",
                          rawName: "v-model",
                          value: _vm.searchValue,
                          expression: "searchValue"
                        }
                      ],
                      ref: "searchInput",
                      staticClass: "bk-select-search-input",
                      class: _vm.fontSizeCls,
                      attrs: {
                        type: "text",
                        placeholder: _vm.localSearchPlaceholder
                      },
                      domProps: { value: _vm.searchValue },
                      on: {
                        keydown: [
                          function($event) {
                            if (
                              !$event.type.indexOf("key") &&
                              _vm._k(
                                $event.keyCode,
                                "tab",
                                9,
                                $event.key,
                                "Tab"
                              )
                            ) {
                              return null
                            }
                            return _vm.handleClose($event)
                          },
                          function($event) {
                            if (
                              !$event.type.indexOf("key") &&
                              _vm._k($event.keyCode, "esc", 27, $event.key, [
                                "Esc",
                                "Escape"
                              ])
                            ) {
                              return null
                            }
                            $event.stopPropagation()
                            $event.preventDefault()
                            return _vm.handleClose($event)
                          }
                        ],
                        input: function($event) {
                          if ($event.target.composing) {
                            return
                          }
                          _vm.searchValue = $event.target.value
                        }
                      }
                    })
                  ])
                : _vm._e(),
              _vm._v(" "),
              _c(
                "div",
                {
                  staticClass: "bk-options-wrapper",
                  style: { maxHeight: _vm.scrollHeight + "px" }
                },
                [
                  _c(
                    "ul",
                    {
                      ref: "optionList",
                      staticClass: "bk-options",
                      class: {
                        "bk-options-single": !_vm.multiple
                      },
                      style: { maxHeight: _vm.scrollHeight + "px" }
                    },
                    [
                      _vm.multiple && _vm.showSelectAll && !_vm.searchValue
                        ? _c("bk-option-all", { ref: "selectAllOption" })
                        : _vm._e(),
                      _vm._v(" "),
                      _vm._t("default")
                    ],
                    2
                  )
                ]
              ),
              _vm._v(" "),
              !_vm.options.length
                ? _c(
                    "div",
                    { staticClass: "bk-select-empty", class: _vm.fontSizeCls },
                    [
                      _vm._v(
                        "\n                " +
                          _vm._s(_vm.emptyText) +
                          "\n            "
                      )
                    ]
                  )
                : _vm.searchable && _vm.unmatchedCount === _vm.options.length
                ? _c(
                    "div",
                    { staticClass: "bk-select-empty", class: _vm.fontSizeCls },
                    [
                      _vm._v(
                        "\n                " +
                          _vm._s(_vm.emptyText) +
                          "\n            "
                      )
                    ]
                  )
                : _vm._e(),
              _vm._v(" "),
              _vm.$slots.extension
                ? _c(
                    "div",
                    {
                      staticClass: "bk-select-extension",
                      class: _vm.fontSizeCls
                    },
                    [_vm._t("extension")],
                    2
                  )
                : _vm._e()
            ]
          )
        ]
      )
    ],
    2
  )
}
var selectvue_type_template_id_748b4645_scoped_true_staticRenderFns = []
selectvue_type_template_id_748b4645_scoped_true_render._withStripped = true


// CONCATENATED MODULE: ./src/views/select/select.vue?vue&type=template&id=748b4645&scoped=true&

// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/select/option-all.vue?vue&type=template&id=ea81d2dc&
var option_allvue_type_template_id_ea81d2dc_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "li",
    {
      staticClass: "bk-option",
      class: {
        "is-disabled": _vm.disabled
      },
      on: { click: _vm.handleOptionClick }
    },
    [
      _c("div", { staticClass: "bk-option-content" }, [
        _c(
          "span",
          { staticClass: "bk-option-name" },
          [
            _vm.isAllSelected
              ? [
                  _vm._v(
                    "\n                " +
                      _vm._s("(" + _vm.select.selectedOptions.length + ")") +
                      "\n            "
                  )
                ]
              : _vm._e()
          ],
          2
        )
      ])
    ]
  )
}
var option_allvue_type_template_id_ea81d2dc_staticRenderFns = []
option_allvue_type_template_id_ea81d2dc_render._withStripped = true


// CONCATENATED MODULE: ./src/views/select/option-all.vue?vue&type=template&id=ea81d2dc&

// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/select/option-all.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var option_allvue_type_script_lang_js_ = ({
  name: 'bk-option-all',
  inject: ['select'],

  data() {
    return {
      enabledOptions: []
    };
  },

  computed: {
    disabled() {
      return !this.enabledOptions.length;
    },

    isAllSelected() {
      return !this.enabledOptions.some(option => !option.isSelected);
    }

  },
  watch: {
    'select.options': {
      immediate: true,

      handler(options) {
        this.setEnabledOptions();
      }

    }
  },
  methods: {
    setEnabledOptions() {
      this.enabledOptions = this.select.options.filter(option => !option.disabled);
    },

    handleOptionClick() {
      if (this.disabled) {
        return false;
      }

      if (this.isAllSelected) {
        this.select.reset();
      } else {
        this.select.selectAll();
      }
    }

  }
});
// CONCATENATED MODULE: ./src/views/select/option-all.vue?vue&type=script&lang=js&
; /* harmony default export */ var select_option_allvue_type_script_lang_js_ = (option_allvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/select/option-all.vue
;




/* normalize component */
;
var option_all_component = normalizeComponent(
  select_option_allvue_type_script_lang_js_,
  option_allvue_type_template_id_ea81d2dc_render,
  option_allvue_type_template_id_ea81d2dc_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var option_all_api; }
option_all_component.options.__file = "src/views/select/option-all.vue"
/* harmony default export */ var option_all = (option_all_component.exports);
// CONCATENATED MODULE: ./src/views/select/emitter.js

/* harmony default export */ var emitter = ({
  methods: {
    dispatch(componentName, eventName, params) {
      let parent = this.$parent || this.$root;
      let name = parent.$options.name;

      while (parent && (!name || name !== componentName)) {
        parent = parent.$parent;

        if (parent) {
          name = parent.$options.name;
        }
      }

      if (parent) {
        parent.$emit.apply(parent, [eventName].concat(params));
      }
    }

  }
});
// CONCATENATED MODULE: ./src/views/select/z-index-manager.js
;
let hasInitZIndex = false;
let zIndex;

(function () {
  if (!window['__bk_zIndex_manager']) {
    const zIndexManager = {
      nextZIndex: function (zIndex = 'default') {
        return zIndex === 'default' ? zIndexManager.zIndex++ : zIndex;
      },
      nextTickIndex: function (tick = 1, zIndex = 'default') {
        if (zIndex === 'default') {
          zIndexManager.zIndex += tick;
          return zIndexManager.zIndex;
        }

        return zIndex;
      }
    };
    Object.defineProperty(zIndexManager, 'zIndex', {
      configurable: true,

      get() {
        if (!hasInitZIndex) {
          zIndex = zIndex || (vue_esm.prototype.$BK_EL || {}).zIndex || 2000;
          hasInitZIndex = true;
        }

        return zIndex;
      },

      set(value) {
        zIndex = value;
      }

    });
    window['__bk_zIndex_manager'] = zIndexManager;
  }
})();

/* harmony default export */ var z_index_manager = (window['__bk_zIndex_manager']);
// CONCATENATED MODULE: ./src/views/select/z-index.js
;
/* harmony default export */ var z_index = ({
  props: {
    zIndex: {
      type: [Number, String],
      default: 'default'
    }
  },
  methods: {
    getLocalZIndex() {
      return z_index_manager.nextTickIndex(2);
    }

  }
});
// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/select/select-tag.vue?vue&type=template&id=21a8ed92&
var select_tagvue_type_template_id_21a8ed92_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "bk-select-tag-container",
      class: {
        "is-fixed-height": _vm.select.collapseTag,
        "is-focus": _vm.select.focus,
        "is-available": !_vm.select.disabled && !_vm.select.readonly,
        "is-disabled": _vm.select.disabled,
        "is-readonly": _vm.select.readonly,
        "is-large-size": _vm.select.size === "large",
        "is-small-size": _vm.select.size === "small",
        "has-prefix-icon": !!_vm.select.prefixIcon
      }
    },
    _vm._l(_vm.select.selectedOptions, function(option) {
      return _c("span", { key: option.id, staticClass: "bk-select-tag" }, [
        _vm._v("\n        " + _vm._s(option.name) + "\n        "),
        _c("i", {
          staticClass: "bk-icon icon-close",
          on: {
            click: function($event) {
              return _vm.handleRemoveSelected($event, option)
            }
          }
        })
      ])
    }),
    0
  )
}
var select_tagvue_type_template_id_21a8ed92_staticRenderFns = []
select_tagvue_type_template_id_21a8ed92_render._withStripped = true


// CONCATENATED MODULE: ./src/views/select/select-tag.vue?vue&type=template&id=21a8ed92&

// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/select/select-tag.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var select_tagvue_type_script_lang_js_ = ({
  inject: ['select'],

  data() {
    return {
      overflowTagNode: null,
      overflowTagIndex: null
    };
  },

  mounted() {
    this.calcOverflow();
    this.$watch(() => this.select.focus, this.calcOverflow);
    this.$watch(() => this.select.selected, this.calcOverflow);
  },

  methods: {
    handleRemoveSelected(event, option) {
      if (this.select.disabled || this.select.readonly) {
        return false;
      }

      event.stopPropagation();
      this.select.unselectOption(option);
    },

    getTagDOM(index) {
      const tags = [].slice.call(this.$el.querySelectorAll('.bk-select-tag'));
      return typeof index === 'number' ? tags[index] : tags;
    },

    // 计算第二行第一个的index，在其前方插入overflow tag
    calcOverflow() {
      this.reomveOverflowTagNode();

      if (!this._isMounted || !this.select.collapseTag || this.select.focus || this.select.selected.length < 2) {
        return false;
      }

      setTimeout(() => {
        const tags = this.getTagDOM();
        const tagIndexInSecondRow = tags.findIndex((currentUser, index) => {
          if (!index) {
            return false;
          }

          const previousTag = tags[index - 1];
          return previousTag.offsetTop !== currentUser.offsetTop;
        });

        if (tagIndexInSecondRow > -1) {
          this.overflowTagIndex = tagIndexInSecondRow;
        } else {
          this.overflowTagIndex = null;
        }

        this.$el.scrollTop = 0;
        this.insertOverflowTag();
      });
    },

    // 根据计算的overflow index，插入tag并进行校正
    insertOverflowTag() {
      if (!this.overflowTagIndex) {
        return;
      }

      const overflowTagNode = this.getOverflowTagNode();
      const referenceTag = this.getTagDOM(this.overflowTagIndex);

      if (referenceTag) {
        this.setOverflowTagContent();
        this.$el.insertBefore(overflowTagNode, referenceTag);
      } else {
        this.overflowTagIndex = null;
        return;
      }

      setTimeout(() => {
        const previousTag = this.getTagDOM(this.overflowTagIndex - 1);

        if (overflowTagNode.offsetTop !== previousTag.offsetTop) {
          this.overflowTagIndex--;
          this.$el.insertBefore(overflowTagNode, overflowTagNode.previousSibling);
          this.setOverflowTagContent();
        }
      });
    },

    setOverflowTagContent() {
      this.overflowTagNode.textContent = `+${this.select.selected.length - this.overflowTagIndex}`;
    },

    // 创建/获取溢出数字节点
    getOverflowTagNode() {
      if (this.overflowTagNode) {
        return this.overflowTagNode;
      }

      const overflowTagNode = document.createElement('span');
      overflowTagNode.className = 'bk-select-overflow-tag';
      this.overflowTagNode = overflowTagNode;
      return overflowTagNode;
    },

    // 从容器中移除溢出数字节点
    reomveOverflowTagNode() {
      if (this.overflowTagNode && this.overflowTagNode.parentNode === this.$el) {
        this.$el.removeChild(this.overflowTagNode);
      }
    }

  }
});
// CONCATENATED MODULE: ./src/views/select/select-tag.vue?vue&type=script&lang=js&
; /* harmony default export */ var select_select_tagvue_type_script_lang_js_ = (select_tagvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/select/select-tag.vue
;




/* normalize component */
;
var select_tag_component = normalizeComponent(
  select_select_tagvue_type_script_lang_js_,
  select_tagvue_type_template_id_21a8ed92_render,
  select_tagvue_type_template_id_21a8ed92_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var select_tag_api; }
select_tag_component.options.__file = "src/views/select/select-tag.vue"
/* harmony default export */ var select_tag = (select_tag_component.exports);
// CONCATENATED MODULE: ../../node_modules/popper.js/dist/esm/popper.js

var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

var timeoutDuration = function () {
  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      return 1;
    }
  }
  return 0;
}();

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var popper_debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */
function getReferenceNode(reference) {
  return reference && reference.referenceNode ? reference.referenceNode : reference;
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function popper_isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = popper_isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent || null;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], popper_isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = popper_isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (popper_isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.width;
  var height = sizes.height || element.clientHeight || result.height;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = popper_isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop);
    var marginLeft = parseFloat(styles.marginLeft);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || popper_isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicitly asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var round = Math.round,
      floor = Math.floor;

  var noRound = function noRound(v) {
    return v;
  };

  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);

  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;

  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

    // flips variation if reference element overflows boundaries
    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    // flips variation if popper content overflows boundaries
    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

    var flippedVariation = flippedVariationByRef || flippedVariationByContent;

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport',
    /**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariations: false,
    /**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariationsByContent: false
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = popper_debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : __webpack_require__.g).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

/* harmony default export */ var esm_popper = (Popper);
//# sourceMappingURL=popper.js.map

// CONCATENATED MODULE: ../../node_modules/tippy.js/esm/index.all.js

var css = ".tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px);transform:perspective(700px) translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(60deg);transform:perspective(700px) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px);transform:perspective(700px) translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(-60deg);transform:perspective(700px) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px);transform:perspective(700px) translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(-60deg);transform:perspective(700px) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px);transform:perspective(700px) translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(60deg);transform:perspective(700px) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:initial}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] .tippy-roundarrow path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:\"\";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}";

function index_all_extends() {
  index_all_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return index_all_extends.apply(this, arguments);
}

var version = "4.3.5";

var index_all_isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
var ua = index_all_isBrowser ? navigator.userAgent : '';
var index_all_isIE = /MSIE |Trident\//.test(ua);
var isUCBrowser = /UCBrowser\//.test(ua);
var index_all_isIOS = index_all_isBrowser && /iPhone|iPad|iPod/.test(navigator.platform) && !window.MSStream;

var defaultProps = {
  a11y: true,
  allowHTML: true,
  animateFill: true,
  animation: 'shift-away',
  appendTo: function appendTo() {
    return document.body;
  },
  aria: 'describedby',
  arrow: false,
  arrowType: 'sharp',
  boundary: 'scrollParent',
  content: '',
  delay: 0,
  distance: 10,
  duration: [325, 275],
  flip: true,
  flipBehavior: 'flip',
  flipOnUpdate: false,
  followCursor: false,
  hideOnClick: true,
  ignoreAttributes: false,
  inertia: false,
  interactive: false,
  interactiveBorder: 2,
  interactiveDebounce: 0,
  lazy: true,
  maxWidth: 350,
  multiple: false,
  offset: 0,
  onHidden: function onHidden() {},
  onHide: function onHide() {},
  onMount: function onMount() {},
  onShow: function onShow() {},
  onShown: function onShown() {},
  onTrigger: function onTrigger() {},
  placement: 'top',
  popperOptions: {},
  role: 'tooltip',
  showOnInit: false,
  size: 'regular',
  sticky: false,
  target: '',
  theme: 'dark',
  touch: true,
  touchHold: false,
  trigger: 'mouseenter focus',
  triggerTarget: null,
  updateDuration: 0,
  wait: null,
  zIndex: 9999
  /**
   * If the set() method encounters one of these, the popperInstance must be
   * recreated
   */

};
var POPPER_INSTANCE_DEPENDENCIES = ['arrow', 'arrowType', 'boundary', 'distance', 'flip', 'flipBehavior', 'flipOnUpdate', 'offset', 'placement', 'popperOptions'];

var elementProto = index_all_isBrowser ? Element.prototype : {};
var index_all_matches = elementProto.matches || elementProto.matchesSelector || elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector || elementProto.msMatchesSelector;
/**
 * Ponyfill for Array.from - converts iterable values to an array
 */

function arrayFrom(value) {
  return [].slice.call(value);
}
/**
 * Ponyfill for Element.prototype.closest
 */

function closest(element, selector) {
  return closestCallback(element, function (el) {
    return index_all_matches.call(el, selector);
  });
}
/**
 * Works like Element.prototype.closest, but uses a callback instead
 */

function closestCallback(element, callback) {
  while (element) {
    if (callback(element)) {
      return element;
    }

    element = element.parentElement;
  }

  return null;
}

// Passive event listener config
var PASSIVE = {
  passive: true // Popper `preventOverflow` padding

};
var PADDING = 4; // Popper attributes
// In Popper v2 these will be `data-*` instead of `x-*` to adhere to HTML5 spec

var PLACEMENT_ATTRIBUTE = 'x-placement';
var OUT_OF_BOUNDARIES_ATTRIBUTE = 'x-out-of-boundaries'; // Classes

var IOS_CLASS = "tippy-iOS";
var ACTIVE_CLASS = "tippy-active";
var POPPER_CLASS = "tippy-popper";
var TOOLTIP_CLASS = "tippy-tooltip";
var CONTENT_CLASS = "tippy-content";
var BACKDROP_CLASS = "tippy-backdrop";
var ARROW_CLASS = "tippy-arrow";
var ROUND_ARROW_CLASS = "tippy-roundarrow"; // Selectors

var POPPER_SELECTOR = ".".concat(POPPER_CLASS);
var TOOLTIP_SELECTOR = ".".concat(TOOLTIP_CLASS);
var CONTENT_SELECTOR = ".".concat(CONTENT_CLASS);
var BACKDROP_SELECTOR = ".".concat(BACKDROP_CLASS);
var ARROW_SELECTOR = ".".concat(ARROW_CLASS);
var ROUND_ARROW_SELECTOR = ".".concat(ROUND_ARROW_CLASS);

var isUsingTouch = false;
function onDocumentTouch() {
  if (isUsingTouch) {
    return;
  }

  isUsingTouch = true;

  if (index_all_isIOS) {
    document.body.classList.add(IOS_CLASS);
  }

  if (window.performance) {
    document.addEventListener('mousemove', onDocumentMouseMove);
  }
}
var lastMouseMoveTime = 0;
function onDocumentMouseMove() {
  var now = performance.now(); // Chrome 60+ is 1 mousemove per animation frame, use 20ms time difference

  if (now - lastMouseMoveTime < 20) {
    isUsingTouch = false;
    document.removeEventListener('mousemove', onDocumentMouseMove);

    if (!index_all_isIOS) {
      document.body.classList.remove(IOS_CLASS);
    }
  }

  lastMouseMoveTime = now;
}
function onWindowBlur() {
  var _document = document,
      activeElement = _document.activeElement;

  if (activeElement && activeElement.blur && activeElement._tippy) {
    activeElement.blur();
  }
}
/**
 * Adds the needed global event listeners
 */

function bindGlobalEventListeners() {
  document.addEventListener('touchstart', onDocumentTouch, PASSIVE);
  window.addEventListener('blur', onWindowBlur);
}

var keys = Object.keys(defaultProps);
/**
 * Returns an object of optional props from data-tippy-* attributes
 */

function getDataAttributeOptions(reference) {
  return keys.reduce(function (acc, key) {
    var valueAsString = (reference.getAttribute("data-tippy-".concat(key)) || '').trim();

    if (!valueAsString) {
      return acc;
    }

    if (key === 'content') {
      acc[key] = valueAsString;
    } else {
      try {
        acc[key] = JSON.parse(valueAsString);
      } catch (e) {
        acc[key] = valueAsString;
      }
    }

    return acc;
  }, {});
}
/**
 * Polyfills the virtual reference (plain object) with Element.prototype props
 * Mutating because DOM elements are mutated, adds `_tippy` property
 */

function polyfillElementPrototypeProperties(virtualReference) {
  var polyfills = {
    isVirtual: true,
    attributes: virtualReference.attributes || {},
    contains: function contains() {},
    setAttribute: function setAttribute(key, value) {
      virtualReference.attributes[key] = value;
    },
    getAttribute: function getAttribute(key) {
      return virtualReference.attributes[key];
    },
    removeAttribute: function removeAttribute(key) {
      delete virtualReference.attributes[key];
    },
    hasAttribute: function hasAttribute(key) {
      return key in virtualReference.attributes;
    },
    addEventListener: function addEventListener() {},
    removeEventListener: function removeEventListener() {},
    classList: {
      classNames: {},
      add: function add(key) {
        virtualReference.classList.classNames[key] = true;
      },
      remove: function remove(key) {
        delete virtualReference.classList.classNames[key];
      },
      contains: function contains(key) {
        return key in virtualReference.classList.classNames;
      }
    }
  };

  for (var key in polyfills) {
    virtualReference[key] = polyfills[key];
  }
}

/**
 * Determines if a value is a "bare" virtual element (before mutations done
 * by `polyfillElementPrototypeProperties()`). JSDOM elements show up as
 * [object Object], we can check if the value is "element-like" if it has
 * `addEventListener`
 */

function isBareVirtualElement(value) {
  return {}.toString.call(value) === '[object Object]' && !value.addEventListener;
}
/**
 * Determines if the value is a reference element
 */

function isReferenceElement(value) {
  return !!value._tippy && !index_all_matches.call(value, POPPER_SELECTOR);
}
/**
 * Safe .hasOwnProperty check, for prototype-less objects
 */

function index_all_hasOwnProperty(obj, key) {
  return {}.hasOwnProperty.call(obj, key);
}
/**
 * Returns an array of elements based on the value
 */

function getArrayOfElements(value) {
  if (isSingular(value)) {
    // TODO: VirtualReference is not compatible to type Element
    return [value];
  }

  if (value instanceof NodeList) {
    return arrayFrom(value);
  }

  if (Array.isArray(value)) {
    return value;
  }

  try {
    return arrayFrom(document.querySelectorAll(value));
  } catch (e) {
    return [];
  }
}
/**
 * Returns a value at a given index depending on if it's an array or number
 */

function index_all_getValue(value, index, defaultValue) {
  if (Array.isArray(value)) {
    var v = value[index];
    return v == null ? defaultValue : v;
  }

  return value;
}
/**
 * Debounce utility. To avoid bloating bundle size, we're only passing 1
 * argument here, a more generic function would pass all arguments. Only
 * `onMouseMove` uses this which takes the event object for now.
 */

function index_all_debounce(fn, ms) {
  // Avoid wrapping in `setTimeout` if ms is 0 anyway
  if (ms === 0) {
    return fn;
  }

  var timeout;
  return function (arg) {
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      fn(arg);
    }, ms);
  };
}
/**
 * Prevents errors from being thrown while accessing nested modifier objects
 * in `popperOptions`
 */

function getModifier(obj, key) {
  return obj && obj.modifiers && obj.modifiers[key];
}
/**
 * Determines if an array or string includes a value
 */

function includes(a, b) {
  return a.indexOf(b) > -1;
}
/**
 * Determines if the value is a real element
 */

function isRealElement(value) {
  return value instanceof Element;
}
/**
 * Determines if the value is singular-like
 */

function isSingular(value) {
  return !!(value && index_all_hasOwnProperty(value, 'isVirtual')) || isRealElement(value);
}
/**
 * Firefox extensions don't allow setting .innerHTML directly, this will trick it
 */

function innerHTML() {
  return 'innerHTML';
}
/**
 * Evaluates a function if one, or returns the value
 */

function invokeWithArgsOrReturn(value, args) {
  return typeof value === 'function' ? value.apply(null, args) : value;
}
/**
 * Sets a popperInstance `flip` modifier's enabled state
 */

function setFlipModifierEnabled(modifiers, value) {
  modifiers.filter(function (m) {
    return m.name === 'flip';
  })[0].enabled = value;
}
/**
 * Determines if an element can receive focus
 * Always returns true for virtual objects
 */

function canReceiveFocus(element) {
  return isRealElement(element) ? index_all_matches.call(element, 'a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]') && !element.hasAttribute('disabled') : true;
}
/**
 * Returns a new `div` element
 */

function index_all_div() {
  return document.createElement('div');
}
/**
 * Applies a transition duration to a list of elements
 */

function setTransitionDuration(els, value) {
  els.forEach(function (el) {
    if (el) {
      el.style.transitionDuration = "".concat(value, "ms");
    }
  });
}
/**
 * Sets the visibility state to elements so they can begin to transition
 */

function setVisibilityState(els, state) {
  els.forEach(function (el) {
    if (el) {
      el.setAttribute('data-state', state);
    }
  });
}
/**
 * Evaluates the props object by merging data attributes and
 * disabling conflicting options where necessary
 */

function evaluateProps(reference, props) {
  var out = index_all_extends({}, props, {
    content: invokeWithArgsOrReturn(props.content, [reference])
  }, props.ignoreAttributes ? {} : getDataAttributeOptions(reference));

  if (out.arrow || isUCBrowser) {
    out.animateFill = false;
  }

  return out;
}
/**
 * Validates an object of options with the valid default props object
 */

function validateOptions(options, defaultProps) {
  Object.keys(options).forEach(function (option) {
    if (!index_all_hasOwnProperty(defaultProps, option)) {
      throw new Error("[tippy]: `".concat(option, "` is not a valid option"));
    }
  });
}

/**
 * Sets the innerHTML of an element
 */

function setInnerHTML(element, html) {
  element[innerHTML()] = isRealElement(html) ? html[innerHTML()] : html;
}
/**
 * Sets the content of a tooltip
 */

function setContent(contentEl, props) {
  if (isRealElement(props.content)) {
    setInnerHTML(contentEl, '');
    contentEl.appendChild(props.content);
  } else if (typeof props.content !== 'function') {
    var key = props.allowHTML ? 'innerHTML' : 'textContent';
    contentEl[key] = props.content;
  }
}
/**
 * Returns the child elements of a popper element
 */

function getChildren(popper) {
  return {
    tooltip: popper.querySelector(TOOLTIP_SELECTOR),
    backdrop: popper.querySelector(BACKDROP_SELECTOR),
    content: popper.querySelector(CONTENT_SELECTOR),
    arrow: popper.querySelector(ARROW_SELECTOR) || popper.querySelector(ROUND_ARROW_SELECTOR)
  };
}
/**
 * Adds `data-inertia` attribute
 */

function addInertia(tooltip) {
  tooltip.setAttribute('data-inertia', '');
}
/**
 * Removes `data-inertia` attribute
 */

function removeInertia(tooltip) {
  tooltip.removeAttribute('data-inertia');
}
/**
 * Creates an arrow element and returns it
 */

function createArrowElement(arrowType) {
  var arrow = index_all_div();

  if (arrowType === 'round') {
    arrow.className = ROUND_ARROW_CLASS;
    setInnerHTML(arrow, '<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>');
  } else {
    arrow.className = ARROW_CLASS;
  }

  return arrow;
}
/**
 * Creates a backdrop element and returns it
 */

function createBackdropElement() {
  var backdrop = index_all_div();
  backdrop.className = BACKDROP_CLASS;
  backdrop.setAttribute('data-state', 'hidden');
  return backdrop;
}
/**
 * Adds interactive-related attributes
 */

function addInteractive(popper, tooltip) {
  popper.setAttribute('tabindex', '-1');
  tooltip.setAttribute('data-interactive', '');
}
/**
 * Removes interactive-related attributes
 */

function removeInteractive(popper, tooltip) {
  popper.removeAttribute('tabindex');
  tooltip.removeAttribute('data-interactive');
}
/**
 * Add/remove transitionend listener from tooltip
 */

function updateTransitionEndListener(tooltip, action, listener) {
  // UC Browser hasn't adopted the `transitionend` event despite supporting
  // unprefixed transitions...
  var eventName = isUCBrowser && document.body.style.webkitTransition !== undefined ? 'webkitTransitionEnd' : 'transitionend';
  tooltip[action + 'EventListener'](eventName, listener);
}
/**
 * Returns the popper's placement, ignoring shifting (top-start, etc)
 */

function getBasicPlacement(popper) {
  var fullPlacement = popper.getAttribute(PLACEMENT_ATTRIBUTE);
  return fullPlacement ? fullPlacement.split('-')[0] : '';
}
/**
 * Triggers reflow
 */

function reflow(popper) {
  void popper.offsetHeight;
}
/**
 * Adds/removes theme from tooltip's classList
 */

function updateTheme(tooltip, action, theme) {
  theme.split(' ').forEach(function (themeName) {
    tooltip.classList[action](themeName + '-theme');
  });
}
/**
 * Constructs the popper element and returns it
 */

function createPopperElement(id, props) {
  var popper = index_all_div();
  popper.className = POPPER_CLASS;
  popper.id = "tippy-".concat(id);
  popper.style.zIndex = '' + props.zIndex;
  popper.style.position = 'absolute';
  popper.style.top = '0';
  popper.style.left = '0';

  if (props.role) {
    popper.setAttribute('role', props.role);
  }

  var tooltip = index_all_div();
  tooltip.className = TOOLTIP_CLASS;
  tooltip.style.maxWidth = props.maxWidth + (typeof props.maxWidth === 'number' ? 'px' : '');
  tooltip.setAttribute('data-size', props.size);
  tooltip.setAttribute('data-animation', props.animation);
  tooltip.setAttribute('data-state', 'hidden');
  updateTheme(tooltip, 'add', props.theme);
  var content = index_all_div();
  content.className = CONTENT_CLASS;
  content.setAttribute('data-state', 'hidden');

  if (props.interactive) {
    addInteractive(popper, tooltip);
  }

  if (props.arrow) {
    tooltip.appendChild(createArrowElement(props.arrowType));
  }

  if (props.animateFill) {
    tooltip.appendChild(createBackdropElement());
    tooltip.setAttribute('data-animatefill', '');
  }

  if (props.inertia) {
    addInertia(tooltip);
  }

  setContent(content, props);
  tooltip.appendChild(content);
  popper.appendChild(tooltip);
  return popper;
}
/**
 * Updates the popper element based on the new props
 */

function updatePopperElement(popper, prevProps, nextProps) {
  var _getChildren = getChildren(popper),
      tooltip = _getChildren.tooltip,
      content = _getChildren.content,
      backdrop = _getChildren.backdrop,
      arrow = _getChildren.arrow;

  popper.style.zIndex = '' + nextProps.zIndex;
  tooltip.setAttribute('data-size', nextProps.size);
  tooltip.setAttribute('data-animation', nextProps.animation);
  tooltip.style.maxWidth = nextProps.maxWidth + (typeof nextProps.maxWidth === 'number' ? 'px' : '');

  if (nextProps.role) {
    popper.setAttribute('role', nextProps.role);
  } else {
    popper.removeAttribute('role');
  }

  if (prevProps.content !== nextProps.content) {
    setContent(content, nextProps);
  } // animateFill


  if (!prevProps.animateFill && nextProps.animateFill) {
    tooltip.appendChild(createBackdropElement());
    tooltip.setAttribute('data-animatefill', '');
  } else if (prevProps.animateFill && !nextProps.animateFill) {
    tooltip.removeChild(backdrop);
    tooltip.removeAttribute('data-animatefill');
  } // arrow


  if (!prevProps.arrow && nextProps.arrow) {
    tooltip.appendChild(createArrowElement(nextProps.arrowType));
  } else if (prevProps.arrow && !nextProps.arrow) {
    tooltip.removeChild(arrow);
  } // arrowType


  if (prevProps.arrow && nextProps.arrow && prevProps.arrowType !== nextProps.arrowType) {
    tooltip.replaceChild(createArrowElement(nextProps.arrowType), arrow);
  } // interactive


  if (!prevProps.interactive && nextProps.interactive) {
    addInteractive(popper, tooltip);
  } else if (prevProps.interactive && !nextProps.interactive) {
    removeInteractive(popper, tooltip);
  } // inertia


  if (!prevProps.inertia && nextProps.inertia) {
    addInertia(tooltip);
  } else if (prevProps.inertia && !nextProps.inertia) {
    removeInertia(tooltip);
  } // theme


  if (prevProps.theme !== nextProps.theme) {
    updateTheme(tooltip, 'remove', prevProps.theme);
    updateTheme(tooltip, 'add', nextProps.theme);
  }
}
/**
 * Hides all visible poppers on the document
 */

function hideAll() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      excludedReferenceOrInstance = _ref.exclude,
      duration = _ref.duration;

  arrayFrom(document.querySelectorAll(POPPER_SELECTOR)).forEach(function (popper) {
    var instance = popper._tippy;

    if (instance) {
      var isExcluded = false;

      if (excludedReferenceOrInstance) {
        isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : popper === excludedReferenceOrInstance.popper;
      }

      if (!isExcluded) {
        instance.hide(duration);
      }
    }
  });
}
/**
 * Determines if the mouse cursor is outside of the popper's interactive border
 * region
 */

function isCursorOutsideInteractiveBorder(popperPlacement, popperRect, event, props) {
  if (!popperPlacement) {
    return true;
  }

  var x = event.clientX,
      y = event.clientY;
  var interactiveBorder = props.interactiveBorder,
      distance = props.distance;
  var exceedsTop = popperRect.top - y > (popperPlacement === 'top' ? interactiveBorder + distance : interactiveBorder);
  var exceedsBottom = y - popperRect.bottom > (popperPlacement === 'bottom' ? interactiveBorder + distance : interactiveBorder);
  var exceedsLeft = popperRect.left - x > (popperPlacement === 'left' ? interactiveBorder + distance : interactiveBorder);
  var exceedsRight = x - popperRect.right > (popperPlacement === 'right' ? interactiveBorder + distance : interactiveBorder);
  return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
}
/**
 * Returns the distance offset, taking into account the default offset due to
 * the transform: translate() rule (10px) in CSS
 */

function getOffsetDistanceInPx(distance) {
  return -(distance - 10) + 'px';
}

var idCounter = 1; // Workaround for IE11's lack of new MouseEvent constructor

var mouseMoveListeners = [];
/**
 * Creates and returns a Tippy object. We're using a closure pattern instead of
 * a class so that the exposed object API is clean without private members
 * prefixed with `_`.
 */

function createTippy(reference, collectionProps) {
  var props = evaluateProps(reference, collectionProps); // If the reference shouldn't have multiple tippys, return null early

  if (!props.multiple && reference._tippy) {
    return null;
  }
  /* ======================= 🔒 Private members 🔒 ======================= */


  var lastTriggerEventType;
  var lastMouseMoveEvent;
  var showTimeoutId;
  var hideTimeoutId;
  var scheduleHideAnimationFrameId;
  var isScheduledToShow = false;
  var isBeingDestroyed = false;
  var previousPlacement;
  var wasVisibleDuringPreviousUpdate = false;
  var hasMountCallbackRun = false;
  var currentMountCallback;
  var currentTransitionEndListener;
  var listeners = [];
  var currentComputedPadding;
  var debouncedOnMouseMove = index_all_debounce(onMouseMove, props.interactiveDebounce);
  /* ======================= 🔑 Public members 🔑 ======================= */

  var id = idCounter++;
  var popper = createPopperElement(id, props);
  var popperChildren = getChildren(popper);
  var popperInstance = null;
  var state = {
    // Is the instance currently enabled?
    isEnabled: true,
    // Is the tippy currently showing and not transitioning out?
    isVisible: false,
    // Has the instance been destroyed?
    isDestroyed: false,
    // Is the tippy currently mounted to the DOM?
    isMounted: false,
    // Has the tippy finished transitioning in?
    isShown: false
  };
  var instance = {
    // properties
    id: id,
    reference: reference,
    popper: popper,
    popperChildren: popperChildren,
    popperInstance: popperInstance,
    props: props,
    state: state,
    // methods
    clearDelayTimeouts: clearDelayTimeouts,
    set: set,
    setContent: setContent,
    show: show,
    hide: hide,
    enable: enable,
    disable: disable,
    destroy: destroy
    /* ==================== Initial instance mutations =================== */

  };
  reference._tippy = instance;
  popper._tippy = instance;
  addTriggersToReference();

  if (!props.lazy) {
    createPopperInstance();
  }

  if (props.showOnInit) {
    scheduleShow();
  } // Ensure the event listeners target can receive focus


  if (props.a11y && !props.target && !canReceiveFocus(getEventListenersTarget())) {
    getEventListenersTarget().setAttribute('tabindex', '0');
  } // Prevent a tippy with a delay from hiding if the cursor left then returned
  // before it started hiding


  popper.addEventListener('mouseenter', function (event) {
    if (instance.props.interactive && instance.state.isVisible && lastTriggerEventType === 'mouseenter') {
      // We don't want props.onTrigger() to be called here, since the `event`
      // object is not related to the reference element
      scheduleShow(event, true);
    }
  });
  popper.addEventListener('mouseleave', function () {
    if (instance.props.interactive && lastTriggerEventType === 'mouseenter') {
      document.addEventListener('mousemove', debouncedOnMouseMove);
    }
  });
  return instance;
  /* ======================= 🔒 Private methods 🔒 ======================= */

  /**
   * Removes the follow cursor listener
   */

  function removeFollowCursorListener() {
    document.removeEventListener('mousemove', positionVirtualReferenceNearCursor);
  }
  /**
   * Cleans up interactive mouse listeners
   */


  function cleanupInteractiveMouseListeners() {
    document.body.removeEventListener('mouseleave', scheduleHide);
    document.removeEventListener('mousemove', debouncedOnMouseMove);
    mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
      return listener !== debouncedOnMouseMove;
    });
  }
  /**
   * Returns correct target used for event listeners
   */


  function getEventListenersTarget() {
    return instance.props.triggerTarget || reference;
  }
  /**
   * Adds the document click event listener for the instance
   */


  function addDocumentClickListener() {
    document.addEventListener('click', onDocumentClick, true);
  }
  /**
   * Removes the document click event listener for the instance
   */


  function removeDocumentClickListener() {
    document.removeEventListener('click', onDocumentClick, true);
  }
  /**
   * Returns transitionable inner elements used in show/hide methods
   */


  function getTransitionableElements() {
    return [instance.popperChildren.tooltip, instance.popperChildren.backdrop, instance.popperChildren.content];
  }
  /**
   * Determines if the instance is in `followCursor` mode.
   * NOTE: in v5, touch devices will use `initial` behavior no matter the value.
   */


  function getIsInLooseFollowCursorMode() {
    var followCursor = instance.props.followCursor;
    return followCursor && lastTriggerEventType !== 'focus' || isUsingTouch && followCursor === 'initial';
  }
  /**
   * Updates the tooltip's position on each animation frame
   */


  function makeSticky() {
    setTransitionDuration([popper], index_all_isIE ? 0 : instance.props.updateDuration);
    var prevRefRect = reference.getBoundingClientRect();

    function updatePosition() {
      var currentRefRect = reference.getBoundingClientRect(); // Only schedule an update if the reference rect has changed

      if (prevRefRect.top !== currentRefRect.top || prevRefRect.right !== currentRefRect.right || prevRefRect.bottom !== currentRefRect.bottom || prevRefRect.left !== currentRefRect.left) {
        instance.popperInstance.scheduleUpdate();
      }

      prevRefRect = currentRefRect;

      if (instance.state.isMounted) {
        requestAnimationFrame(updatePosition);
      }
    }

    updatePosition();
  }
  /**
   * Invokes a callback once the tooltip has fully transitioned out
   */


  function onTransitionedOut(duration, callback) {
    onTransitionEnd(duration, function () {
      if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
        callback();
      }
    });
  }
  /**
   * Invokes a callback once the tooltip has fully transitioned in
   */


  function onTransitionedIn(duration, callback) {
    onTransitionEnd(duration, callback);
  }
  /**
   * Invokes a callback once the tooltip's CSS transition ends
   */


  function onTransitionEnd(duration, callback) {
    var tooltip = instance.popperChildren.tooltip;
    /**
     * Listener added as the `transitionend` handler
     */

    function listener(event) {
      if (event.target === tooltip) {
        updateTransitionEndListener(tooltip, 'remove', listener);
        callback();
      }
    } // Make callback synchronous if duration is 0
    // `transitionend` won't fire otherwise


    if (duration === 0) {
      return callback();
    }

    updateTransitionEndListener(tooltip, 'remove', currentTransitionEndListener);
    updateTransitionEndListener(tooltip, 'add', listener);
    currentTransitionEndListener = listener;
  }
  /**
   * Adds an event listener to the reference and stores it in `listeners`
   */


  function on(eventType, handler) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    getEventListenersTarget().addEventListener(eventType, handler, options);
    listeners.push({
      eventType: eventType,
      handler: handler,
      options: options
    });
  }
  /**
   * Adds event listeners to the reference based on the `trigger` prop
   */


  function addTriggersToReference() {
    if (instance.props.touchHold && !instance.props.target) {
      on('touchstart', onTrigger, PASSIVE);
      on('touchend', onMouseLeave, PASSIVE);
    }

    instance.props.trigger.trim().split(' ').forEach(function (eventType) {
      if (eventType === 'manual') {
        return;
      } // Non-delegates


      if (!instance.props.target) {
        on(eventType, onTrigger);

        switch (eventType) {
          case 'mouseenter':
            on('mouseleave', onMouseLeave);
            break;

          case 'focus':
            on(index_all_isIE ? 'focusout' : 'blur', onBlur);
            break;
        }
      } else {
        // Delegates
        switch (eventType) {
          case 'mouseenter':
            on('mouseover', onDelegateShow);
            on('mouseout', onDelegateHide);
            break;

          case 'focus':
            on('focusin', onDelegateShow);
            on('focusout', onDelegateHide);
            break;

          case 'click':
            on(eventType, onDelegateShow);
            break;
        }
      }
    });
  }
  /**
   * Removes event listeners from the reference
   */


  function removeTriggersFromReference() {
    listeners.forEach(function (_ref) {
      var eventType = _ref.eventType,
          handler = _ref.handler,
          options = _ref.options;
      getEventListenersTarget().removeEventListener(eventType, handler, options);
    });
    listeners = [];
  }
  /**
   * Positions the virtual reference near the cursor
   */


  function positionVirtualReferenceNearCursor(event) {
    var _lastMouseMoveEvent = lastMouseMoveEvent = event,
        x = _lastMouseMoveEvent.clientX,
        y = _lastMouseMoveEvent.clientY; // Gets set once popperInstance `onCreate` has been called


    if (!currentComputedPadding) {
      return;
    } // If the instance is interactive, avoid updating the position unless it's
    // over the reference element


    var isCursorOverReference = closestCallback(event.target, function (el) {
      return el === reference;
    });
    var rect = reference.getBoundingClientRect();
    var followCursor = instance.props.followCursor;
    var isHorizontal = followCursor === 'horizontal';
    var isVertical = followCursor === 'vertical'; // The virtual reference needs some size to prevent itself from overflowing

    var isVerticalPlacement = includes(['top', 'bottom'], getBasicPlacement(popper));
    var fullPlacement = popper.getAttribute(PLACEMENT_ATTRIBUTE);
    var isVariation = fullPlacement ? !!fullPlacement.split('-')[1] : false;
    var size = isVerticalPlacement ? popper.offsetWidth : popper.offsetHeight;
    var halfSize = size / 2;
    var verticalIncrease = isVerticalPlacement ? 0 : isVariation ? size : halfSize;
    var horizontalIncrease = isVerticalPlacement ? isVariation ? size : halfSize : 0;

    if (isCursorOverReference || !instance.props.interactive) {
      instance.popperInstance.reference = index_all_extends({}, instance.popperInstance.reference, {
        // This will exist in next Popper.js feature release to fix #532
        // @ts-ignore
        referenceNode: reference,
        // These `client` values don't get used by Popper.js if they are 0
        clientWidth: 0,
        clientHeight: 0,
        getBoundingClientRect: function getBoundingClientRect() {
          return {
            width: isVerticalPlacement ? size : 0,
            height: isVerticalPlacement ? 0 : size,
            top: (isHorizontal ? rect.top : y) - verticalIncrease,
            bottom: (isHorizontal ? rect.bottom : y) + verticalIncrease,
            left: (isVertical ? rect.left : x) - horizontalIncrease,
            right: (isVertical ? rect.right : x) + horizontalIncrease
          };
        }
      });
      instance.popperInstance.update();
    }

    if (followCursor === 'initial' && instance.state.isVisible) {
      removeFollowCursorListener();
    }
  }
  /**
   * Creates the tippy instance for a delegate when it's been triggered
   */


  function createDelegateChildTippy(event) {
    if (event) {
      var targetEl = closest(event.target, instance.props.target);

      if (targetEl && !targetEl._tippy) {
        createTippy(targetEl, index_all_extends({}, instance.props, {
          content: invokeWithArgsOrReturn(collectionProps.content, [targetEl]),
          appendTo: collectionProps.appendTo,
          target: '',
          showOnInit: true
        }));
      }
    }
  }
  /**
   * Event listener invoked upon trigger
   */


  function onTrigger(event) {
    if (!instance.state.isEnabled || isEventListenerStopped(event)) {
      return;
    }

    if (!instance.state.isVisible) {
      lastTriggerEventType = event.type;

      if (event instanceof MouseEvent) {
        lastMouseMoveEvent = event; // If scrolling, `mouseenter` events can be fired if the cursor lands
        // over a new target, but `mousemove` events don't get fired. This
        // causes interactive tooltips to get stuck open until the cursor is
        // moved

        mouseMoveListeners.forEach(function (listener) {
          return listener(event);
        });
      }
    } // Toggle show/hide when clicking click-triggered tooltips


    if (event.type === 'click' && instance.props.hideOnClick !== false && instance.state.isVisible) {
      scheduleHide();
    } else {
      scheduleShow(event);
    }
  }
  /**
   * Event listener used for interactive tooltips to detect when they should
   * hide
   */


  function onMouseMove(event) {
    var isCursorOverPopper = closest(event.target, POPPER_SELECTOR) === popper;
    var isCursorOverReference = closestCallback(event.target, function (el) {
      return el === reference;
    });

    if (isCursorOverPopper || isCursorOverReference) {
      return;
    }

    if (isCursorOutsideInteractiveBorder(getBasicPlacement(popper), popper.getBoundingClientRect(), event, instance.props)) {
      cleanupInteractiveMouseListeners();
      scheduleHide();
    }
  }
  /**
   * Event listener invoked upon mouseleave
   */


  function onMouseLeave(event) {
    if (isEventListenerStopped(event)) {
      return;
    }

    if (instance.props.interactive) {
      document.body.addEventListener('mouseleave', scheduleHide);
      document.addEventListener('mousemove', debouncedOnMouseMove);
      mouseMoveListeners.push(debouncedOnMouseMove);
      return;
    }

    scheduleHide();
  }
  /**
   * Event listener invoked upon blur
   */


  function onBlur(event) {
    if (event.target !== getEventListenersTarget()) {
      return;
    }

    if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
      return;
    }

    scheduleHide();
  }
  /**
   * Event listener invoked when a child target is triggered
   */


  function onDelegateShow(event) {
    if (closest(event.target, instance.props.target)) {
      scheduleShow(event);
    }
  }
  /**
   * Event listener invoked when a child target should hide
   */


  function onDelegateHide(event) {
    if (closest(event.target, instance.props.target)) {
      scheduleHide();
    }
  }
  /**
   * Determines if an event listener should stop further execution due to the
   * `touchHold` option
   */


  function isEventListenerStopped(event) {
    var supportsTouch = 'ontouchstart' in window;
    var isTouchEvent = includes(event.type, 'touch');
    var touchHold = instance.props.touchHold;
    return supportsTouch && isUsingTouch && touchHold && !isTouchEvent || isUsingTouch && !touchHold && isTouchEvent;
  }
  /**
   * Runs the mount callback
   */


  function runMountCallback() {
    if (!hasMountCallbackRun && currentMountCallback) {
      hasMountCallbackRun = true;
      reflow(popper);
      currentMountCallback();
    }
  }
  /**
   * Creates the popper instance for the instance
   */


  function createPopperInstance() {
    var popperOptions = instance.props.popperOptions;
    var _instance$popperChild = instance.popperChildren,
        tooltip = _instance$popperChild.tooltip,
        arrow = _instance$popperChild.arrow;
    var preventOverflowModifier = getModifier(popperOptions, 'preventOverflow');

    function applyMutations(data) {
      if (instance.props.flip && !instance.props.flipOnUpdate) {
        if (data.flipped) {
          instance.popperInstance.options.placement = data.placement;
        }

        setFlipModifierEnabled(instance.popperInstance.modifiers, false);
      } // Apply all of the popper's attributes to the tootip node as well.
      // Allows users to avoid using the .tippy-popper selector for themes.


      tooltip.setAttribute(PLACEMENT_ATTRIBUTE, data.placement);

      if (data.attributes[OUT_OF_BOUNDARIES_ATTRIBUTE] !== false) {
        tooltip.setAttribute(OUT_OF_BOUNDARIES_ATTRIBUTE, '');
      } else {
        tooltip.removeAttribute(OUT_OF_BOUNDARIES_ATTRIBUTE);
      } // Prevents a transition when changing placements (while tippy is visible)
      // for scroll/resize updates


      if (previousPlacement && previousPlacement !== data.placement && wasVisibleDuringPreviousUpdate) {
        tooltip.style.transition = 'none';
        requestAnimationFrame(function () {
          tooltip.style.transition = '';
        });
      }

      previousPlacement = data.placement;
      wasVisibleDuringPreviousUpdate = instance.state.isVisible;
      var basicPlacement = getBasicPlacement(popper);
      var styles = tooltip.style; // Account for the `distance` offset

      styles.top = styles.bottom = styles.left = styles.right = '';
      styles[basicPlacement] = getOffsetDistanceInPx(instance.props.distance);
      var padding = preventOverflowModifier && preventOverflowModifier.padding !== undefined ? preventOverflowModifier.padding : PADDING;
      var isPaddingNumber = typeof padding === 'number';

      var computedPadding = index_all_extends({
        top: isPaddingNumber ? padding : padding.top,
        bottom: isPaddingNumber ? padding : padding.bottom,
        left: isPaddingNumber ? padding : padding.left,
        right: isPaddingNumber ? padding : padding.right
      }, !isPaddingNumber && padding);

      computedPadding[basicPlacement] = isPaddingNumber ? padding + instance.props.distance : (padding[basicPlacement] || 0) + instance.props.distance;
      instance.popperInstance.modifiers.filter(function (m) {
        return m.name === 'preventOverflow';
      })[0].padding = computedPadding;
      currentComputedPadding = computedPadding;
    }

    var config = index_all_extends({
      eventsEnabled: false,
      placement: instance.props.placement
    }, popperOptions, {
      modifiers: index_all_extends({}, popperOptions ? popperOptions.modifiers : {}, {
        preventOverflow: index_all_extends({
          boundariesElement: instance.props.boundary,
          padding: PADDING
        }, preventOverflowModifier),
        arrow: index_all_extends({
          element: arrow,
          enabled: !!arrow
        }, getModifier(popperOptions, 'arrow')),
        flip: index_all_extends({
          enabled: instance.props.flip,
          // The tooltip is offset by 10px from the popper in CSS,
          // we need to account for its distance
          padding: instance.props.distance + PADDING,
          behavior: instance.props.flipBehavior
        }, getModifier(popperOptions, 'flip')),
        offset: index_all_extends({
          offset: instance.props.offset
        }, getModifier(popperOptions, 'offset'))
      }),
      onCreate: function onCreate(data) {
        applyMutations(data);
        runMountCallback();

        if (popperOptions && popperOptions.onCreate) {
          popperOptions.onCreate(data);
        }
      },
      onUpdate: function onUpdate(data) {
        applyMutations(data);
        runMountCallback();

        if (popperOptions && popperOptions.onUpdate) {
          popperOptions.onUpdate(data);
        }
      }
    });

    instance.popperInstance = new esm_popper(reference, popper, config);
  }
  /**
   * Mounts the tooltip to the DOM
   */


  function mount() {
    hasMountCallbackRun = false;
    var isInLooseFollowCursorMode = getIsInLooseFollowCursorMode();

    if (instance.popperInstance) {
      setFlipModifierEnabled(instance.popperInstance.modifiers, instance.props.flip);

      if (!isInLooseFollowCursorMode) {
        instance.popperInstance.reference = reference;
        instance.popperInstance.enableEventListeners();
      }

      instance.popperInstance.scheduleUpdate();
    } else {
      createPopperInstance();

      if (!isInLooseFollowCursorMode) {
        instance.popperInstance.enableEventListeners();
      }
    }

    var appendTo = instance.props.appendTo;
    var parentNode = appendTo === 'parent' ? reference.parentNode : invokeWithArgsOrReturn(appendTo, [reference]);

    if (!parentNode.contains(popper)) {
      parentNode.appendChild(popper);
      instance.props.onMount(instance);
      instance.state.isMounted = true;
    }
  }
  /**
   * Setup before show() is invoked (delays, etc.)
   */


  function scheduleShow(event, shouldAvoidCallingOnTrigger) {
    clearDelayTimeouts();

    if (instance.state.isVisible) {
      return;
    } // Is a delegate, create an instance for the child target


    if (instance.props.target) {
      return createDelegateChildTippy(event);
    }

    isScheduledToShow = true;

    if (event && !shouldAvoidCallingOnTrigger) {
      instance.props.onTrigger(instance, event);
    }

    if (instance.props.wait) {
      return instance.props.wait(instance, event);
    } // If the tooltip has a delay, we need to be listening to the mousemove as
    // soon as the trigger event is fired, so that it's in the correct position
    // upon mount.
    // Edge case: if the tooltip is still mounted, but then scheduleShow() is
    // called, it causes a jump.


    if (getIsInLooseFollowCursorMode() && !instance.state.isMounted) {
      if (!instance.popperInstance) {
        createPopperInstance();
      }

      document.addEventListener('mousemove', positionVirtualReferenceNearCursor);
    }

    addDocumentClickListener();
    var delay = index_all_getValue(instance.props.delay, 0, defaultProps.delay);

    if (delay) {
      showTimeoutId = setTimeout(function () {
        show();
      }, delay);
    } else {
      show();
    }
  }
  /**
   * Setup before hide() is invoked (delays, etc.)
   */


  function scheduleHide() {
    clearDelayTimeouts();

    if (!instance.state.isVisible) {
      removeFollowCursorListener();
      removeDocumentClickListener();
      return;
    }

    isScheduledToShow = false;
    var delay = index_all_getValue(instance.props.delay, 1, defaultProps.delay);

    if (delay) {
      hideTimeoutId = setTimeout(function () {
        if (instance.state.isVisible) {
          hide();
        }
      }, delay);
    } else {
      // Fixes a `transitionend` problem when it fires 1 frame too
      // late sometimes, we don't want hide() to be called.
      scheduleHideAnimationFrameId = requestAnimationFrame(function () {
        hide();
      });
    }
  }
  /**
   * Listener to handle clicks on the document to determine if the
   * instance should hide
   */


  function onDocumentClick(event) {
    // Clicked on interactive popper
    if (instance.props.interactive && popper.contains(event.target)) {
      return;
    } // Clicked on the event listeners target


    if (getEventListenersTarget().contains(event.target)) {
      if (isUsingTouch) {
        return;
      }

      if (instance.state.isVisible && includes(instance.props.trigger, 'click')) {
        return;
      }
    }

    if (instance.props.hideOnClick === true) {
      clearDelayTimeouts();
      hide();
    }
  }
  /* ======================= 🔑 Public methods 🔑 ======================= */

  /**
   * Enables the instance to allow it to show or hide
   */


  function enable() {
    instance.state.isEnabled = true;
  }
  /**
   * Disables the instance to disallow it to show or hide
   */


  function disable() {
    instance.state.isEnabled = false;
  }
  /**
   * Clears pending timeouts related to the `delay` prop if any
   */


  function clearDelayTimeouts() {
    clearTimeout(showTimeoutId);
    clearTimeout(hideTimeoutId);
    cancelAnimationFrame(scheduleHideAnimationFrameId);
  }
  /**
   * Sets new props for the instance and redraws the tooltip
   */


  function set(options) {
    // Backwards-compatible after TypeScript change
    options = options || {};
    validateOptions(options, defaultProps);
    removeTriggersFromReference();
    var prevProps = instance.props;
    var nextProps = evaluateProps(reference, index_all_extends({}, instance.props, {}, options, {
      ignoreAttributes: true
    }));
    nextProps.ignoreAttributes = index_all_hasOwnProperty(options, 'ignoreAttributes') ? options.ignoreAttributes || false : prevProps.ignoreAttributes;
    instance.props = nextProps;
    addTriggersToReference();
    cleanupInteractiveMouseListeners();
    debouncedOnMouseMove = index_all_debounce(onMouseMove, nextProps.interactiveDebounce);
    updatePopperElement(popper, prevProps, nextProps);
    instance.popperChildren = getChildren(popper);

    if (instance.popperInstance) {
      if (POPPER_INSTANCE_DEPENDENCIES.some(function (prop) {
        return index_all_hasOwnProperty(options, prop) && options[prop] !== prevProps[prop];
      })) {
        instance.popperInstance.destroy();
        createPopperInstance();

        if (instance.state.isVisible) {
          instance.popperInstance.enableEventListeners();
        }

        if (instance.props.followCursor && lastMouseMoveEvent) {
          positionVirtualReferenceNearCursor(lastMouseMoveEvent);
        }
      } else {
        instance.popperInstance.update();
      }
    }
  }
  /**
   * Shortcut for .set({ content: newContent })
   */


  function setContent(content) {
    set({
      content: content
    });
  }
  /**
   * Shows the tooltip
   */


  function show() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : index_all_getValue(instance.props.duration, 0, defaultProps.duration[1]);

    if (instance.state.isDestroyed || !instance.state.isEnabled || isUsingTouch && !instance.props.touch) {
      return;
    } // Standardize `disabled` behavior across browsers.
    // Firefox allows events on disabled elements, but Chrome doesn't.
    // Using a wrapper element (i.e. <span>) is recommended.


    if (getEventListenersTarget().hasAttribute('disabled')) {
      return;
    }

    if (instance.props.onShow(instance) === false) {
      return;
    }

    addDocumentClickListener();
    popper.style.visibility = 'visible';
    instance.state.isVisible = true;

    if (instance.props.interactive) {
      getEventListenersTarget().classList.add(ACTIVE_CLASS);
    } // Prevent a transition if the popper is at the opposite placement


    var transitionableElements = getTransitionableElements();
    setTransitionDuration(transitionableElements.concat(popper), 0);

    currentMountCallback = function currentMountCallback() {
      if (!instance.state.isVisible) {
        return;
      }

      var isInLooseFollowCursorMode = getIsInLooseFollowCursorMode();

      if (isInLooseFollowCursorMode && lastMouseMoveEvent) {
        positionVirtualReferenceNearCursor(lastMouseMoveEvent);
      } else if (!isInLooseFollowCursorMode) {
        // Double update will apply correct mutations
        instance.popperInstance.update();
      }

      if (instance.popperChildren.backdrop) {
        instance.popperChildren.content.style.transitionDelay = Math.round(duration / 12) + 'ms';
      }

      if (instance.props.sticky) {
        makeSticky();
      }

      setTransitionDuration([popper], instance.props.updateDuration);
      setTransitionDuration(transitionableElements, duration);
      setVisibilityState(transitionableElements, 'visible');
      onTransitionedIn(duration, function () {
        if (instance.props.aria) {
          getEventListenersTarget().setAttribute("aria-".concat(instance.props.aria), popper.id);
        }

        instance.props.onShown(instance);
        instance.state.isShown = true;
      });
    };

    mount();
  }
  /**
   * Hides the tooltip
   */


  function hide() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : index_all_getValue(instance.props.duration, 1, defaultProps.duration[1]);

    if (instance.state.isDestroyed || !instance.state.isEnabled && !isBeingDestroyed) {
      return;
    }

    if (instance.props.onHide(instance) === false && !isBeingDestroyed) {
      return;
    }

    removeDocumentClickListener();
    popper.style.visibility = 'hidden';
    instance.state.isVisible = false;
    instance.state.isShown = false;
    wasVisibleDuringPreviousUpdate = false;

    if (instance.props.interactive) {
      getEventListenersTarget().classList.remove(ACTIVE_CLASS);
    }

    var transitionableElements = getTransitionableElements();
    setTransitionDuration(transitionableElements, duration);
    setVisibilityState(transitionableElements, 'hidden');
    onTransitionedOut(duration, function () {
      if (!isScheduledToShow) {
        removeFollowCursorListener();
      }

      if (instance.props.aria) {
        getEventListenersTarget().removeAttribute("aria-".concat(instance.props.aria));
      }

      instance.popperInstance.disableEventListeners();
      instance.popperInstance.options.placement = instance.props.placement;
      popper.parentNode.removeChild(popper);
      instance.props.onHidden(instance);
      instance.state.isMounted = false;
    });
  }
  /**
   * Destroys the tooltip
   */


  function destroy(destroyTargetInstances) {
    if (instance.state.isDestroyed) {
      return;
    }

    isBeingDestroyed = true; // If the popper is currently mounted to the DOM, we want to ensure it gets
    // hidden and unmounted instantly upon destruction

    if (instance.state.isMounted) {
      hide(0);
    }

    removeTriggersFromReference();
    delete reference._tippy;
    var target = instance.props.target;

    if (target && destroyTargetInstances && isRealElement(reference)) {
      arrayFrom(reference.querySelectorAll(target)).forEach(function (child) {
        if (child._tippy) {
          child._tippy.destroy();
        }
      });
    }

    if (instance.popperInstance) {
      instance.popperInstance.destroy();
    }

    isBeingDestroyed = false;
    instance.state.isDestroyed = true;
  }
}

/**
 * Groups an array of instances by taking control of their props during
 * certain lifecycles.
 */
function group(instances) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? instances[0].props.delay : _ref$delay,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? 0 : _ref$duration;

  var isAnyTippyOpen = false;
  instances.forEach(function (instance) {
    if (instance._originalProps) {
      instance.set(instance._originalProps);
    } else {
      instance._originalProps = index_all_extends({}, instance.props);
    }
  });

  function setIsAnyTippyOpen(value) {
    isAnyTippyOpen = value;
    updateInstances();
  }

  function onShow(instance) {
    instance._originalProps.onShow(instance);

    instances.forEach(function (instance) {
      instance.set({
        duration: duration
      });

      if (instance.state.isVisible) {
        instance.hide();
      }
    });
    setIsAnyTippyOpen(true);
  }

  function onHide(instance) {
    instance._originalProps.onHide(instance);

    setIsAnyTippyOpen(false);
  }

  function onShown(instance) {
    instance._originalProps.onShown(instance);

    instance.set({
      duration: instance._originalProps.duration
    });
  }

  function updateInstances() {
    instances.forEach(function (instance) {
      instance.set({
        onShow: onShow,
        onShown: onShown,
        onHide: onHide,
        delay: isAnyTippyOpen ? [0, Array.isArray(delay) ? delay[1] : delay] : delay,
        duration: isAnyTippyOpen ? duration : instance._originalProps.duration
      });
    });
  }

  updateInstances();
}

var globalEventListenersBound = false;
/**
 * Exported module
 */

function tippy(targets, options) {
  validateOptions(options || {}, defaultProps);

  if (!globalEventListenersBound) {
    bindGlobalEventListeners();
    globalEventListenersBound = true;
  }

  var props = index_all_extends({}, defaultProps, {}, options); // If they are specifying a virtual positioning reference, we need to polyfill
  // some native DOM props


  if (isBareVirtualElement(targets)) {
    polyfillElementPrototypeProperties(targets);
  }

  var instances = getArrayOfElements(targets).reduce(function (acc, reference) {
    var instance = reference && createTippy(reference, props);

    if (instance) {
      acc.push(instance);
    }

    return acc;
  }, []);
  return isSingular(targets) ? instances[0] : instances;
}
/**
 * Static props
 */


tippy.version = version;
tippy.defaults = defaultProps;
/**
 * Static methods
 */

tippy.setDefaults = function (partialDefaults) {
  Object.keys(partialDefaults).forEach(function (key) {
    // @ts-ignore
    defaultProps[key] = partialDefaults[key];
  });
};

tippy.hideAll = hideAll;
tippy.group = group;
/**
 * Auto-init tooltips for elements with a `data-tippy="..."` attribute
 */

function autoInit() {
  arrayFrom(document.querySelectorAll('[data-tippy]')).forEach(function (el) {
    var content = el.getAttribute('data-tippy');

    if (content) {
      tippy(el, {
        content: content
      });
    }
  });
}

if (index_all_isBrowser) {
  setTimeout(autoInit);
}

/**
 * Injects a string of CSS styles to a style node in <head>
 */

function injectCSS(css) {
  if (index_all_isBrowser) {
    var style = document.createElement('style');
    style.type = 'text/css';
    style.textContent = css;
    style.setAttribute('data-tippy-stylesheet', '');
    var head = document.head;
    var firstStyleOrLinkTag = head.querySelector('style,link');

    if (firstStyleOrLinkTag) {
      head.insertBefore(style, firstStyleOrLinkTag);
    } else {
      head.appendChild(style);
    }
  }
}

injectCSS(css);

/* harmony default export */ var index_all = (tippy);
//# sourceMappingURL=index.all.js.map

// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/select/select.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// import popManager from '@views/select/popManager.vue';
;



 // import 'tippy.js/themes/light.css';

/* harmony default export */ var selectvue_type_script_lang_js_ = ({
  name: 'bk-select',
  components: {
    // popManager,
    bkOptionAll: option_all,
    bkSelectTag: select_tag
  },
  mixins: [emitter, z_index],
  props: {
    value: {
      type: [String, Number, Array],
      default: ''
    },
    multiple: Boolean,
    showSelectAll: Boolean,
    scrollHeight: {
      type: Number,
      default: 216
    },
    popoverMinWidth: Number,
    popoverWidth: Number,
    popoverOptions: {
      type: Object,

      default() {
        return {};
      }

    },
    placeholder: {
      type: String,
      default: ''
    },
    clearable: {
      type: Boolean,
      default: true
    },
    disabled: Boolean,
    readonly: Boolean,
    loading: Boolean,
    searchable: Boolean,
    searchIgnoreCase: {
      type: Boolean,
      default: true
    },
    searchPlaceholder: {
      type: String,
      default: ''
    },
    size: {
      type: String,
      default: '',

      validator(val) {
        return ['', 'large', 'small'].includes(val);
      }

    },
    remoteMethod: {
      type: Function
    },
    emptyText: {
      type: String,
      default: '暂无数据'
    },
    // normal: 12px
    // medium: 14px
    // large: 16px
    fontSize: {
      type: String,
      default: 'normal'
    },
    // 外部设置的 class name
    extCls: {
      type: String,
      default: ''
    },
    // 外部设置的 popover class name
    extPopoverCls: {
      type: String,
      default: ''
    },
    prefixIcon: {
      type: String,
      default: ''
    },
    displayTag: Boolean,
    collapseTag: {
      type: Boolean,
      default: true
    },
    list: Array,
    idKey: {
      type: String,
      default: 'id'
    },
    displayKey: {
      type: String,
      default: 'name'
    },
    itemHeight: {
      type: Number,
      default: 32
    }
  },

  provide() {
    return {
      select: this,
      optionGroup: null
    };
  },

  data() {
    let selected = this.value;

    if (this.multiple && !Array.isArray(selected)) {
      selected = [];
    }

    return {
      ready: false,
      focus: false,
      selected: selected,
      options: [],
      optionsMap: {},
      selectedOptions: this.multiple ? [] : null,
      defaultWidth: 0,
      selectSize: this.size,
      searchValue: '',
      searchTimer: null,
      searchLoading: false,
      popInstance: null
    };
  },

  computed: {
    selectedName() {
      if (this.selectedOptions) {
        if (this.multiple) {
          return this.selectedOptions.map(option => option.name).join(',');
        }

        return this.selectedOptions.name;
      }

      return null;
    },

    isRemoteSearch() {
      return typeof this.remoteMethod === 'function';
    },

    shouldUpdate() {
      return !this.isRemoteSearch || !this.searchValue;
    },

    isUnselected() {
      if (this.multiple) {
        return !this.selected.length;
      }

      return this.selected === '';
    },

    unmatchedCount() {
      return this.options.filter(option => option.unmatched).length;
    },

    localPlaceholder() {
      return this.placeholder; //? this.placeholder : this.t('bk.select.pleaseselect');
    },

    dropdownActive() {
      return !(this.disabled || this.loading || this.readonly);
    },

    popoverStyle() {
      return {
        width: (this.popoverWidth ? this.popoverWidth : this.defaultWidth) + 'px',
        minWidth: (this.popoverMinWidth ? this.popoverMinWidth : this.defaultWidth) + 'px'
      };
    },

    fontSizeCls() {
      let cls = '';

      if (this.fontSize === 'medium') {
        cls = 'medium-font';
      } else if (this.fontSize === 'large') {
        cls = 'large-font';
      }

      return cls;
    },

    wrapperCls() {
      const wrapperCls = [];

      if (this.selectSize) {
        wrapperCls.push(`bk-select-${this.selectSize}`);
      }

      return wrapperCls;
    },

    popoverCls() {
      const wrapperCls = [];

      if (this.selectSize) {
        wrapperCls.push(`bk-select-popover-${this.selectSize}`);
      }

      return wrapperCls;
    },

    localSearchPlaceholder() {
      return this.searchPlaceholder; //? this.searchPlaceholder : this.t('bk.select.searchPlaceholder');
    }

  },
  watch: {
    value(value) {
      if (!this.isSame(value, this.selected)) {
        this.selected = value;
      }
    },

    focus(focus) {
      if (!focus) {
        this.resetSearchValue();
        this.dispatch('bk-form-item', 'form-blur');
      }

      this.$nextTick(() => {
        this.$emit('toggle', focus);
        this.dispatch('bk-form-item', 'form-focus');
      });
    },

    dropdownActive() {
      this.setDropdownState();
    },

    searchValue(val) {
      this.searchTimer && clearTimeout(this.searchTimer);
      this.searchTimer = setTimeout(() => {
        if (this.isRemoteSearch) {
          this.remoteSearch();
        } else {
          this.search();
        }
      }, 100);
    },

    selected(value, oldValue) {
      if (this.shouldUpdate) {
        this.setSelectedOptions();
      }

      this.$emit('input', value);
      this.$emit('change', value, oldValue);
    },

    list: {
      handler(val) {
        if (this.enableVirtualScroll) {
          this.optionsMap = {};
          this.options = val.map(option => ({ ...option,
            id: option[this.idKey],
            name: option[this.displayKey],
            lowerName: String(option[this.displayKey]).toLowerCase(),
            unmatched: false
          })); // 分开赋值提高性能

          this.options.forEach(option => {
            this.optionsMap[option.id] = option;
          });
        }
      },

      immediate: true
    },

    options() {
      this.setSelectedOptions();
    },

    size(val) {
      this.selectSize = val;
    },

    multiple(v) {
      if (v) {
        this.selectedOptions = [];
        this.selected = [];
      }
    }

  },

  mounted() {
    this.defaultWidth = this.$el.offsetWidth;
    const self = this;
    this.popInstance = index_all(this.$refs.bkSelect, {
      content: this.$refs.selectDropdown,
      theme: 'bk-select-pop',
      placement: 'top',
      interactive: true,
      appendTo: document.body,
      arrow: false,
      trigger: 'click',
      offset: 0,
      distance: 0 // onShow(instance) {
      //     instance.setContent(self.$refs.selectDropdown);
      // },

    });
  },

  created() {
    this.$nextTick(() => {
      this.setSelectedOptions();
    });
  },

  methods: {
    setSelectedOptions() {
      if (this.multiple) {
        const existOptions = this.selectedOptions.filter(option => this.selected.includes(option.id));
        const newSelected = this.selected.filter(value => !existOptions.some(option => option.id === value));
        newSelected.forEach(value => {
          const option = this.optionsMap[value];

          if (option) {
            existOptions.push(option);
          }
        });
        const selectedOptions = [];
        this.selected.forEach(value => {
          const option = existOptions.find(option => option.id === value);

          if (option) {
            selectedOptions.push(option);
          }
        });
        this.selectedOptions = selectedOptions;
      } else {
        this.selectedOptions = this.optionsMap[this.selected];
      }
    },

    // getPopover() {
    //     return this.$refs.selectDropdown;
    // },
    // getPopoverInstance() {
    //     return this.$refs.selectDropdown.getInstance();
    // },
    close() {
      // const popover = this.getPopover();
      // popover.handlePopHidden(100);
      this.popInstance.hide();
    },

    show() {// const popover = this.getPopover();
      // popover.handlePopShowByTarget(
      //     this.$el,
      //     {
      //         arrow: false,
      //         placement: 'top',
      //         offset: 0,
      //         distance: 0,
      //         theme: 'bk-select-pop',
      //     },
      //     100,
      // );
    },

    handleDropdownShow() {
      this.defaultWidth = this.$el.offsetWidth;
      this.focus = true;
    },

    handleDropdownHide() {
      this.focus = false;
    },

    registerOption(option) {
      if (this.enableVirtualScroll) return;
      this.options.push(option);
      this.$set(this.optionsMap, option.id, option);
    },

    removeOption(option) {
      if (this.enableVirtualScroll) return;
      const index = this.options.indexOf(option);

      if (index > -1) {
        this.options.splice(index, 1);
      }
    },

    selectOption(option) {
      if (this.multiple) {
        if (!this.shouldUpdate) {
          this.selectedOptions.push(option);
        }

        this.selected = [...this.selected, option.id];
      } else {
        if (!this.shouldUpdate) {
          this.selectedOptions = option;
        }

        this.selected = option.id;
        this.close();
      }

      this.$nextTick(() => {
        this.$emit('selected', this.selected, this.selectedOptions);
      });
    },

    unselectOption(option) {
      if (this.multiple) {
        if (!this.shouldUpdate) {
          this.selectedOptions = this.selectedOptions.filter(selectedOption => selectedOption.id !== option.id);
        }

        this.selected = this.selected.filter(value => value !== option.id);
      } else {
        this.setSelectedOptions = null;
        this.reset();
      }

      this.$nextTick(() => {
        this.$emit('selected', this.selected, this.selectedOptions);
      });
    },

    reset() {
      const prevSelected = this.multiple ? [...this.selected] : this.selected;
      this.selected = this.multiple ? [] : '';
      this.$emit('clear', prevSelected);
    },

    selectAll() {
      this.selected = this.options.filter(option => !option.disabled).map(option => option.id);
    },

    search() {
      this.searchLoading = true;
      let searchValue = String(this.searchValue).trim();

      if (searchValue) {
        if (this.searchIgnoreCase) {
          searchValue = searchValue.toLowerCase();
        }

        this.options.forEach(option => {
          if (this.searchIgnoreCase) {
            option.unmatched = option.lowerName.indexOf(searchValue) < 0;
          } else {
            option.unmatched = option.name.indexOf(searchValue) < 0;
          }
        });
      } else {
        this.options.forEach(option => {
          option.unmatched = false;
        });
      }

      this.searchLoading = false;
    },

    async remoteSearch() {
      try {
        this.searchLoading = true;
        await this.remoteMethod(this.searchValue);
      } catch (e) {
        console.error(e);
      } finally {
        this.searchLoading = false;
      }
    },

    resetSearchValue() {
      this.searchValue = '';
    },

    isSame(source, target) {
      const isArray = Array.isArray(source) && Array.isArray(target);

      if (isArray) {
        if (source.length !== target.length) {
          return false;
        }

        return !source.some((value, index) => value !== target[index]);
      }

      return source === target;
    },

    handleClose() {
      this.close();
      this.$refs.bkSelect && this.$refs.bkSelect.focus();
    }

  }
});
// CONCATENATED MODULE: ./src/views/select/select.vue?vue&type=script&lang=js&
; /* harmony default export */ var select_selectvue_type_script_lang_js_ = (selectvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/select/select.vue?vue&type=style&index=0&id=748b4645&lang=less&scoped=true&

// CONCATENATED MODULE: ./src/views/select/select.vue?vue&type=style&index=1&lang=less&

// CONCATENATED MODULE: ./src/views/select/select.vue
;


;



/* normalize component */

var select_component = normalizeComponent(
  select_selectvue_type_script_lang_js_,
  selectvue_type_template_id_748b4645_scoped_true_render,
  selectvue_type_template_id_748b4645_scoped_true_staticRenderFns,
  false,
  null,
  "748b4645",
  null
  
)

/* hot reload */
if (false) { var select_api; }
select_component.options.__file = "src/views/select/select.vue"
/* harmony default export */ var select_select = (select_component.exports);
// CONCATENATED MODULE: ./src/views/select/index.js

;

function setInstaller(component, afterInstall) {
  component.install = (Vue, options = {}) => {
    const props = component.props || {};
    Object.keys(options).forEach(key => {
      if (props.hasOwnProperty(key)) {
        if (typeof props[key] === 'function' || props[key] instanceof Array) {
          props[key] = {
            type: props[key],
            default: options[key]
          };
        } else {
          props[key].default = options[key];
        }
      }
    });
    component.name = options.namespace ? component.name.replace('bk', options.namespace) : component.name;
    Vue.component(component.name, component);
    typeof afterInstall === 'function' && afterInstall(Vue, options);
  };
}

setInstaller(select_select, (Vue, options) => {});
/* harmony default export */ var views_select = (select_select);
// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/select/option.vue?vue&type=template&id=291e353e&
var optionvue_type_template_id_291e353e_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "li",
    {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: !_vm.unmatched,
          expression: "!unmatched"
        }
      ],
      staticClass: "bk-option",
      class: {
        "is-selected": _vm.isSelected,
        "is-disabled": _vm.disabled,
        "is-highlight": _vm.isHighlight
      },
      on: { click: _vm.handleOptionClick }
    },
    [
      _c(
        "div",
        { staticClass: "bk-option-content" },
        [
          _vm._t("default", [
            _c(
              "div",
              {
                staticClass: "bk-option-content-default",
                attrs: { title: _vm.name }
              },
              [
                _vm.select.multiple && _vm.isSelected
                  ? _c("i", {
                      staticClass: "bk-option-icon bk-icon icon-check-1"
                    })
                  : _vm._e(),
                _vm._v(" "),
                _c(
                  "span",
                  {
                    staticClass: "bk-option-name",
                    class: _vm.select.fontSizeCls
                  },
                  [
                    _vm._v(
                      "\n                    " +
                        _vm._s(_vm.name) +
                        "\n                "
                    )
                  ]
                )
              ]
            )
          ])
        ],
        2
      )
    ]
  )
}
var optionvue_type_template_id_291e353e_staticRenderFns = []
optionvue_type_template_id_291e353e_render._withStripped = true


// CONCATENATED MODULE: ./src/views/select/option.vue?vue&type=template&id=291e353e&

// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/select/option.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var optionvue_type_script_lang_js_ = ({
  name: 'bk-option',
  props: {
    id: {
      type: [String, Number],
      required: true
    },
    name: {
      type: [String, Number],
      required: true
    },
    disabled: Boolean
  },
  inject: ['select', 'optionGroup'],

  data() {
    return {
      unmatched: false,
      isHighlight: false // todo: 解决性能问题，暂时关闭键盘上下键选择的功能

    };
  },

  computed: {
    isSelected() {
      if (this.select.multiple && Array.isArray(this.select.selected)) {
        return this.select.selected.includes(this.id);
      }

      return this.select.selected === this.id;
    },

    lowerName() {
      return String(this.name).toLowerCase();
    }

  },

  created() {
    this.select.registerOption(this);

    if (this.optionGroup) {
      this.optionGroup.registerOption(this);
    }
  },

  beforeDestroy() {
    this.select.removeOption(this);

    if (this.optionGroup) {
      this.optionGroup.removeOption(this);
    }
  },

  methods: {
    handleOptionClick() {
      if (this.disabled) {
        return false;
      }

      const select = this.select;

      if (this.isSelected && select.multiple) {
        select.unselectOption(this);
      } else if (!this.isSelected) {
        select.selectOption(this);
      }

      if (!select.multiple) {
        select.close();
      }
    }

  }
});
// CONCATENATED MODULE: ./src/views/select/option.vue?vue&type=script&lang=js&
; /* harmony default export */ var select_optionvue_type_script_lang_js_ = (optionvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/select/option.vue
;




/* normalize component */
;
var option_component = normalizeComponent(
  select_optionvue_type_script_lang_js_,
  optionvue_type_template_id_291e353e_render,
  optionvue_type_template_id_291e353e_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var option_api; }
option_component.options.__file = "src/views/select/option.vue"
/* harmony default export */ var select_option = (option_component.exports);
// CONCATENATED MODULE: ../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/formItem.vue?vue&type=template&id=040b36de&scoped=true&
var formItemvue_type_template_id_040b36de_scoped_true_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "bkcp-form-item" }, [
    _c(
      "label",
      {
        class: ["bkcp-form-label", { dotted: !!_vm.tip }],
        attrs: { "data-tips": _vm.tip }
      },
      [_vm._v(_vm._s(_vm.label))]
    ),
    _vm._v(" "),
    _c("div", { staticClass: "bkcp-form-content" }, [_vm._t("default")], 2)
  ])
}
var formItemvue_type_template_id_040b36de_scoped_true_staticRenderFns = []
formItemvue_type_template_id_040b36de_scoped_true_render._withStripped = true


// CONCATENATED MODULE: ./src/views/formItem.vue?vue&type=template&id=040b36de&scoped=true&

// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/formItem.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
;
/* harmony default export */ var formItemvue_type_script_lang_js_ = ({
  name: 'bk-form-item',
  props: {
    label: {
      type: String,
      default: ''
    },
    tip: {
      type: String,
      default: ''
    }
  },

  mounted() {
    index_all('.bkcp-form-label.dotted', {
      content(reference) {
        const tips = reference.getAttribute('data-tips');
        return `<span style="text-align:left;display: inline-block">${tips}</span>`;
      },

      interactive: true,
      appendTo: document.body,
      arrow: true,
      placement: 'left-start'
    });
  }

});
// CONCATENATED MODULE: ./src/views/formItem.vue?vue&type=script&lang=js&
; /* harmony default export */ var views_formItemvue_type_script_lang_js_ = (formItemvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/formItem.vue?vue&type=style&index=0&id=040b36de&lang=less&scoped=true&

// CONCATENATED MODULE: ./src/views/formItem.vue
;


;


/* normalize component */

var formItem_component = normalizeComponent(
  views_formItemvue_type_script_lang_js_,
  formItemvue_type_template_id_040b36de_scoped_true_render,
  formItemvue_type_template_id_040b36de_scoped_true_staticRenderFns,
  false,
  null,
  "040b36de",
  null
  
)

/* hot reload */
if (false) { var formItem_api; }
formItem_component.options.__file = "src/views/formItem.vue"
/* harmony default export */ var formItem = (formItem_component.exports);
// CONCATENATED MODULE: ./src/store.ts
class BKStore {
    constructor() {
        this.init();
    }
    init() {
        this.store = {};
        this.watcher = {};
    }
    setStore(key, value) {
        Object.assign(this.store, { [key]: value });
    }
    getStore(key) {
        if (key === undefined) {
            return this.store;
        }
        else {
            return this.store[key];
        }
    }
    addWatcher(eventName, callbackFn) {
        if (!this.watcher[eventName]) {
            this.watcher[eventName] = [];
        }
        this.watcher[eventName].push(callbackFn);
    }
    getWatcher(eventName) {
        return this.watcher[eventName] || [];
    }
    emitEvent(eventName, args) {
        this.getWatcher(eventName).forEach((fn) => {
            typeof fn === 'function' ? fn.call(this, ...args) : console.log('function not found:', fn);
        });
    }
    removeWatcher(eventName, callbakcFn) {
        if (callbakcFn !== null && callbakcFn !== undefined) {
            const events = this.getWatcher(eventName);
            const index = events.findIndex((fn) => fn === callbakcFn);
            if (index >= 0) {
                events.splice(index, 1);
            }
        }
        else {
            let events = this.getWatcher(eventName);
            events = [];
        }
    }
    destroy() {
        this.store = null;
        this.watcher = null;
    }
}
const BKSTORE_KEY = '__BK_CHARTS_PANEL_STORE__';
const BKSTORE_INDEX_MANAGER = '__BKSTORE_INDEX_MANAGER__';
if (!window[BKSTORE_KEY]) {
    window[BKSTORE_KEY] = {};
}
const bkStore = new Proxy(window[BKSTORE_KEY], {
    get(obj, prop) {
        const BKSTORE_KEY_INDEX = `${BKSTORE_KEY}${prop}`;
        if (obj[BKSTORE_KEY_INDEX] === undefined) {
            obj[BKSTORE_KEY_INDEX] = new BKStore();
        }
        return obj[BKSTORE_KEY_INDEX];
    },
    set: (target, key, value) => {
        target[key] = value;
        return true;
    },
});
let store_hasInitZIndex = false;
// tslint:disable-next-line:variable-name
let _storeIndex;
function initStoreIndex() {
    if (!window[BKSTORE_INDEX_MANAGER]) {
        window[BKSTORE_INDEX_MANAGER] = {
            nextZIndex(storeIndex) {
                return storeIndex === undefined ? window[BKSTORE_INDEX_MANAGER].storeIndex++ : storeIndex;
            },
        };
        Object.defineProperty(window[BKSTORE_INDEX_MANAGER], 'storeIndex', {
            configurable: true,
            get() {
                if (!store_hasInitZIndex) {
                    _storeIndex = _storeIndex || 0;
                    store_hasInitZIndex = true;
                }
                return _storeIndex;
            },
            set(value) {
                _storeIndex = value;
            },
        });
    }
}
initStoreIndex();
const storeIndexManager = window[BKSTORE_INDEX_MANAGER];


// CONCATENATED MODULE: ./src/utils.ts
/**
 * 深拷贝扩展对象
 * @param target
 * @param ...sources
 * @returns {object}
 */
function deepAssign(target, ...sources) {
    const sourcesArray = [...sources];
    const length = sourcesArray.length;
    if (typeof target !== 'object' && typeof target !== 'function') {
        target = {};
    }
    if (length === 0) {
        target = {};
    }
    sourcesArray.forEach((source) => {
        for (const key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                const targetValue = target[key];
                if (Array.isArray(targetValue)) {
                    target[key].push(...(source[key] || []));
                }
                else if (typeof targetValue === 'object') {
                    target[key] = deepAssign(targetValue, source[key]);
                }
                else {
                    target[key] = source[key];
                }
            }
        }
    });
    return target;
}
/**
 * 以 baseColor 为基础生成随机颜色
 *
 * @param {string} baseColor 基础颜色
 * @param {number} count 随机颜色个数
 *
 * @return {Array} 颜色数组
 */
function randomColor(baseColor, count) {
    const segments = baseColor.match(/[\da-z]{2}/g) || [];
    const segmentsNumber = new Array(segments.length).fill(0);
    // 转换成 rgb 数字
    for (let i = 0; i < segments.length; i++) {
        segmentsNumber[i] = parseInt(segments[i], 16);
    }
    const ret = [];
    // 生成 count 组颜色，色差 20 * Math.random
    for (let i = 0; i < count; i++) {
        ret[i] =
            '#' +
                Math.floor(segmentsNumber[0] + (Math.random() < 0.5 ? -1 : 1) * Math.random() * 20).toString(16) +
                Math.floor(segmentsNumber[1] + (Math.random() < 0.5 ? -1 : 1) * Math.random() * 20).toString(16) +
                Math.floor(segmentsNumber[2] + (Math.random() < 0.5 ? -1 : 1) * Math.random() * 20).toString(16);
    }
    return ret;
}
function randomRgba(count = 0, opacity = 1) {
    function getRandomRgb() {
        const num = Math.round(0xffffff * Math.random());
        // tslint:disable-next-line:no-bitwise
        const r = num >> 16;
        // tslint:disable-next-line:no-bitwise
        const g = (num >> 8) & 255;
        // tslint:disable-next-line:no-bitwise
        const b = num & 255;
        return `rgba(${r}, ${g}, ${b}, ${opacity})`;
    }
    return new Array(count).fill('').map((color) => getRandomRgb());
}
function getStoreIndex(el) {
    const target = el.closest('[data-store-index]');
    if (target) {
        return target.getAttribute('data-store-index');
    }
    return undefined;
}

// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/chart.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
;







/* harmony default export */ var chartvue_type_script_lang_js_ = ({
  components: {
    bkSelect: views_select,
    bkOption: select_option,
    bkFormItem: formItem
  },
  props: {
    type: {
      type: String,
      default: 'line'
    },
    width: {
      type: [String, Number],
      default: 'auto'
    },
    height: {
      type: [String, Number],
      default: 'auto'
    },
    columns: {
      type: Array,
      default: () => []
    },
    list: {
      type: Array,
      default: () => []
    },
    activeIndex: {
      type: Number,
      default: 1
    }
  },

  data() {
    return {
      instance: null,
      advanceSetting: false,
      colorCollection: ['rgba(51,157,255,1.00)', 'rgba(59,206,149,1.00)', 'rgba(248,211,15,1.00)', 'rgba(255,156,74,1.00)', 'rgba(255,111,114,1.00)', 'rgba(181,104,255,1.00)', 'rgba(118,105,255,1.00)', 'rgba(141,165,207,1.00)', 'rgba(247, 214, 177,1.00)', 'rgba(114, 163, 115,1.00)', 'rgba(140, 129, 70,1.00)', 'rgba(183, 221, 234,1.00)'],
      formData: {
        chartType: '',
        yField: '',
        xField: '',
        groupBy: '',
        title: '',
        xTitle: '',
        yTitle: '',
        order: 'none',
        size: 10
      },
      storeKey: '',
      isLastConfig: false,

      /** 用于缓存每个Tab下面的配置 */
      cachedCfg: {}
    };
  },

  watch: {
    activeIndex: {
      handler(val) {
        this.$nextTick(() => {
          if (Object.prototype.hasOwnProperty.call(this.cachedCfg, val)) {
            Object.assign(this.formData, this.cachedCfg[val]);
          } else {
            this.formData.chartType = this.selectedChartTypeItem.type;
          }
        });
      }

    },
    formData: {
      deep: true,

      handler(val, oldVal) {
        this.handleInitFormData(val, oldVal);
      }

    },
    columns: {
      deep: true,

      handler(val) {
        ['yField', 'xField', 'groupBy', 'size'].forEach(fieldName => {
          if (!(val || []).includes(this.formData[fieldName])) {
            this.$set(this.formData, fieldName, '');
          }
        });
        this.updateChartInstance();
      }

    }
  },
  computed: {
    labelTips() {
      return {
        line: {
          x: '一般为时间字段',
          y: '一般为数值型字段',
          groupBy: '选择分组后，根据分组字段的内容，显示多条曲线。 例如：按性别显示7天的访问人数，性别为分组字段。'
        },
        bar: {
          x: this.isHorizontal ? '一般为数值型字段' : '一般为时间字段',
          y: this.isHorizontal ? '一般为时间字段' : '一般为数值型字段',
          groupBy: '选择分组后，根据分组字段的内容， 显示多个矩形。 例如：呈现每个省份今年的出生人口， 其中性别可以作为分组字段。'
        },
        pie: {
          x: '一般为数值型字段，如访问人数',
          y: '数据分组名称，如来源渠道'
        },
        bubble: {
          x: '一般为数值型字段，如语文成绩',
          y: '一般为数值型字段，如数学成绩',
          groupBy: '数据分组名称，如考生姓名',
          size: '一般为数值型字段，如成绩总分'
        }
      };
    },

    calcActiveTypeIconName() {
      return `bkcp-icon bkcp-${this.selectedChartTypeItem.icon}`;
    },

    activeIconName() {
      return this.advanceSetting ? 'bkcp-angle-double-up' : 'bkcp-angle-double-down';
    },

    chartTypeList() {
      return [{
        id: 'line',
        name: '折线图',
        parent: 'line',
        type: 'line',
        icon: 'line-chart',
        dataset: {
          fill: false,
          pointRadius: 0
        },
        option: {
          crosshair: {
            enabled: true,
            line: {
              color: '#C4C6CC',
              width: 1,
              dashPattern: [4, 4]
            }
          },
          scales: {
            xAxes: {
              gridLines: {
                display: false
              }
            },
            yAxes: {
              gridLines: {
                display: true
              }
            }
          }
        },
        renderFn: this.handleLinearChartRender,
        config: {
          xAxis: {
            title: 'X轴',
            enabled: true,

            /** 是否标签 */
            isLabel: true
          },
          yAxis: {
            title: 'Y轴',
            enabled: true,
            isLabel: true
          },
          order: false,
          group: true
        },
        help: {
          content: '用于表示连续时间范围内的连续数据。它通常用于显示数据中的趋势和关系。数据值绘制为使用线段连接的数据点。 该图表广泛用于显示连续数据，例如温度，每季度收益，实验科学数据等。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }, {
        id: 'line-fill',
        name: '面积图',
        parent: 'line',
        type: 'line',
        icon: 'area-chart-2',
        dataset: {
          fill: true,
          pointRadius: 0
        },
        option: {
          crosshair: {
            enabled: true,
            line: {
              color: '#fe6673',
              width: 1,
              dashPattern: [4, 4]
            }
          },
          scales: {
            xAxes: {
              gridLines: {
                display: false
              }
            },
            yAxes: {
              gridLines: {
                display: true
              }
            }
          }
        },
        renderFn: this.handleLinearChartRender,
        config: {
          xAxis: {
            title: 'X轴',
            enabled: true,

            /** 是否标签 */
            isLabel: true
          },
          yAxis: {
            title: 'Y轴',
            enabled: true,
            isLabel: true
          },
          order: false,
          group: true
        },
        help: {
          content: '功能与折线图相同，只是面积图填充了折线和阈值之间的区域，默认情况下为0。 该图表广泛用于显示连续数据，例如温度，年季度收益，实验科学数据等。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }, {
        id: 'bar',
        name: '基础柱状图',
        parent: 'bar',
        type: 'bar',
        icon: 'bar-vertical-chart',
        option: {},
        renderFn: this.handleLinearChartRender,
        config: {
          xAxis: {
            title: 'X轴',
            enabled: true,

            /** 是否标签 */
            isLabel: true
          },
          yAxis: {
            title: 'Y轴',
            enabled: true,
            isLabel: true
          },
          order: true,
          group: true
        },
        help: {
          content: '使用图形的长度、宽度、位置、面积、角度和颜色来比较数值的大小，通常用于展示不同分类间的数值对比。 该图表在一个轴上使用垂直对齐的矩形条作为数据图，对另一个轴上显示的离散值进行绘制。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }, {
        id: 'horizontalBar',
        name: '横向柱状图',
        parent: 'bar',
        icon: 'bar-horizontal-chart',
        type: 'horizontalBar',
        option: {},
        renderFn: this.handleLinearChartRender,
        config: {
          xAxis: {
            title: 'X轴',
            enabled: true,

            /** 是否标签 */
            isLabel: true
          },
          yAxis: {
            title: 'Y轴',
            enabled: true,
            isLabel: true
          },
          order: true,
          group: true
        },
        help: {
          content: '用于表示定量信息。 该图表由水平对齐的等宽矩形条组成，其长度与它们所代表的值成比例，这有助于即时比较数据。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }, {
        id: 'bar-stack',
        name: '堆叠柱状图',
        parent: 'bar',
        icon: 'bar-vertical-stack-chart',
        type: 'bar',
        option: {
          yAxes: {
            stacked: true
          },
          xAxes: {
            stacked: true
          }
        },
        renderFn: this.handleLinearChartRender,
        config: {
          xAxis: {
            title: 'X轴',
            enabled: true,

            /** 是否标签 */
            isLabel: true
          },
          yAxis: {
            title: 'Y轴',
            enabled: true,
            isLabel: true
          },
          order: true,
          group: true,
          stacked: true
        },
        help: {
          content: '用于可视化单个图表上的两个数据集。 该图表在一个轴上使用垂直对齐的矩形条作为数据图，相对于另一条图上显示的离散值进行绘制。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }, {
        id: 'horizontalBar-stack',
        name: '横向堆叠图',
        parent: 'bar',
        icon: 'bar-horizontal-stack-chart',
        type: 'horizontalBar',
        option: {
          yAxes: {
            stacked: true
          },
          xAxes: {
            stacked: true
          }
        },
        renderFn: this.handleLinearChartRender,
        config: {
          xAxis: {
            title: 'X轴',
            enabled: true,

            /** 是否标签 */
            isLabel: true
          },
          yAxis: {
            title: 'Y轴',
            enabled: true,
            isLabel: true
          },
          order: true,
          group: true,
          stacked: true
        },
        help: {
          content: '用于可视化单个图表上的两个数据集。 该图表在一个轴上使用水平对齐的矩形条作为数据图，相对于另一条图上显示的离散值进行绘制。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }, {
        id: 'pie',
        name: '饼图',
        parent: 'pie',
        type: 'pie',
        icon: 'pie-chart',
        dataset: {
          borderAlign: 'center',
          borderColor: '#fff',
          borderWidth: 2,
          clip: 1.5,
          hoverBorderColor: 'rgba(0, 0, 0, 0.1)',
          hoverBorderWidth: 1,
          weight: 1
        },
        option: {
          cutoutPercentage: 0,
          circumference: 6.283185307179586,
          rotation: -1.5707963267948966,
          animation: {
            animateRotate: true,
            animateScale: false
          }
        },
        renderFn: this.handlePieChartRender,
        config: {
          xAxis: {
            title: '分组',
            enabled: true,

            /** 是否标签 */
            isLabel: false
          },
          yAxis: {
            title: '指标',
            enabled: true,
            isLabel: false
          },
          order: false,
          group: false
        },
        help: {
          content: '使用图形的长度、宽度、位置、面积、角度和颜色来比较数值 的大小，通常用于展示不同分类间的数值对比。 该图表可用于描述构成整体的组成部分所占的份额。因变量的大小与曲线图圆周上的弧长成正比。径向线用于将圆弧连接到圆心，从而将饼分成多个切片。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }, {
        id: 'doughnut',
        name: '环形图',
        parent: 'pie',
        icon: 'donut-chart',
        type: 'doughnut',
        option: {
          cutoutPercentage: 50,
          circumference: 6.283185307179586,
          rotation: -1.5707963267948966,
          animation: {
            animateRotate: true,
            animateScale: false
          }
        },
        renderFn: this.handlePieChartRender,
        config: {
          xAxis: {
            title: '指标',
            enabled: true,

            /** 是否标签 */
            isLabel: false
          },
          yAxis: {
            title: 'Y轴',
            enabled: false,
            isLabel: false
          },
          order: false,
          group: false
        },
        help: {
          content: '是饼图的一种变体，其中心有一个空格，以显示有关所绘制数据的有用信息。在描述组成部分作为整体一部分的份额时很有用。 它还使用户可以通过切出片来突出显示数据点。因变量的大小与图表圆周上的弧长成正比，用于显示构成100％的数据组成。就像可视化按年龄组划分的人口一样，产品类别对利润的贡献。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }, {
        id: 'bubble',
        name: '气泡图',
        parent: 'scatter',
        type: 'bubble',
        icon: 'bubble-chart',
        option: {
          tooltips: {
            mode: 'nearest',
            intersect: true
          },
          scales: {
            xAxes: {
              gridLines: {
                display: false
              }
            },
            yAxes: {
              gridLines: {
                display: true
              }
            }
          }
        },
        renderFn: this.handleScatterChartRender,
        config: {
          xAxis: {
            title: 'X轴',
            enabled: true,

            /** 是否标签 */
            isLabel: true
          },
          yAxis: {
            title: 'Y轴',
            enabled: true,
            isLabel: true
          },
          size: {
            enabled: true,
            title: '气泡大小'
          },
          order: false,
          group: true
        },
        help: {
          content: '用于可视化由三个数字变量定义的数据。两个变量将点定位在x轴和y轴上，第三个变量由气泡的直径表示。 此图表用于通过气泡和圆圈的位置和比例来比较和描绘变量之间的关系。它还用于分析数据的模式和趋势。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }, {
        id: 'scatter',
        name: '散点图',
        parent: 'scatter',
        icon: 'scatter-chart',
        type: 'scatter',
        option: {
          scales: {
            xAxes: {
              type: 'linear',
              position: 'bottom',
              gridLines: {
                display: false
              }
            },
            yAxes: {
              gridLines: {
                display: true
              }
            }
          },
          tooltips: {
            mode: 'nearest',
            intersect: true
          }
        },
        dataset: {
          pointRadius: 5
        },
        renderFn: this.handleScatterChartRender,
        config: {
          xAxis: {
            title: 'X轴',
            enabled: true,

            /** 是否标签 */
            isLabel: true
          },
          yAxis: {
            title: 'Y轴',
            enabled: true,
            isLabel: true
          },
          order: false,
          group: true
        },
        help: {
          content: '基于x轴变为线性轴的基本折线图。 要使用散点图，必须将数据作为包含X和Y属性的对象进行传递。',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        }
      }];
    },

    selecttedConfig() {
      return this.selectedChartTypeItem.config;
    },

    selectedTypeHelp() {
      return {
        title: (this.selectedChartTypeItem || {}).name || '选择图表类型',
        ...((this.selectedChartTypeItem || {}).help || {
          content: '图表形式展示查询结果',
          link: 'https://bkcharts.bk.tencent.com/#/docs'
        })
      };
    },

    selectedTypeTips() {
      return this.labelTips[this.selectedChartTypeItem.type] || {};
    },

    selectedChartTypeItem() {
      return this.calcChartTypeList.find(item => item.id === this.formData.chartType) || this.calcChartTypeList[0];
    },

    calcChartTypeList() {
      return this.chartTypeList.filter(item => item.parent === this.type);
    },

    calcChartType() {
      return this.selectedChartTypeItem.type || 'line';
    },

    calcStyle() {
      return {
        width: typeof this.width === 'number' ? this.width : 'auto',
        height: typeof this.height === 'number' ? this.height : 'auto'
      };
    },

    calcXfields() {
      return this.columns.filter(col => col !== this.formData.yField);
    },

    calcYfields() {
      return this.columns.filter(col => col !== this.formData.xField);
    },

    calcGroupByFields() {
      return this.columns.filter(col => ![this.formData.xField, this.formData.yField].includes(col));
    },

    isHorizontal() {
      return this.selectedChartTypeItem.type.indexOf('horizontal') >= 0;
    }

  },
  methods: {
    handleInitFormData(val, oldVal) {
      if (!val.chartType) {
        val.chartType = this.selectedChartTypeItem.type;
      }

      const copyVal = JSON.parse(JSON.stringify(val || '{}'));
      const copyOldVal = JSON.parse(JSON.stringify(oldVal || '{}'));
      bkStore[this.storeKey].emitEvent('option-changed', [copyVal, copyOldVal, this.isLastConfig]);
      this.isLastConfig = false;
      this.updateChartInstance();
      Object.assign(this.cachedCfg, {
        [this.activeIndex]: JSON.parse(JSON.stringify(val))
      });
      bkStore[this.storeKey].setStore('cachedCfg', this.cachedCfg);
    },

    handleInputChanged(e, fieldName) {
      this.$set(this.formData, fieldName, typeof e === 'string' ? e : e.target.value);
    },

    handleKeyEvent(e) {
      e.stopPropagation();
    },

    updateChartInstance() {
      const isXaxisNeed = this.selecttedConfig.xAxis.enabled ? !!this.formData.xField : true;
      const isYaxisNeed = this.selecttedConfig.yAxis.enabled ? !!this.formData.yField : true;
      bkStore[this.storeKey].setStore('bkChartsFormData', this.formData);

      if (isXaxisNeed && isYaxisNeed) {
        this.selectedChartTypeItem.renderFn.call(this, this.selectedChartTypeItem);
      }
    },

    handleSortClick(orderBy) {
      this.formData.order = orderBy;
    },

    handleAdvanceClick() {
      this.advanceSetting = !this.advanceSetting;
    },

    handleLinearChartRender(item) {
      const order = this.selecttedConfig.order && this.formData.order !== 'none'; // const isHorizontal = this.selectedChartTypeItem.type.indexOf('horizontal') >= 0;

      const groupByValues = this.getGroupByValues();
      const copyList = order ? JSON.parse(JSON.stringify(this.list)) : this.list;
      const orderField = this.isHorizontal ? this.formData.xField : this.formData.yField;

      if (order) {
        copyList.sort((a, b) => this.formData.order === 'desc' ? b[orderField] - a[orderField] : a[orderField] - b[orderField]);
      }

      const labelField = this.isHorizontal ? this.formData.yField : this.formData.xField;
      let labels = !groupByValues ? copyList.map(item => item[labelField]) : copyList.reduce((output, item) => {
        if (!output.includes(item[labelField])) {
          output.push(item[labelField]);
        }

        return output;
      }, []); // labels.sort((a, b) => a - b);

      if (this.selecttedConfig.stacked || groupByValues && groupByValues.length) {
        const uniqueLabels = [];
        labels.forEach(label => {
          if (!uniqueLabels.includes(label)) {
            uniqueLabels.push(label);
          }
        });
        labels = uniqueLabels;
      }

      const dataset = this.selectedChartTypeItem.dataset || {};
      const option = this.selectedChartTypeItem.option || {};
      const datasets = groupByValues ? groupByValues.map((value, index) => {
        const color = this.colorCollection[index % 12];
        return {
          label: value,
          borderColor: color,
          backgroundColor: this.getOpacityColor(color, 0.9),
          data: copyList.filter(item => item[this.formData.groupBy] === value).map(item => ({
            x: item[this.formData.xField],
            y: item[this.formData.yField]
          })),
          ...dataset,
          ...Object.assign({}, this.selecttedConfig.stacked ? {
            stack: `stack-0`
          } : {
            stack: `stack-${index}`
          })
        };
      }) : [{
        label: this.formData.yField,
        borderColor: this.getOpacityColor(this.colorCollection[0], 0.9),
        backgroundColor: this.getOpacityColor(this.colorCollection[0], 0.4),
        data: copyList.map(item => item[this.isHorizontal ? this.formData.xField : this.formData.yField]),
        ...dataset
      }];
      const options = deepAssign({}, option, {
        title: {
          display: !!this.formData.title,
          text: this.formData.title
        },
        scales: {
          yAxes: {
            scaleLabel: {
              display: !!this.formData.yTitle,
              labelString: this.formData.yTitle
            }
          },
          xAxes: {
            scaleLabel: {
              display: !!this.formData.xTitle,
              labelString: this.formData.xTitle
            }
          }
        }
      });
      this.renderChart(labels, datasets, options);
    },

    handlePieChartRender(item) {
      const dataset = this.selectedChartTypeItem.dataset || {};
      const labels = this.list.reduce((pre, item) => {
        if (!pre.includes(item[this.formData.xField])) {
          pre.push(item[this.formData.xField]);
        }

        return pre;
      }, []);
      const data = labels.map(label => {
        return this.list.filter(item => item[this.formData.xField] === label).reduce((pre, current) => {
          pre += typeof current[this.formData.yField] === 'number' ? current[this.formData.yField] : 0;
          return pre;
        }, 0);
      });
      const backgroundColor = this.getColorCollection(data.length).slice(0, data.length);
      const datasets = [{
        label: this.formData.yField,
        data,
        backgroundColor,
        ...dataset
      }];
      const option = this.selectedChartTypeItem.option || {};
      const options = deepAssign({}, option, {
        title: {
          display: !!this.formData.title,
          text: this.formData.title
        }
      });
      this.renderChart(labels, datasets, options);
    },

    handleScatterChartRender(item) {
      const dataset = this.selectedChartTypeItem.dataset || {};
      const isSizeNeed = this.selecttedConfig.size && this.selecttedConfig.size.enabled && this.formData.size;
      const groupByValues = this.getGroupByValues();
      const datasets = groupByValues ? groupByValues.map((value, index) => {
        const color = this.colorCollection[index % 12];
        return {
          label: value,
          borderColor: color,
          backgroundColor: this.getOpacityColor(color, 0.4),
          data: this.list.filter(item => item[this.formData.groupBy] === value).map(item => Object.assign({}, {
            y: item[this.formData.yField],
            x: item[this.formData.xField]
          }, isSizeNeed ? {
            r: item[this.formData.size]
          } : {})),
          ...dataset
        };
      }) : [{
        label: this.formData.yField,
        borderColor: this.colorCollection[0],
        backgroundColor: this.getOpacityColor(this.colorCollection[0], 0.4),
        data: this.list.map(item => Object.assign({}, {
          y: item[this.formData.yField],
          x: item[this.formData.xField]
        }, isSizeNeed ? {
          r: item[this.formData.size]
        } : {})),
        ...dataset
      }];
      const option = this.selectedChartTypeItem.option || {};
      const options = deepAssign({}, option, {
        title: {
          display: !!this.formData.title,
          text: this.formData.title
        },
        scales: {
          yAxes: {
            scaleLabel: {
              display: !!this.formData.yTitle,
              labelString: this.formData.yTitle
            }
          },
          xAxes: {
            scaleLabel: {
              display: !!this.formData.xTitle,
              labelString: this.formData.xTitle
            }
          }
        }
      });
      this.renderChart([], datasets, options);
    },

    renderChart(labels, datasets, options = {}) {
      if (this.instance) {
        this.instance.destroy();
      }

      const ctx = this.$refs['refChartCanvas'].getContext('2d');
      const cfg = {
        type: this.calcChartType,
        data: {
          datasets: datasets
        },
        options: {
          responsive: false,
          tooltips: {
            mode: 'index',
            intersect: false
          },
          ...options
        }
      };

      if (labels && labels.length) {
        deepAssign(cfg, {
          data: {
            labels
          }
        });
      }

      this.instance = new (bkcharts_default())(ctx, cfg);
    },

    getOpacityColor(rgba, opacity = 1) {
      return rgba.replace(/1.00/g, opacity);
    },

    getColorCollection(length) {
      const collLen = Math.ceil(length / 12);
      const output = [];
      return new Array(collLen).fill('').reduce((output, index) => [...this.colorCollection, ...output], []);
    },

    getGroupByValues() {
      let groupByValues = null;

      if (this.selecttedConfig.group && this.formData.groupBy) {
        groupByValues = [];
        this.list.forEach(item => {
          const groupByValue = item[this.formData.groupBy];

          if (!groupByValues.includes(groupByValue)) {
            groupByValues.push(groupByValue);
          }
        });
      }

      return groupByValues;
    },

    handleUpdateLastOptions(opt) {
      Object.assign(this.formData, opt || {});
      ['yField', 'xField', 'groupBy', 'size'].forEach(fieldName => {
        if (!(this.columns || []).includes(this.formData[fieldName])) {
          this.$set(this.formData, fieldName, '');
        }
      });

      if (this.formData.chartType !== this.selectedChartTypeItem.type) {
        this.formData.chartType = this.selectedChartTypeItem.type;
      }
      /**
       * 避免旧配置还原导致的渲染问题
       * 按照逻辑，分组字段和X轴字段&Y轴字段不能重复
       **/


      if ([this.formData.xField, this.formData.yField].includes(this.formData.groupBy)) {
        this.formData.groupBy = '';
      }

      this.isLastConfig = true;
    }

  },

  created() {
    this.storeKey = getStoreIndex(this.$parent.$el);
    const storedCacheCfg = bkStore[this.storeKey].getStore('cachedCfg');
    bkStore[this.storeKey].addWatcher('update-last-optoins', this.handleUpdateLastOptions);
    storedCacheCfg && Object.assign(this.cachedCfg, storedCacheCfg);
    const indexStr = `${this.activeIndex}`;

    if (Object.prototype.hasOwnProperty.call(this.cachedCfg, indexStr)) {
      Object.assign(this.formData, this.cachedCfg[indexStr]);
    } else {
      this.formData.chartType = this.selectedChartTypeItem.type;
    }
  },

  mounted() {
    index_all('#chart-type-help', {
      content(reference) {
        const template = document.getElementById('chart_help_content');
        return template.innerHTML;
      },

      theme: 'light',
      placement: 'right-start',
      interactive: true,
      appendTo: document.body,
      arrow: true
    });
  },

  beforeDestroy() {
    bkStore[this.storeKey].removeWatcher('update-last-optoins', this.handleUpdateLastOptions);
  }

});
// CONCATENATED MODULE: ./src/views/chart.vue?vue&type=script&lang=js&
; /* harmony default export */ var views_chartvue_type_script_lang_js_ = (chartvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/chart.vue?vue&type=style&index=0&id=3a445f34&lang=less&scoped=true&

// CONCATENATED MODULE: ./src/views/chart.vue?vue&type=style&index=1&lang=less&

// CONCATENATED MODULE: ./src/views/chart.vue
;


;



/* normalize component */

var chart_component = normalizeComponent(
  views_chartvue_type_script_lang_js_,
  chartvue_type_template_id_3a445f34_scoped_true_render,
  chartvue_type_template_id_3a445f34_scoped_true_staticRenderFns,
  false,
  null,
  "3a445f34",
  null
  
)

/* hot reload */
if (false) { var chart_api; }
chart_component.options.__file = "src/views/chart.vue"
/* harmony default export */ var chart = (chart_component.exports);
// CONCATENATED MODULE: ../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./src/views/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
;





/* harmony default export */ var viewsvue_type_script_lang_js_ = ({
  components: {
    RtTable: views_table,
    Chart: chart
  },
  props: {
    options: {
      type: Object,
      default: () => ({})
    }
  },
  computed: {
    activeCompBind() {
      return this.activeIndex > 0 ? {
        width: this.options.chart.width,
        height: this.options.chart.height,
        type: this.activeTabItem.id,
        activeIndex: this.activeIndex,
        ...this.tableData
      } : {
        tableData: this.tableData
      };
    },

    activeComp() {
      return this.activeIndex > 0 ? chart : views_table;
    },

    activeTabItem() {
      return this.headerTabs[this.activeIndex];
    },

    tableData() {
      return {
        columns: this.columns,
        list: this.list,
        info: this.info
      };
    },

    plugins() {
      return this.options.plugins || {};
    },

    activeHeaderTabs() {
      return this.headerTabs.filter(tab => !this.options.chart.disabled.includes(tab.id));
    }

  },

  data() {
    return {
      headerTabs: [{
        id: 'table',
        order: 0,
        name: 'Table',
        icon: 'table'
      }, {
        id: 'line',
        order: 1,
        name: 'Line',
        icon: 'line-chart'
      }, {
        id: 'bar',
        order: 2,
        name: 'Bar',
        icon: 'bar-vertical-chart'
      }, {
        id: 'pie',
        order: 3,
        name: 'Pie',
        icon: 'pie-chart'
      }, {
        id: 'scatter',
        order: 4,
        name: 'scatter',
        icon: 'scatter-chart'
      }],
      activeIndex: 0,
      list: [],
      columns: [],
      info: null,
      message: '',
      localPlugins: ['download', 'superset', 'grafana', 'notebook'],
      storeKey: ''
    };
  },

  methods: {
    handlePluginClick(e, type) {
      bkStore[this.storeKey].emitEvent('plugin-click', [e, type]);
    },

    handleItemClick(item, index) {
      this.activeIndex = index;
      bkStore[this.storeKey].setStore('bkChartsActiveTabIndex', index); // if (this.activeIndex > 0) {
      //     const lastFormData = bkStore[this.storeKey].getStore('bkChartsFormData');
      //     bkStore[this.storeKey].emitEvent('update-last-optoins', [lastFormData]);
      // }
    },

    setActiveTabIndex(index) {
      if (index >= 0) {
        this.activeIndex = index;
      } else {
        this.activeIndex = 0;
      }
    },

    setChartOptions(options) {
      // bkStore[this.storeKey].emitEvent('update-last-optoins', [options]);
      this.$nextTick(() => {
        bkStore[this.storeKey].emitEvent('update-last-optoins', [options]);
      });
    },

    updateOptions() {
      this.setActiveTabIndex(bkStore[this.storeKey].getStore('bkChartsActiveTabIndex'));
      this.setChartOptions(bkStore[this.storeKey].getStore('bkChartsFormData'));
    },

    handleTableDataChanged(list, columns, message, info = undefined) {
      this.list.splice(0, this.list.length, ...list);
      this.columns.splice(0, this.columns.length, ...columns);
      this.info = info;

      if (message !== undefined) {
        this.message = message;
      }
    },

    handleConfigChanged(cfg) {
      this.$nextTick(() => {
        bkStore[this.storeKey].emitEvent('update-last-optoins', [cfg]);
      });
    }

  },

  created() {
    this.updateOptions();
  },

  mounted() {
    const that = this;
    index_all('[data-plugins]', {
      content(reference) {
        const name = reference.getAttribute('data-plugins');
        const config = that.plugins[name] || {};
        return config.text || name;
      },

      arrow: true,
      boundary: 'window'
    });
    this.storeKey = getStoreIndex(this.$el);
    bkStore[this.storeKey].addWatcher('on-update-active-index', this.setActiveTabIndex);
    bkStore[this.storeKey].addWatcher('on-update-chart-config', this.handleConfigChanged);
    bkStore[this.storeKey].addWatcher('on-table-data-changed', this.handleTableDataChanged);
  },

  beforeDestroy() {
    bkStore[this.storeKey].removeWatcher('on-update-active-index', this.setActiveTabIndex);
    bkStore[this.storeKey].removeWatcher('on-update-chart-config', this.handleConfigChanged);
    bkStore[this.storeKey].removeWatcher('on-table-data-changed', this.handleTableDataChanged);
  }

});
// CONCATENATED MODULE: ./src/views/index.vue?vue&type=script&lang=js&
; /* harmony default export */ var src_viewsvue_type_script_lang_js_ = (viewsvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/index.vue?vue&type=style&index=0&id=a83bd3b0&lang=less&scoped=true&

// CONCATENATED MODULE: ./src/views/index.vue
;


;


/* normalize component */

var views_component = normalizeComponent(
  src_viewsvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  "a83bd3b0",
  null
  
)

/* hot reload */
if (false) { var views_api; }
views_component.options.__file = "src/views/index.vue"
/* harmony default export */ var views = (views_component.exports);
// CONCATENATED MODULE: ./lib/src/utils.js
/**
 * 深拷贝扩展对象
 * @param target
 * @param ...sources
 * @returns {object}
 */
function utils_deepAssign(target, ...sources) {
  const sourcesArray = [...sources];
  const length = sourcesArray.length;

  if (typeof target !== 'object' && typeof target !== 'function') {
    target = {};
  }

  if (length === 0) {
    target = {};
  }

  sourcesArray.forEach(source => {
    for (const key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        const targetValue = target[key];

        if (Array.isArray(targetValue)) {
          target[key].push(...(source[key] || []));
        } else if (typeof targetValue === 'object') {
          target[key] = utils_deepAssign(targetValue, source[key]);
        } else {
          target[key] = source[key];
        }
      }
    }
  });
  return target;
}
/**
 * 以 baseColor 为基础生成随机颜色
 *
 * @param {string} baseColor 基础颜色
 * @param {number} count 随机颜色个数
 *
 * @return {Array} 颜色数组
 */

function utils_randomColor(baseColor, count) {
  const segments = baseColor.match(/[\da-z]{2}/g) || [];
  const segmentsNumber = new Array(segments.length).fill(0); // 转换成 rgb 数字

  for (let i = 0; i < segments.length; i++) {
    segmentsNumber[i] = parseInt(segments[i], 16);
  }

  const ret = []; // 生成 count 组颜色，色差 20 * Math.random

  for (let i = 0; i < count; i++) {
    ret[i] = '#' + Math.floor(segmentsNumber[0] + (Math.random() < 0.5 ? -1 : 1) * Math.random() * 20).toString(16) + Math.floor(segmentsNumber[1] + (Math.random() < 0.5 ? -1 : 1) * Math.random() * 20).toString(16) + Math.floor(segmentsNumber[2] + (Math.random() < 0.5 ? -1 : 1) * Math.random() * 20).toString(16);
  }

  return ret;
}
function utils_randomRgba(count = 0, opacity = 1) {
  function getRandomRgb() {
    const num = Math.round(0xffffff * Math.random()); // tslint:disable-next-line:no-bitwise

    const r = num >> 16; // tslint:disable-next-line:no-bitwise

    const g = num >> 8 & 255; // tslint:disable-next-line:no-bitwise

    const b = num & 255;
    return `rgba(${r}, ${g}, ${b}, ${opacity})`;
  }

  return new Array(count).fill('').map(color => getRandomRgb());
}
function utils_getStoreIndex(el) {
  const target = el.closest('[data-store-index]');

  if (target) {
    return target.getAttribute('data-store-index');
  }

  return undefined;
}
// CONCATENATED MODULE: ./lib/src/store.js
class store_BKStore {
  constructor() {
    this.init();
  }

  init() {
    this.store = {};
    this.watcher = {};
  }

  setStore(key, value) {
    Object.assign(this.store, {
      [key]: value
    });
  }

  getStore(key) {
    if (key === undefined) {
      return this.store;
    } else {
      return this.store[key];
    }
  }

  addWatcher(eventName, callbackFn) {
    if (!this.watcher[eventName]) {
      this.watcher[eventName] = [];
    }

    this.watcher[eventName].push(callbackFn);
  }

  getWatcher(eventName) {
    return this.watcher[eventName] || [];
  }

  emitEvent(eventName, args) {
    this.getWatcher(eventName).forEach(fn => {
      typeof fn === 'function' ? fn.call(this, ...args) : console.log('function not found:', fn);
    });
  }

  removeWatcher(eventName, callbakcFn) {
    if (callbakcFn !== null && callbakcFn !== undefined) {
      const events = this.getWatcher(eventName);
      const index = events.findIndex(fn => fn === callbakcFn);

      if (index >= 0) {
        events.splice(index, 1);
      }
    } else {
      let events = this.getWatcher(eventName);
      events = [];
    }
  }

  destroy() {
    this.store = null;
    this.watcher = null;
  }

}

const store_BKSTORE_KEY = '__BK_CHARTS_PANEL_STORE__';
const store_BKSTORE_INDEX_MANAGER = '__BKSTORE_INDEX_MANAGER__';

if (!window[store_BKSTORE_KEY]) {
  window[store_BKSTORE_KEY] = {};
}

const store_bkStore = new Proxy(window[store_BKSTORE_KEY], {
  get(obj, prop) {
    const BKSTORE_KEY_INDEX = `${store_BKSTORE_KEY}${prop}`;

    if (obj[BKSTORE_KEY_INDEX] === undefined) {
      obj[BKSTORE_KEY_INDEX] = new store_BKStore();
    }

    return obj[BKSTORE_KEY_INDEX];
  },

  set: (target, key, value) => {
    target[key] = value;
    return true;
  }
});
let src_store_hasInitZIndex = false; // tslint:disable-next-line:variable-name

let store_storeIndex;

function store_initStoreIndex() {
  if (!window[store_BKSTORE_INDEX_MANAGER]) {
    window[store_BKSTORE_INDEX_MANAGER] = {
      nextZIndex(storeIndex) {
        return storeIndex === undefined ? window[store_BKSTORE_INDEX_MANAGER].storeIndex++ : storeIndex;
      }

    };
    Object.defineProperty(window[store_BKSTORE_INDEX_MANAGER], 'storeIndex', {
      configurable: true,

      get() {
        if (!src_store_hasInitZIndex) {
          store_storeIndex = store_storeIndex || 0;
          src_store_hasInitZIndex = true;
        }

        return store_storeIndex;
      },

      set(value) {
        store_storeIndex = value;
      }

    });
  }
}

store_initStoreIndex();
const store_storeIndexManager = window[store_BKSTORE_INDEX_MANAGER];

// CONCATENATED MODULE: ./lib/src/main.js
;



/** 支持的类型 */

var CHART_TYPE;

(function (CHART_TYPE) {
  CHART_TYPE["TABEL"] = "table";
  CHART_TYPE["LINE"] = "line";
  CHART_TYPE["BAR"] = "bar";
  CHART_TYPE["PIE"] = "pie";
  CHART_TYPE["SCATTER"] = "scatter";
})(CHART_TYPE || (CHART_TYPE = {}));
/** 图表组件可视化配置面板 */


class BkChartsPanel {
  /**
   * 初始化面板组件
   * @param container 挂载DOM元素
   * @param list 数据列表
   * @param columns 显示列
   * @param options 组件渲染配置项
   * @param message 显示消息
   * @param info 更多提示
   */
  constructor(container, list, columns, options, message = '', info) {
    /** 默认配置项 */
    this.defaultOptions = {
      chart: {
        width: 500,
        height: 400,
        disabled: []
      },
      plugins: {
        download: {
          enabled: false
        },
        superset: {
          enabled: false
        },
        grafana: {
          enabled: false
        },
        notebook: {
          enabled: false
        }
      }
    };
    this.list = list;
    this.options = options;
    this.message = message;
    this.columns = columns;
    this.options = utils_deepAssign({}, this.defaultOptions, options);
    this.watcher = {};
    this.container = container;
    this.elIns = undefined;
    this.containerDom = null;
    this.info = info;
    this.storeIndex = store_storeIndexManager.nextZIndex();
    this.store = store_bkStore[this.storeIndex];

    this._updateOptions(options);

    this.renderInstance();
  }
  /**
   * 获取当前图表配置
   * @param key
   */


  getOptions(key) {
    return this.store.getStore(key);
  }
  /**
   * 异步更新配置项
   * @param options
   */


  updateOptions(options) {
    this._updateOptions(options);
  }
  /**
   * 更新表数据
   * @param list 列表数据
   * @param columns 表头配置
   * @param message 显示消息
   * @param info 表格显示消息
   */


  updateTableList(list, columns, message, info) {
    this.store.emitEvent('on-table-data-changed', [list, columns, message, info]);
  }
  /**
   * 强制销毁当前实例并重新渲染组件
   * 已废弃
   */


  forceUpdate() {}
  /**
   * 监听事件
   * @param eventName 事件名称 目前支持： option-changed
   * @param callbackFn 回调函数
   */


  on(eventName, callbackFn) {
    this.store.addWatcher(eventName, callbackFn);
    return this;
  }

  initElIns() {
    if (typeof this.container === 'string') {
      this.containerDom = document.querySelector(this.container);

      if (this.containerDom) {
        this.elIns = document.createElement('div');
      }
    }

    if (this.isElement(this.container)) {
      this.elIns = document.createElement('div');
      this.containerDom = this.container;
    }

    if (this.containerDom !== null) {
      this.containerDom.innerHTML = '';
      this.containerDom.setAttribute('data-store-index', `${this.storeIndex}`);

      if (this.elIns !== undefined) {
        this.containerDom.append(this.elIns);
      }
    }
  }

  isElement(o) {
    return typeof HTMLElement === 'object' ? o instanceof HTMLElement : o && typeof o === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string';
  }

  renderInstance() {
    this.initElIns();
    const data = {
      list: this.list,
      options: this.options,
      message: this.message,
      columns: this.columns,
      info: this.info
    };
    const store = this.store;
    this.instance = new vue_esm({
      el: this.elIns,
      template: `<index :options="options" :message="message" />`,
      data,
      components: {
        index: views
      },

      mounted() {
        this.$nextTick(() => {
          console.log('main bkStore', store);
          store.emitEvent('on-table-data-changed', [data.list, data.columns, data.message, data.info]);
        });
      },

      beforeDestroy() {
        store.destroy();
      }

    });
  }
  /**
   * 更新图表配置
   * @param options
   */


  _updateOptions(options) {
    [{
      key: 'bkChartsActiveTabIndex',
      evt: 'on-update-active-index'
    }, {
      key: 'bkChartsFormData',
      evt: 'on-update-chart-config'
    }].forEach(cfg => {
      if (Object.prototype.hasOwnProperty.call(options, cfg.key)) {
        this.store.setStore(cfg.key, options[cfg.key]);
        this.store.emitEvent(cfg.evt, [options[cfg.key]]);
      }
    });
  }

}

if (!window.BkChartsPanel) {
  window.BkChartsPanel = BkChartsPanel;
}

/* harmony default export */ var main = (BkChartsPanel);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(792);
/******/ })()
;
});